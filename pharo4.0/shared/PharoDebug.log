THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MessageTally>>withDeepCollect:
20 October 2015 5:12:29.969833 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

MessageTally(Object)>>doesNotUnderstand: #withDeepCollect:
	Receiver: UndefinedObject(ProtoObject) >> ~~
	Arguments and temporary variables: 
		aMessage: 	withDeepCollect: #children
		exception: 	MessageNotUnderstood: MessageTally>>withDeepCollect:
		resumeValue: 	nil
	Receiver's instance variables: 
		class: 	UndefinedObject
		method: 	ProtoObject>>#'~~'
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	66
		receivers: 	#()
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


MessageTally>>gtInspectorMessageTreeIn:
	Receiver: UndefinedObject(ProtoObject) >> ~~
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=243531776 title=nil pane=a GLMPane(144...etc...
		methods: 	nil
		normalizer: 	nil
	Receiver's instance variables: 
		class: 	UndefinedObject
		method: 	ProtoObject>>#'~~'
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	66
		receivers: 	#()
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


[ :eachPragma | 
(eachPragma selector findTokens: $:) size = 1
	ifTrue: [ self perform: eachPragma selector with: composite ].
(eachPragma selector findTokens: $:) size = 2
	ifTrue: [ self perform: eachPragma selector with: composite with: aGTInspector ] ] in MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
	Receiver: UndefinedObject(ProtoObject) >> ~~
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=243531776 title=nil pane=a GLMPane(144...etc...
		aGTInspector: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLM...etc...
		pragmas: 	an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOr...etc...
		eachPragma: 	<gtInspectorPresentationOrder: 40>
	Receiver's instance variables: 
		class: 	UndefinedObject
		method: 	ProtoObject>>#'~~'
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	66
		receivers: 	#()
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


Array(SequenceableCollection)>>do:
	Receiver: an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOrder: 40> <gtInspecto...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :eachPragma | 
(eachPragma selector findTokens: $:) size = 1
	ifTrue:...etc...
		index: 	2
	Receiver's instance variables: 
an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOrder: 40> <gtInspecto...etc...

MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
	Receiver: UndefinedObject(ProtoObject) >> ~~
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=243531776 title=nil pane=a GLMPane(144...etc...
		aGTInspector: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLM...etc...
		pragmas: 	an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOr...etc...
	Receiver's instance variables: 
		class: 	UndefinedObject
		method: 	ProtoObject>>#'~~'
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	66
		receivers: 	#()
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


[ :d | each gtInspectorPresentationsIn: d inContext: pager ] in [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
	Receiver: a RTExampleBrowser
	Arguments and temporary variables: 
		pager: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(67...etc...
		a: 	a GLMCompositePresentation(id=806092800 title=a MessageTally (UndefinedObjec...etc...
		each: 	UndefinedObject(ProtoObject) >> ~~
		x: 	UndefinedObject(ProtoObject) >> ~~
		d: 	a GLMCompositePresentation(id=375390208 title=nil pane=a GLMPane(1024458752 ...etc...
	Receiver's instance variables: 
a RTExampleBrowser

GLMCompositePresentation(GLMPresentation)>>with:
	Receiver: a GLMCompositePresentation(id=375390208 title=nil pane=a GLMPane(1024458752 root))
	Arguments and temporary variables: 
		aBlock: 	[ :d | each gtInspectorPresentationsIn: d inContext: pager ]
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(1024458752 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentations: 	an OrderedCollection(a GTObjectVariablesBrowser(id=788004864 tit...etc...
		arrangement: 	nil


[ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
	Receiver: a RTExampleBrowser
	Arguments and temporary variables: 
		pager: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(67...etc...
		a: 	a GLMCompositePresentation(id=806092800 title=a MessageTally (UndefinedObjec...etc...
		each: 	UndefinedObject(ProtoObject) >> ~~
		x: 	UndefinedObject(ProtoObject) >> ~~
	Receiver's instance variables: 
a RTExampleBrowser

BlockClosure>>glamourValueWithArgs:
	Receiver: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inCon...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(UndefinedObject(ProtoObject) >> ~~)
	Receiver's instance variables: 
		outerContext: 	[ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: eac...etc...
		startpc: 	167
		numArgs: 	1


BlockClosure(Object)>>glamourValue:
	Receiver: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inCon...etc...
	Arguments and temporary variables: 
		anObject: 	UndefinedObject(ProtoObject) >> ~~
		args: 	an Array(UndefinedObject(ProtoObject) >> ~~)
	Receiver's instance variables: 
		outerContext: 	[ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: eac...etc...
		startpc: 	167
		numArgs: 	1


GLMDynamicPresentation(GLMPresentation)>>displayValue
	Receiver: a GLMDynamicPresentation(id=467664896 title=nil pane=a GLMPane(578289664 4))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(578289664 4)
		title: 	nil
		titleIcon: 	nil
		transformation: 	[ :x | (GLMCompositePresentation new with: [ :d | each gtInspec...etc...
		actions: 	nil
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMDynamicPresentation(id=934805504 title=nil pane=a GLMPane...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>dynamic
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentationTransformation: 	[ :aComposite :each | aComposite custom: each ]
		cachedPresentation: 	nil


GLMDynamicPresentation>>currentPresentation
	Receiver: a GLMDynamicPresentation(id=467664896 title=nil pane=a GLMPane(578289664 4))
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=251133952 title=nil pane=a GLMPane(131...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(578289664 4)
		title: 	nil
		titleIcon: 	nil
		transformation: 	[ :x | (GLMCompositePresentation new with: [ :d | each gtInspec...etc...
		actions: 	nil
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMDynamicPresentation(id=934805504 title=nil pane=a GLMPane...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>dynamic
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentationTransformation: 	[ :aComposite :each | aComposite custom: each ]
		cachedPresentation: 	nil


GLMMorphicDynamicRenderer>>render:
	Receiver: a GLMMorphicDynamicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=467664896 title=nil pane=a GLMPane(5...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(152829952)


GLMMorphicDynamicRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicDynamicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=467664896 title=nil pane=a GLMPane(5...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnPresentationUpdated:->GLMMorphicDynamicRen...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#container)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicDynamicRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderDynamicPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=467664896 title=nil pane=a GLMPane(5...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMDynamicPresentation>>renderGlamorouslyOn:
	River: a GLMDynamicPresentation(id=269484032 title=nil pane=a GLMPane(452460544 5))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(452460544 5)
		title: 	nil
		titleIcon: 	nil
		transformation: 	[ :x | (GLMCompositePresentation new with: [ :d | each gtInspec...etc...
		actions: 	nil
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMDynamicPresentation(id=766771200 title=nil pane=a GLMPane...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>dynamic
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentationTransformation: 	[ :aComposite :each | aComposite custom: each ]
		cachedPresentation: 	nil


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMDynamicPresentation(id=269484032 title=nil pane=a GLMPane(452...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMDynamicPresentation(id=269484032 title=nil pane=a GLMPane(452460...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=269484032 title=nil pane=a GLMPane(4...etc...
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=137101312 title=a MessageTally (Un...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicCompositeRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->GLMMorphicTabbedRenderer>...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#tabs)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicTabbedRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTabbedCompositePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aCompositePresentation: 	a GLMCompositePresentation(id=137101312 title=a Message...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMTabbedArrangement>>renderGlamorouslyOn:
	Receiver: a GLMTabbedArrangement
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		composite: 	a GLMCompositePresentation(id=137101312 title=a MessageTally (Undefi...etc...


GLMCompositePresentation>>renderGlamorouslyOn:
	Receiver: a GLMCompositePresentation(id=137101312 title=a MessageTally (UndefinedObject(ProtoObject)...etc...
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
er
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(578289664 4)
		title: 	[ GTInspector new printObjectAsAnItem: each ]
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	[ :aPresentation | each gtInspectorActions asOrderedCollec...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	a GLMCompositePresentation(id=806092800 title=a MessageTally (...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentations: 	an OrderedCollection(a GLMDynamicPresentation(id=467664896 title...etc...
		arrangement: 	a GLMTabbedArrangement


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMCompositePresentation(id=335282176 title=a MessageTally (Unde...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMCompositePresentation(id=335282176 title=a MessageTally (Undefin...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(1018691584)
		contentMorph: 	nil


GLMMorphicPaneRenderer>>renderContainerFor:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(578289664 4)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(1018691584)
		contentMorph: 	nil


GLMMorphicPaneRenderer>>render:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(578289664 4)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(1018691584)
		contentMorph: 	nil


GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPane(578289664 4)
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnMatchingPresentationChanged:->GLMMorphicPa...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#container #contentMorph)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicPaneRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderPane:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(578289664 4)
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMPane>>renderGlamorouslyOn:
	Receiver: a GLMPane(578289664 4)
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		browser: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(...etc...
		name: 	'4'
		presentations: 	a GLMCompositePresentation(id=335282176 title=a MessageTally (Un...etc...
		ports: 	an OrderedCollection(Port (pane='4' name=#activePresentation value=nil) ...etc...
		lastActivePresentation: 	nil
		allowedToNotePresentationsChanged: 	true
		cachedMatchingPresentations: 	an OrderedCollection(a GLMDynamicPresentation(id=4...etc...


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMPane(578289664 4)
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMMorphicPagerRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPagerRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMPane(578289664 4)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMFoundationBrick(970457088)


GLMMorphicPagerRenderer>>actOnPaneAdded:
	Receiver: a GLMMorphicPagerRenderer
	Arguments and temporary variables: 
		ann: 	a GLMPaneAdded
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMFoundationBrick(970457088)


MessageSend>>value:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		anObject: 	a GLMPaneAdded
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		arg: 	a GLMPaneAdded
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		arg1: 	a GLMPaneAdded
		arg2: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(675...etc...
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPaneAdded
	Receiver's instance variables: 
		announcer: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPan...etc...
		announcementClass: 	GLMPaneAdded
		subscriber: 	a GLMMorphicPagerRenderer
		action: 	MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0



--- The full stack ---
MessageTally(Object)>>doesNotUnderstand: #withDeepCollect:
MessageTally>>gtInspectorMessageTreeIn:
[ :eachPragma | 
(eachPragma selector findTokens: $:) size = 1
	ifTrue: [ self perform: eachPragma selector with: composite ].
(eachPragma selector findTokens: $:) size = 2
	ifTrue: [ self perform: eachPragma selector with: composite with: aGTInspector ] ] in MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
Array(SequenceableCollection)>>do:
MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
[ :d | each gtInspectorPresentationsIn: d inContext: pager ] in [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
GLMCompositePresentation(GLMPresentation)>>with:
[ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
BlockClosure>>glamourValueWithArgs:
BlockClosure(Object)>>glamourValue:
GLMDynamicPresentation(GLMPresentation)>>displayValue
GLMDynamicPresentation>>currentPresentation
GLMMorphicDynamicRenderer>>render:
GLMMorphicDynamicRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderDynamicPresentation:
GLMDynamicPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>render:
GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderPane:
GLMPane>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPagerRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPagerRenderer>>actOnPaneAdded:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MessageTally>>withDeepCollect:
20 October 2015 5:13:02.437839 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

MessageTally(Object)>>doesNotUnderstand: #withDeepCollect:
	Receiver: LazyMorphListMorph(LazyMorphListMorph) >> listChanged
	Arguments and temporary variables: 
		aMessage: 	withDeepCollect: #children
		exception: 	MessageNotUnderstood: MessageTally>>withDeepCollect:
		resumeValue: 	nil
	Receiver's instance variables: 
		class: 	LazyMorphListMorph
		method: 	LazyMorphListMorph>>#listChanged
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	1678
		receivers: 	an Array(LazyMorphListMorph(LazyListMorph) >> getListSize LazyMorphL...etc...
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


MessageTally>>gtInspectorMessageTreeIn:
	Receiver: LazyMorphListMorph(LazyMorphListMorph) >> listChanged
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=337379328 title=nil pane=a GLMPane(101...etc...
		methods: 	nil
		normalizer: 	nil
	Receiver's instance variables: 
		class: 	LazyMorphListMorph
		method: 	LazyMorphListMorph>>#listChanged
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	1678
		receivers: 	an Array(LazyMorphListMorph(LazyListMorph) >> getListSize LazyMorphL...etc...
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


[ :eachPragma | 
(eachPragma selector findTokens: $:) size = 1
	ifTrue: [ self perform: eachPragma selector with: composite ].
(eachPragma selector findTokens: $:) size = 2
	ifTrue: [ self perform: eachPragma selector with: composite with: aGTInspector ] ] in MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
	Receiver: LazyMorphListMorph(LazyMorphListMorph) >> listChanged
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=337379328 title=nil pane=a GLMPane(101...etc...
		aGTInspector: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLM...etc...
		pragmas: 	an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOr...etc...
		eachPragma: 	<gtInspectorPresentationOrder: 40>
	Receiver's instance variables: 
		class: 	LazyMorphListMorph
		method: 	LazyMorphListMorph>>#listChanged
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	1678
		receivers: 	an Array(LazyMorphListMorph(LazyListMorph) >> getListSize LazyMorphL...etc...
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


Array(SequenceableCollection)>>do:
	Receiver: an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOrder: 40> <gtInspecto...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :eachPragma | 
(eachPragma selector findTokens: $:) size = 1
	ifTrue:...etc...
		index: 	2
	Receiver's instance variables: 
an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOrder: 40> <gtInspecto...etc...

MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
	Receiver: LazyMorphListMorph(LazyMorphListMorph) >> listChanged
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=337379328 title=nil pane=a GLMPane(101...etc...
		aGTInspector: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLM...etc...
		pragmas: 	an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOr...etc...
	Receiver's instance variables: 
		class: 	LazyMorphListMorph
		method: 	LazyMorphListMorph>>#listChanged
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	1678
		receivers: 	an Array(LazyMorphListMorph(LazyListMorph) >> getListSize LazyMorphL...etc...
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


[ :d | each gtInspectorPresentationsIn: d inContext: pager ] in [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
	Receiver: a RTExampleBrowser
	Arguments and temporary variables: 
		pager: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(67...etc...
		a: 	a GLMCompositePresentation(id=629407744 title=a MessageTally (LazyMorphListM...etc...
		each: 	LazyMorphListMorph(LazyMorphListMorph) >> listChanged
		x: 	LazyMorphListMorph(LazyMorphListMorph) >> listChanged
		d: 	a GLMCompositePresentation(id=337379328 title=nil pane=a GLMPane(1016594432 ...etc...
	Receiver's instance variables: 
a RTExampleBrowser

GLMCompositePresentation(GLMPresentation)>>with:
	Receiver: a GLMCompositePresentation(id=337379328 title=nil pane=a GLMPane(1016594432 root))
	Arguments and temporary variables: 
		aBlocationOr...etc...
	Receiver's instance variables: 
		class: 	LazyMorphListMorph
		method: 	LazyMorphListMorph>>#listChanged
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	1678
		receivers: 	an Array(LazyMorphListMorph(LazyListMorph) >> getListSize LazyMorphL...etc...
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


[ :d | each gtInspectorPresentationsIn: d inContext: pager ] in [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
	Receiver: a RTExampleBrowser
	Arguments and temporary variables: 
		pager: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(67...etc...
		a: 	a GLMCompositePresentation(id=689700864 title=a MessageTally (LazyMorphListM...etc...
		each: 	LazyMorphListMorph(LazyMorphListMorph) >> listChanged
		x: 	LazyMorphListMorph(LazyMorphListMorph) >> listChanged
		d: 	a GLMCompositePresentation(id=228851712 title=nil pane=a GLMPane(871890944 r...etc...
	Receiver's instance variables: 
a RTExampleBrowser

GLMCompositePresentation(GLMPresentation)>>with:
	Receiver: a GLMCompositePresentation(id=228851712 title=nil pane=a GLMPane(871890944 root))
	Arguments and temporary variables: 
		aBlock: 	[ :d | each gtInspectorPresentationsIn: d inContext: pager ]
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(871890944 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentations: 	an OrderedCollection(a GTObjectVariablesBrowser(id=647495680 tit...etc...
		arrangement: 	nil


[ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
	Receiver: a RTExampleBrowser
	Arguments and temporary variables: 
		pager: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(67...etc...
		a: 	a GLMCompositePresentation(id=689700864 title=a MessageTally (LazyMorphListM...etc...
		each: 	LazyMorphListMorph(LazyMorphListMorph) >> listChanged
		x: 	LazyMorphListMorph(LazyMorphListMorph) >> listChanged
	Receiver's instance variables: 
a RTExampleBrowser

BlockClosure>>glamourValueWithArgs:
	Receiver: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inCon...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(LazyMorphListMorph(LazyMorphListMorph) >> listChanged)
	Receiver's instance variables: 
		outerContext: 	[ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: eac...etc...
		startpc: 	167
		numArgs: 	1


BlockClosure(Object)>>glamourValue:
	Receiver: [ :x | (GLMCompositePresennsformation: 	[ :aComposite :each | aComposite custom: each ]
		cachedPresentation: 	nil


GLMDynamicPresentation>>currentPresentation
	Receiver: a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(486014976 4))
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=207093760 title=nil pane=a GLMPane(650...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(486014976 4)
		title: 	nil
		titleIcon: 	nil
		transformation: 	[ :x | (GLMCompositePresentation new with: [ :d | each gtInspec...etc...
		actions: 	nil
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMDynamicPresentation(id=782237696 title=nil pane=a GLMPane...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>dynamic
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentationTransformation: 	[ :aComposite :each | aComposite custom: each ]
		cachedPresentation: 	nil


GLMMorphicDynamicRenderer>>render:
	Receiver: a GLMMorphicDynamicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(4...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(102760448)


GLMMorphicDynamicRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicDynamicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(4...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnPresentationUpdated:->GLMMorphicDynamicRen...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#container)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicDynamicRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderDynamicPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(4...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMDynamicPresentation>>renderGlamorouslyOn:
	Receiver: a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(486014976 4))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(486014976 4)
		title: 	nil
		titleIcon: 	nil
		transformation: 	[ :x | (GLMCompositePresentation new with: [ :d | each gtInspec...etc...
		actions: 	nil
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMDynamicPresentation(id=782237696 title=nil pane=a GLMPane...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>dynamic
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentationTransformation: 	[ :aComposite :each | aComposite custom: each ]
		cachedPresentation: 	nil


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(486...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(486014...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(4...etc...
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=212860928 title=a MessageTally (La...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicCompositeRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->GLMMorphicTabbedRenderer>...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#tabs)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicTabbedRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTabbedCompositePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aCompositePresentation: 	a GLMCompositePresentation(id=212860928 title=a Message...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMTabbedArrangement>>renderGlamorouslyOn:
	Receiver: a GLMTabbedArrangement
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		composite: 	a GLMCompositePresentation(id=212860928 title=a MessageTally (LazyMo...etc...


GLMCompositePresentation>>renderGlamorouslyOn:
	Receiver: a GLMCompositePresentation(id=212860928 title=a MessageTally (LazyMorphListMorph>>#listCha...etc...
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(486014976 4)
		title: 	[ GTInspector new printObjectAsAnItem: each ]
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	[ :aPresentation | each gtInspectorActions asOrderedCollec...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	a GLMCompositePresentation(id=629407744 title=a MessageTally (...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentations: 	an OrderedCollection(a GLMDynamicPresentation(id=339214336 title...etc...
		arrangement: 	a GLMTabbedArrangement


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMCompositePresentation(id=212860928 title=a MessageTally (Lazy...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMCompositePresentation(id=212860928 title=a MessageTally (LazyMor...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(938475520)
		contentMorph: 	nil


GLMMorphicPaneRenderer>>renderContainerFor:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(486014976 4)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(938475520)
		contentMorph: 	nil


GLMMorphicPaneRenderer>>render:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(486014976 4)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(938475520)
		contentMorph: 	nil


GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPane(486014976 4)
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnMatchingPresentationChanged:->GLMMorphicPa...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#container #contentMorph)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicPaneRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderPane:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(486014976 4)
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMPane>>renderGlamorouslyOn:
	Receiver: a GLMPane(486014976 4)
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		browser: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(...etc...
		name: 	'4'
		presentations: 	a GLMCompositePresentation(id=212860928 title=a MessageTally (La...etc...
		ports: 	an OrderedCollection(Port (pane='4' name=#activePresentation value=nil) ...etc...
		lastActivePresentation: 	nil
		allowedToNotePresentationsChanged: 	true
		cachedMatchingPresentations: 	an OrderedCollection(a GLMDynamicPresentation(id=3...etc...


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMPane(486014976 4)
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMMorphicPagerRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPagerRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMPane(486014976 4)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMFoundationBrick(970457088)


GLMMorphicPagerRenderer>>actOnPaneAdded:
	Receiver: a GLMMorphicPagerRenderer
	Arguments and temporary variables: 
		ann: 	a GLMPaneAdded
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMFoundationBrick(970457088)


MessageSend>>value:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		anObject: 	a GLMPaneAdded
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


MessageSend>>cull:
	Recinstance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		browser: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(...etc...
		name: 	'5'
		presentations: 	a GLMCompositePresentation(id=164626432 title=a MessageTally (La...etc...
		ports: 	an OrderedCollection(Port (pane='5' name=#activePresentation value=nil) ...etc...
		lastActivePresentation: 	nil
		allowedToNotePresentationsChanged: 	true
		cachedMatchingPresentations: 	an OrderedCollection(a GLMDynamicPresentation(id=2...etc...


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMPane(528220160 5)
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMMorphicPagerRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPagerRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMPane(528220160 5)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMFoundationBrick(970457088)


GLMMorphicPagerRenderer>>actOnPaneAdded:
	Receiver: a GLMMorphicPagerRenderer
	Arguments and temporary variables: 
		ann: 	a GLMPaneAdded
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMFoundationBrick(970457088)


MessageSend>>value:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		anObject: 	a GLMPaneAdded
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		arg: 	a GLMPaneAdded
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		arg1: 	a GLMPaneAdded
		arg2: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(675...etc...
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPaneAdded
	Receiver's instance variables: 
		announcer: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPan...etc...
		announcementClass: 	GLMPaneAdded
		subscriber: 	a GLMMorphicPagerRenderer
		action: 	MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0



--- The full stack ---
MessageTally(Object)>>doesNotUnderstand: #withDeepCollect:
MessageTally>>gtInspectorMessageTreeIn:
[ :eachPragma | 
(eachPragma selector findTokens: $:) size = 1
	ifTrue: [ self perform: eachPragma selector with: composite ].
(eachPragma selector findTokens: $:) size = 2
	ifTrue: [ self perform: eachPragma selector with: composite with: aGTInspector ] ] in MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
Array(SequenceableCollection)>>do:
MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
[ :d | each gtInspectorPresentationsIn: d inContext: pager ] in [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsInslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPagerRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPagerRenderer>>actOnPaneAdded:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

 	a GLMMorphicRenderer
		container: 	a GLMFoundationBrick(970457088)


MessageSend>>value:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		anObject: 	a GLMPaneAdded
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		arg: 	a GLMPaneAdded
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		arg1: 	a GLMPaneAdded
		arg2: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(675...etc...
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPaneAdded
	Receiver's instance variables: 
		announcer: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPan...etc...
		announcementClass: 	GLMPaneAdded
		subscriber: 	a GLMMorphicPagerRenderer
		action: 	MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0



--- The full stack ---
MessageTally(Object)>>doesNotUnderstand: #withDeepCollect:
MessageTally>>gtInspectorMessageTreeIn:
[ :eachPragma | 
(eachPragma selector findTokens: $:) size = 1
	ifTrue: [ self perform: eachPragma selector with: composite ].
(eachPragma selector findTokens: $:) size = 2
	ifTrue: [ self perform: eachPragma selector with: composite with: aGTInspector ] ] in MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
Array(SequenceableCollection)>>do:
MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
[ :d | each gtInspectorPresentationsIn: d inContext: pager ] in [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
GLMCompositePresentation(GLMPresentation)>>with:
[ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
BlockClosure>>glamourValueWithArgs:
BlockClosure(Object)>>glamourValue:
GLMDynamicPresentation(GLMPresentation)>>displayValue
GLMDynamicPresentation>>currentPresentation
GLMMorphicDynamicRenderer>>render:
GLMMorphicDynamicRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderDynamicPresentation:
GLMDynamicPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>render:
GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderPane:
GLMPane>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPagerRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPagerRenderer>>actOnPaneAdded:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TRConstraint class>>stick:onTheBottomLeftOf:
22 October 2015 3:36:40.686015 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

TRConstraint class(Object)>>doesNotUnderstand: #stick:onTheBottomLeftOf:
	Receiver: TRConstraint
	Arguments and temporary variables: 
		aMessage: 	stick: a TRLabelShape onTheBottomLeftOf: a TRArcShape
		exception: 	MessageNotUnderstood: TRConstraint class>>stick:onTheBottomLeftOf:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	TRObject
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TRConstraint
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Trachel-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTLabelled>>initializeElement:
	Receiver: a RTLabelled
	Arguments and temporary variables: 
		element: 	a RTElement
		s: 	a TRArcShape
		t: 	1
		callback: 	a TRRemoveCallback
	Receiver's instance variables: 
		canvas: 	a TRCanvas
		color: 	Color gray
		highlightable: 	false
		lbl: 	a TRLabelShape
		lowColor: 	Color veryVeryLightGray
		offsetOnEdge: 	0.5
		position: 	#bottomLeft
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontSize: 	12


RTElement(RTAnnounceableObject)>>addInteraction:
	Receiver: a RTElement
	Arguments and temporary variables: 
		anInteractionClassOrInstance: 	a RTLabelled
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#RTLabelledCallback->a TRRemoveCallback #RTLabelledLab...etc...
		isFixed: 	false
		model: 	1
		shape: 	a RTArc
		trachelShape: 	a TRArcShape
		view: 	a RTView
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


RTElement(RTAnnounceableObject)>>@
	Receiver: a RTElement
	Arguments and temporary variables: 
		anInteractionClassOrInstance: 	a RTLabelled
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#RTLabelledCallback->a TRRemoveCallback #RTLabelledLab...etc...
		isFixed: 	false
		model: 	1
		shape: 	a RTArc
		trachelShape: 	a TRArcShape
		view: 	a RTView
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


[ :e | e @ interaction ] in RTGroup>>@
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		interaction: 	a RTLabelled
		e: 	a RTElement
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	10
		attributes: 	nil


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | e @ interaction ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	10
		attributes: 	nil


RTGroup>>@
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		interaction: 	a RTLabelled
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	10
		attributes: 	nil


RTRoassalExample>>exampleArc
	Receiver: a RTRoassalExample
	Arguments and temporary variables: 
		view: 	a RTView
		shape: 	a RTArc
		label: 	a RTLabelled
	Receiver's instance variables: 
a RTRoassalExample

RTExampleSelection(GTExample)>>result
	Receiver: a RTExampleSelection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		result: 	nil
		title: 	nil
		provider: 	a RTRoassalExample
		selector: 	#exampleArc
		parentExample: 	nil
		extractionStrategy: 	nil


[ :example | example result ] in RTRoassalExample(RTAbstractExample)>>gtInspectorPreviewIn:
	Receiver: a RTRoassalExample
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=258473984 title=nil pane=a GLMPane(478...etc...
		example: 	a RTExampleSelection
	Receiver's instance variables: 
a RTRoassalExample

BlockClosure>>glamourValueWithArgs:
	Receiver: [ :example | example result ]
	Arguments and temporary variables: 
		anArray: 	an Array(a RTExampleSelection)
	Receiver's instance variables: 
		outerContext: 	RTRoassalExample(RTAbstractExample)>>gtInspectorPreviewIn:
		startpc: 	79
		numArgs: 	1


BlockClosure(Object)>>glamourValue:
	Receiver: [ :example | example result ]
	Arguments and temporary variables: 
		anObject: 	a RTExampleSelection
		args: 	an Array(a RTExampleSelection)
	Receiver's instance variables: 
		outerContext: 	RTRoassalExample(RTAbstractExample)>>gtInspectorPreviewIn:
		startpc: 	79
		numArgs: 	1


GLMTransmission>>value
	Receiver: GLMTransmission (origins=an OrderedCollection(a GLMPresentationBoundPort 757858304 (name=#...etc...
	Arguments and temporary variables: 
		originalValue: 	a RTExampleSelection
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	a GLMPresentationBoundPort 794558464 (name=#selection value=a RTVi...etc...
		browser: 	nil
		origins: 	an OrderedCollection(a GLMOriginPortReference 793247744 (a GLMPresenta...etc...
		transmissionStrategy: 	a GLMNoStrategy
		transformation: 	[ :example | example result ]
		condition: 	true


GLMPanePort>>receive:in:
	Receiver: Port (pane='2' name=#selection value=a RTView)
	Arguments and temporary variables: 
		aTransmission: 	GLMTransmission (origins=an OrderedCollection(a GLMPresentationB...etc...
		aContext: 	a GLMTransmissionContext(nil)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		name: 	#selection
		pane: 	a GLMPane(478937088 2)
		value: 	a RTView


GLMPresentationBoundPort>>receive:in:
	Receiver: a GLMPresentationBoundPort 794558464 (name=#selection value=a RTView)
	Arguments and temporary variables: 
		aTransmission: 	GLMTransmission (origins=an OrderedCollection(a GLMPresentationB...etc...
		aContext: 	a GLMTransmissionContext(nil)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		name: 	#selection
		presentation: 	a GLMRoassal2Presentation(id=710672384 title=Examples pane=a GLMP...etc...


[ 
self transmissionStrategy transmitIn: aContext.
self destination receive: self in: aContext ] in GLMTransmission>>transmitIn:
	Receiver: GLMTransmission (origins=an OrderedCollection(a GLMPresentationBoundPort 757858304 (name=#...etc...
	Arguments and temporary variables: 
		aContext: 	a GLMTransmissionContext(nil)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	a GLMPresentationBoundPort 794558464 (name=#selection value=a RTVi...etc...
		browser: 	nil
		origins: 	an OrderedCollection(a GLMOriginPortReference 793247744 (a GLMPresenta...etc...
		transmissionStrategy: 	a GLMNoStrategy
		transformation: 	[ :example | example result ]
		condition: 	true


GLMPane>>notingPresentationChangeDo:
	Receiver: a GLMPane(478937088 2)
	Arguments and temporary variables: 
		aBlock: 	[ 
self transmissionStrategy transmitIn: aContext.
self destination rec...etc...
		oldPresentations: 	an OrderedCollection(a GLMDynamicPresentation(id=350224384 ti...etc...
		oldMatchingPresentations: 	an OrderedCollection(a GLMDynamicPresentation(id=3502...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		browser: 	a GLMPager(id=108003328 title=Roassal examples browser pane=a GLMPane(...etc...
		name: 	'2'
		presentations: 	a GLMCompositePresentation(id=217841664 title=a RTRoassalExample...etc...
		ports: 	an OrderedCollection(Port (pane='2' name=#activePresentation value=nil) ...etc...
		lastActivePresentation: 	nil
		allowedToNotePresentationsChanged: 	false
		cachedMatchingPresentations: 	an OrderedCollection(a GLMDynamicPresentation(id=3...etc...


GLMPresentationBoundPort(GLMBoundPort)>>notingPresentationChangeDo:
	Receiver: a GLMPresentationBoundPort 794558464 (name=#selection value=a RTView)
	Arguments and temporary variables: 
		aBlock: 	[ 
self transmissionStrategy transmitIn: aContext.
self destination rec...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		name: 	#selection
		presentation: 	a GLMRoassal2Presentation(id=710672384 title=Examples pane=a GLMP...etc...


GLMTransmission>>transmitIn:
	Receiver: GLMTransmission (origins=an OrderedCollection(a GLMPresentationBoundPort 757858304 (name=#...etc...
	Arguments and temporary variables: 
		aContext: 	a GLMTransmissionContext(nil)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	a GLMPresentationBoundPort 794558464 (name=#selection value=a RTVi...etc...
		browser: 	nil
		origins: 	an OrderedCollection(a GLMOriginPortReference 793247744 (a GLMPresenta...etc...
		transmissionStrategy: 	a GLMNoStrategy
		transformation: 	[ :example | example result ]
		condition: 	true


GLMTransmission>>transmit
	Receiver: GLMTransmission (origins=an OrderedCollection(a GLMPresentationBoundPort 757858304 (name=#...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	a GLMPresentationBoundPort 794558464 (name=#selection value=a RTVi...etc...
		browser: 	nil
		origins: 	an OrderedCollection(a GLMOriginPortReference 793247744 (a GLMPresenta...etc...
		transmissionStrategy: 	a GLMNoStrategy
		transformation: 	[ :example | example result ]
		condition: 	true


ByteSymbol(Symbol)>>value:
	Receiver: #transmit
	Arguments and temporary variables: 
		anObject: 	GLMTransmission (origins=an OrderedCollection(a GLMPresentationBoundP...etc...
	Receiver's instance variables: 
#transmit

IdentitySet(Set)>>do:
	Receiver: an IdentitySet(GLMTransmission (origins=an OrderedCollection(a GLMPresentationBoundPort 75...etc...
	Arguments and temporary variables: 
		aBlock: 	#transmit
		index: 	1
		each: 	GLMTransmission (origins=an OrderedCollection(a GLMPresentationBoundPort ...etc...
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(GLMTransmission (origins=an OrderedCollection(a GLMPresentation...etc...


GLMRoassal2Presentation(GLMPresentation)>>selection:
	Receiver: a GLMRoassal2Presentation(id=710672384 title=Examples pane=a GLMPane(478937088 2))
	Arguments and temporary variables: 
		anObject: 	a RTExampleSelection
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(478937088 2)
		title: 	'Examples'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection(a GLMGenericAction a GLMGenericAction a GLMGeneri...etc...
		condition: 	[ self gtExamples notEmpty ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	true
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>roassal2
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		painting: 	nil
		paintingBlock: 	[ :view | 
view @ RTDraggableView.
self gtOpenOn: view ]
		view: 	a RTView
		shouldPopulateSelection: 	true
		newViewBlock: 	[ RTView new ]


[ :event | self selection: each model ] in [ :each | each when: TRMouseLeftClick do: [ :event | self selection: each model ] ] in GLMRoassal2Presentation>>renderOn:
	Receiver: a GLMRoassal2Presentation(id=710672384 title=Examples pane=a GLMPane(478937088 2))
	Arguments and temporary variables: 
		aView: 	a RTView
		each: 	a RTElement
		event: 	a TRMouseLeftClick
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(478937088 2)
		title: 	'Examples'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection(a GLMGenericAction a GLMGenericAction a GLMGeneri...etc...
		condition: 	[ self gtExamples notEmpty ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	true
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>roassal2
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		painting: 	nil
		paintingBlock: 	[ :view | 
view @ RTDraggableView.
self gtOpenOn: view ]
		view: 	a RTView
		shouldPopulateSelection: 	true
		newViewBlock: 	[ RTView new ]


BlockClosure>>cull:
	Receiver: [ :event | self selection: each model ]
	Arguments and temporary variables: 
		anArg: 	a TRMouseLeftClick
	Receiver's instance variables: 
		outerContext: 	[ :each | each when: TRMouseLeftClick do: [ :event | self selecti...etc...
		startpc: 	107
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :event | self selection: each model ]
	Arguments and temporary variables: 
		firstArg: 	a TRMouseLeftClick
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	[ :each | each when: TRMouseLeftClick do: [ :event | self selecti...etc...
		startpc: 	107
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseLeftClick
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseLeftClick
		subscriber: 	a GLMRoassal2Presentation(id=710672384 title=Examples pane=a GLMPan...etc...
		action: 	[ :event | self selection: each model ]


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	nil
		ex: 	UnhandledError
		copy: 	nil
		onDoCtx: 	nil
		process: 	nil
		handler: 	nil
		bottom: 	nil
		thisCtx: 	nil
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0



--- The full stack ---
TRConstraint class(Object)>>doesNotUnderstand: #stick:onTheBottomLeftOf:
RTLabelled>>initializeElement:
RTElement(RTAnnounceableObject)>>addInteraction:
RTElement(RTAnnounceableObject)>>@
[ :e | e @ interaction ] in RTGroup>>@
RTGroup(OrderedCollection)>>do:
RTGroup>>@
RTRoassalExample>>exampleArc
RTExampleSelection(GTExample)>>result
[ :example | example result ] in RTRoassalExample(RTAbstractExample)>>gtInspectorPreviewIn:
BlockClosure>>glamourValueWithArgs:
BlockClosure(Object)>>glamourValue:
GLMTransmission>>value
GLMPanePort>>receive:in:
GLMPresentationBoundPort>>receive:in:
[ 
self transmissionStrategy transmitIn: aContext.
self destination receive: self in: aContext ] in GLMTransmission>>transmitIn:
GLMPane>>notingPresentationChangeDo:
GLMPresentationBoundPort(GLMBoundPort)>>notingPresentationChangeDo:
GLMTransmission>>transmitIn:
GLMTransmission>>transmit
ByteSymbol(Symbol)>>value:
IdentitySet(Set)>>do:
GLMRoassal2Presentation(GLMPresentation)>>selection:
[ :event | self selection: each model ] in [ :each | each when: TRMouseLeftClick do: [ :event | self selection: each model ] ] in GLMRoassal2Presentation>>renderOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: HideWindow>>hideButton
26 November 2015 4:32:46.680323 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

HideWindow(Object)>>doesNotUnderstand: #hideButton
	Receiver: a HideWindow
	Arguments and temporary variables: 
		aMessage: 	hideButton
		exception: 	MessageNotUnderstood: HideWindow>>hideButton
		resumeValue: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	nil
		showButton: 	nil


SpecInterpreter>>actionToPerformWithSelector:arguments:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		selector: 	#hideButton
		args: 	#()
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#model #hideButton)
		index: 	3


SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	#()
		numArgs: 	0
		selector: 	#hideButton
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#model #hideButton)
		index: 	3


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#model #hideButton)
		aSelector: 	#defaultSpec
		newInstance: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#model #hideButton)
		index: 	3


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#model #hideButton)
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#model #hideButton)
		index: 	3


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#model #hideButton)
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


SpecInterpreter>>computeSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aSymbol: 	#(#model #hideButton)
		aSelector: 	#defaultSpec
		instance: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFra...etc...
		index: 	nil


SpecInterpreter>>retrieveSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:...etc...
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFra...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:...etc...
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFra...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFra...etc...
		index: 	nil


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	{{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:. 0. ...etc...
		numArgs: 	1
		selector: 	#add:
		each: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:. 0. #...etc...
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#...etc...
		index: 	2


Array(SequenceableCollection)>>collect:
	Receiver: {{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:. 0. #topFraction:. 0....etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self class private_interpretASpec: each model: model selector...etc...
		newCollection: 	#(nil)
		index: 	1
	Receiver's instance variables: 
{{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:. 0. #topFraction:. 0....etc...

SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	{{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:. 0. ...etc...
		numArgs: 	1
		selector: 	#add:
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#...etc...
		index: 	2


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLa...etc...
		aSelector: 	#defaultSpec
		newInstance: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#...etc...
		index: 	2


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLa...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#...etc...
		index: 	2


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLa...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


SpecInterpreter>>computeSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aSymbol: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLayou...etc...
		aSelector: 	#defaultSpec
		instance: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {...etc...
		index: 	nil


SpecInterpreter>>retrieveSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecL...etc...
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecL...etc...
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecL...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {...etc...
		index: 	nil


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecL...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	{{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLayout...etc...
		numArgs: 	1
		selector: 	#add:
		each: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLayoutF...etc...
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model ...etc...
		index: 	6


Array(SequenceableCollection)>>collect:
	Receiver: {{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFract...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self class private_interpretASpec: each model: model selector...etc...
		newCollection: 	#(nil)
		index: 	1
	Receiver's instance variables: 
{{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFract...etc...

SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	{{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLayout...etc...
		numArgs: 	1
		selector: 	#add:
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model ...etc...
		index: 	6


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #label...etc...
		aSelector: 	#defaultSpec
		newInstance: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model ...etc...
		index: 	6


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #label...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model ...etc...
		index: 	6


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #label...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


SpecInterpreter>>computeSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aSymbol: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labelSea...etc...
		aSelector: 	#defaultSpec
		instance: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model...etc...
		index: 	nil


SpecInterpreter>>retrieveSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labe...etc...
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labe...etc...
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labe...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model...etc...
		index: 	nil


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labe...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	{{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labelSear...etc...
		numArgs: 	1
		selector: 	#add:
		each: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labelSearc...etc...
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {{#Contain...etc...
		index: 	2


Array(SequenceableCollection)>>collect:
	Receiver: {{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labelSearch). #layout:. {#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self class private_interpretASpec: each model: model selector...etc...
		newCollection: 	#(nil)
		index: 	1
	Receiver's instance variables: 
{{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labelSearch). #layout:. {#...etc...

SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	{{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labelSear...etc...
		numArgs: 	1
		selector: 	#add:
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {{#Contain...etc...
		index: 	2


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aSelector: 	nil
		newInstance: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {{#Contain...etc...
		index: 	2


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aModel: 	a HideWindow
		aSelector: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {{#Contain...etc...
		index: 	2


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aModel: 	a HideWindow
		aSelector: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings



--- The full stack ---
HideWindow(Object)>>doesNotUnderstand: #hideButton
SpecInterpreter>>actionToPerformWithSelector:arguments:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
SpecInterpreter>>computeSpecFrom:selector:
SpecInterpreter>>retrieveSpecFrom:selector:
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
Array(SequenceableCollection)>>collect:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
SpecInterpreter>>computeSpecFrom:selector:
SpecInterpreter>>retrieveSpecFrom:selector:
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
Array(SequenceableCollection)>>collect:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
SpecInterpreter>>computeSpecFrom:selector:
SpecInterpreter>>retrieveSpecFrom:selector:
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
Array(SequenceableCollection)>>collect:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ result := self private_interpretASpec: aPresenter model: aModel selector: aSelector ] in SpecInterpreter class>>interpretASpec:model:selector:
BlockClosure>>ensure:
SpecInterpreter class>>interpretASpec:model:selector:
SpecInterpreter class>>interpretASpec:model:
HideWindow(ComposableModel)>>adapterFrom:model:
HideWindow(ComposableModel)>>buildWithSpecLayout:
MorphicWindowAdapter>>addModelIn:withSpecLayout:
MorphicWindowAdapter(AbstractAdapter)>>update:with:
[ :aDependent | aDependent update: anAspect with: anObject ] in WindowModel(Object)>>changed:with:
DependentsArray>>do:
WindowModel(Object)>>changed:with:
WindowModel>>addModelIn:withSpecLayout:
WindowModel>>buildWithSpecLayout:
WindowModel>>openWithSpecLayout:
HideWindow(ComposableModel)>>openWithSpecLayout:
HideWindow(ComposableModel)>>openWithSpec:
HideWindow(ComposableModel)>>openWithSpec
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: HideWindow>>hideButton
26 November 2015 4:33:38.535615 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

HideWindow(Object)>>doesNotUnderstand: #hideButton
	Receiver: a HideWindow
	Arguments and temporary variables: 
		aMessage: 	hideButton
		exception: 	MessageNotUnderstood: HideWindow>>hideButton
		resumeValue: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


SpecInterpreter>>actionToPerformWithSelector:arguments:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		selector: 	#hideButton
		args: 	#()
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#model #hideButton)
		index: 	3


SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	#()
		numArgs: 	0
		selector: 	#hideButton
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#model #hideButton)
		index: 	3


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#model #hideButton)
		aSelector: 	#defaultSpec
		newInstance: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#model #hideButton)
		index: 	3


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#model #hideButton)
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	#(#model #hideButton)
		index: 	3


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	#(#model #hideButton)
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


SpecInterpreter>>computeSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aSymbol: 	#(#model #hideButton)
		aSelector: 	#defaultSpec
		instance: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFra...etc...
		index: 	nil


SpecInterpreter>>retrieveSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:...etc...
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFra...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:...etc...
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFra...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFra...etc...
		index: 	nil


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	{{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:. 0. ...etc...
		numArgs: 	1
		selector: 	#add:
		each: 	{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:. 0. #...etc...
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#...etc...
		index: 	2


Array(SequenceableCollection)>>collect:
	Receiver: {{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:. 0. #topFraction:. 0....etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self class private_interpretASpec: each model: model selector...etc...
		newCollection: 	#(nil)
		index: 	1
	Receiver's instance variables: 
{{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:. 0. #topFraction:. 0....etc...

SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	{{#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFraction:. 0. ...etc...
		numArgs: 	1
		selector: 	#add:
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#...etc...
		index: 	2


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLa...etc...
		aSelector: 	#defaultSpec
		newInstance: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#...etc...
		index: 	2


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLa...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#...etc...
		index: 	2


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLa...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


SpecInterpreter>>computeSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aSymbol: 	{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLayou...etc...
		aSelector: 	#defaultSpec
		instance: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {...etc...
		index: 	nil


SpecInterpreter>>retrieveSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecL...etc...
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecL...etc...
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecL...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {...etc...
		index: 	nil


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecL...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	{{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLayout...etc...
		numArgs: 	1
		selector: 	#add:
		each: 	{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLayoutF...etc...
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model ...etc...
		index: 	6


Array(SequenceableCollection)>>collect:
	Receiver: {{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFract...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self class private_interpretASpec: each model: model selector...etc...
		newCollection: 	#(nil)
		index: 	1
	Receiver's instance variables: 
{{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLayoutFrame. #leftFract...etc...

SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	{{{#ContainerModel. #add:. {#(#model #hideButton). #layout:. {#SpecLayout...etc...
		numArgs: 	1
		selector: 	#add:
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model ...etc...
		index: 	6


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #label...etc...
		aSelector: 	#defaultSpec
		newInstance: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model ...etc...
		index: 	6


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #label...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model ...etc...
		index: 	6


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #label...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


SpecInterpreter>>computeSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aSymbol: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labelSea...etc...
		aSelector: 	#defaultSpec
		instance: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model...etc...
		index: 	nil


SpecInterpreter>>retrieveSpecFrom:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labe...etc...
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labe...etc...
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model...etc...
		index: 	nil


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labe...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	nil
		arrayToInterpret: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model...etc...
		index: 	nil


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labe...etc...
		aModel: 	a HideWindow
		aSelector: 	#defaultSpec
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings


[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	{{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labelSear...etc...
		numArgs: 	1
		selector: 	#add:
		each: 	{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labelSearc...etc...
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {{#Contain...etc...
		index: 	2


Array(SequenceableCollection)>>collect:
	Receiver: {{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labelSearch). #layout:. {#...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self class private_interpretASpec: each model: model selector...etc...
		newCollection: 	#(nil)
		index: 	1
	Receiver's instance variables: 
{{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labelSearch). #layout:. {#...etc...

SpecInterpreter>>performNextSelectorAndIncrementIndex
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		args: 	{{{#ContainerModel. #add:. {{#ContainerModel. #add:. {#(#model #labelSear...etc...
		numArgs: 	1
		selector: 	#add:
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {{#Contain...etc...
		index: 	2


SpecInterpreter>>interpretASpec:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aSelector: 	nil
		newInstance: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {{#Contain...etc...
		index: 	2


SpecInterpreter>>interpretASpec:model:selector:
	Receiver: a SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aModel: 	a HideWindow
		aSelector: 	nil
	Receiver's instance variables: 
		model: 	a HideWindow
		spec: 	a SpecWrapper
		arrayToInterpret: 	{#ContainerModel. #add:. {{#ContainerModel. #add:. {{#Contain...etc...
		index: 	2


SpecInterpreter class>>private_interpretASpec:model:selector:
	Receiver: SpecInterpreter
	Arguments and temporary variables: 
		aPresenter: 	a SpecLayout
		aModel: 	a HideWindow
		aSelector: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#actionToPerformWithSelector:arguments:->SpecInt...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #spec #arrayToInterpret #index)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpecInterpreter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		bindings: 	a MorphicAdapterBindings



--- The full stack ---
HideWindow(Object)>>doesNotUnderstand: #hideButton
SpecInterpreter>>actionToPerformWithSelector:arguments:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
SpecInterpreter>>computeSpecFrom:selector:
SpecInterpreter>>retrieveSpecFrom:selector:
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
Array(SequenceableCollection)>>collect:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
SpecInterpreter>>computeSpecFrom:selector:
SpecInterpreter>>retrieveSpecFrom:selector:
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
Array(SequenceableCollection)>>collect:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
SpecInterpreter>>computeSpecFrom:selector:
SpecInterpreter>>retrieveSpecFrom:selector:
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
[ :each | self class private_interpretASpec: each model: model selector: spec selector ] in SpecInterpreter>>performNextSelectorAndIncrementIndex
Array(SequenceableCollection)>>collect:
SpecInterpreter>>performNextSelectorAndIncrementIndex
SpecInterpreter>>interpretASpec:selector:
SpecInterpreter>>interpretASpec:model:selector:
SpecInterpreter class>>private_interpretASpec:model:selector:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ result := self private_interpretASpec: aPresenter model: aModel selector: aSelector ] in SpecInterpreter class>>interpretASpec:model:selector:
BlockClosure>>ensure:
SpecInterpreter class>>interpretASpec:model:selector:
SpecInterpreter class>>interpretASpec:model:
HideWindow(ComposableModel)>>adapterFrom:model:
HideWindow(ComposableModel)>>buildWithSpecLayout:
MorphicWindowAdapter>>addModelIn:withSpecLayout:
MorphicWindowAdapter(AbstractAdapter)>>update:with:
[ :aDependent | aDependent update: anAspect with: anObject ] in WindowModel(Object)>>changed:with:
DependentsArray>>do:
WindowModel(Object)>>changed:with:
WindowModel>>addModelIn:withSpecLayout:
WindowModel>>buildWithSpecLayout:
WindowModel>>openWithSpecLayout:
HideWindow(ComposableModel)>>openWithSpecLayout:
HideWindow(ComposableModel)>>openWithSpec:
HideWindow(ComposableModel)>>openWithSpec
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 November 2015 4:38:58.935615 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ 
a := hideMenu multiSelection.
self halt ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
		a: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	a HideWindow
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ 
a := hideMenu multiSelection.
self halt ] ]
		labelHolder: 	a CollectionValueHolder[ 'Show' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(574881792))
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(574881792)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(574881792)
	Arguments and temporary variables: 
		event: 	[(1462@402) mouseUp 881604 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(255328256)
		submorphs: 	an Array(an AlignmentMorph(383778816))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (642252800) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(465829888)


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(574881792)
	Arguments and temporary variables: 
		evt: 	[(1462@402) mouseUp 881604 nil]
		all: 	an Array(a PluggableButtonMorph(574881792) a PluggableButtonMorph(56675532...etc...
		m: 	a PluggableButtonMorph(574881792)
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(255328256)
		submorphs: 	an Array(an AlignmentMorph(383778816))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (642252800) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(465829888)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(574881792) a PluggableButtonMorph(566755328))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			i...etc...
		index: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(574881792) a PluggableButtonMorph(566755328))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(574881792)
	Arguments and temporary variables: 
		evt: 	[(1462@402) mouseUp 881604 nil]
		all: 	an Array(a PluggableButtonMorph(574881792) a PluggableButtonMorph(56675532...etc...
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(255328256)
		submorphs: 	an Array(an AlignmentMorph(383778816))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (642252800) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(465829888)


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(574881792)
	Arguments and temporary variables: 
		anEvent: 	[(1462@402) mouseUp 881604 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(255328256)
		submorphs: 	an Array(an AlignmentMorph(383778816))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (642252800) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(465829888)


MouseButtonEvent>>sentTo:
	Receiver: [(1462@402) mouseUp 881604 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(574881792)
	Receiver's instance variables: 
		timeStamp: 	881604
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1462@402)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(574881792)
	Arguments and temporary variables: 
		anEvent: 	[(1462@402) mouseUp 881604 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(255328256)
		submorphs: 	an Array(an AlignmentMorph(383778816))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (642252800) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(465829888)


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(574881792)
	Arguments and temporary variables: 
		anEvent: 	[(1462@402) mouseUp 881604 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(255328256)
		submorphs: 	an Array(an AlignmentMorph(383778816))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (642252800) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(465829888)


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1462@402) mouseUp 881604 nil]
		focusHolder: 	a PluggableButtonMorph(574881792)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1462@402) corner: (1478@418)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1462@402) corner: (1478@418)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(574881792)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1462@402) mouseOver nil nil]
		targetOffset: 	(113.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 881604 1462 402 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(1462@402) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(860094464) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(1462@402) mouseUp 881604 nil]
		focusHolder: 	a PluggableButtonMorph(574881792)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(1462@402) corner: (1478@418)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1462@402) corner: (1478@418)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(574881792)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1462@402) mouseOver nil nil]
		targetOffset: 	(113.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 881604 1462 402 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1462@402) mouseUp 881604 nil]
		focusHolder: 	a PluggableButtonMorph(574881792)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1462@402) corner: (1478@418)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1462@402) corner: (1478@418)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(574881792)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1462@402) mouseOver nil nil]
		targetOffset: 	(113.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 881604 1462 402 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1462@402) mouseUp 881604 nil]
	Receiver's instance variables: 
		bounds: 	(1462@402) corner: (1478@418)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1462@402) corner: (1478@418)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(574881792)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1462@402) mouseOver nil nil]
		targetOffset: 	(113.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 881604 1462 402 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1462@402) mouseUp 881604 nil]
		evt: 	[(1462@402) mouseUp 881604 nil]
	Receiver's instance variables: 
		bounds: 	(1462@402) corner: (1478@418)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1462@402) corner: (1478@418)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(574881792)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1462@402) mouseOver nil nil]
		targetOffset: 	(113.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 881604 1462 402 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(1462@402) mouseUp 881604 nil]
		evtBuf: 	#(1 881604 1462 402 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1462@402) corner: (1478@418)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1462@402) corner: (1478@418)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(574881792)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1462@402) mouseOver nil nil]
		targetOffset: 	(113.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 881604 1462 402 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(202637312))(a DropList...etc...
		lastStepTime: 	881780
		lastStepMessage: 	nil
		lastCycleTime: 	881780
		alarms: 	a Heap()
		lastAlarmTime: 	881780
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(202637312))(a DropList...etc...
		lastStepTime: 	881780
		lastStepMessage: 	nil
		lastCycleTime: 	881780
		alarms: 	a Heap()
		lastAlarmTime: 	881780
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(202637312))(a DropList...etc...
		lastStepTime: 	881780
		lastStepMessage: 	nil
		lastCycleTime: 	881780
		alarms: 	a Heap()
		lastAlarmTime: 	881780
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(202637312))(a DropList...etc...
		lastStepTime: 	881780
		lastStepMessage: 	nil
		lastCycleTime: 	881780
		alarms: 	a Heap()
		lastAlarmTime: 	881780
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(860094464) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ 
a := hideMenu multiSelection.
self halt ] in HideWindow>>initializePresenter
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MultiColumnListModel>>selectItems
26 November 2015 4:40:38.437617 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

MultiColumnListModel(Object)>>doesNotUnderstand: #selectItems
	Receiver: a MultiColumnListModel
	Arguments and temporary variables: 
		aMessage: 	selectItems
		exception: 	MessageNotUnderstood: MultiColumnListModel>>selectItems
		resumeValue: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicMultiColumnListAdapter)
		focusOrder: 	nil
		owner: 	a HideWindow
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self clickOnSelectedItem...etc...
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'List' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		selectionHolder: 	a SelectionValueHolder[ an Array(a NewValueHolder[ 4 ] a NewVa...etc...
		listHolder: 	a CollectionValueHolder[ an OrderedCollection(a Node a Node a Node ...etc...
		menuHolder: 	a NewValueHolder[ [ :m :s | self menu: m shifted: s ] ]
		shortcutsHolder: 	nil
		multiSelectionHolder: 	a DictionaryValueHolder[ an IdentityDictionary(3->false 4...etc...
		multiSelection: 	a NewValueHolder[ true ]
		allowToSelect: 	a NewValueHolder[ true ]
		listItemsCache: 	an OrderedCollection(a Node a Node a Node a Node)
		filteringBlockHolder: 	a NewValueHolder[ [ :col | col ] ]
		sortingBlockHolder: 	a NewValueHolder[ [ :a :b | a objName < b objName ] ]
		wrapBlockHolder: 	a NewValueHolder[ [ :item | self wrapItem: item ] ]
		listAnnouncer: 	an Announcer
		backgroundColorBlock: 	a NewValueHolder[ [ :item :index | Smalltalk ui theme bac...etc...
		autoDeselect: 	a NewValueHolder[ true ]


[ 
a := hideMenu selectItems.
self halt ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
		a: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	a HideWindow
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ 
a := hideMenu selectItems.
self halt ] ]
		labelHolder: 	a CollectionValueHolder[ 'Show' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(254017536))
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(254017536)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(254017536)
	Arguments and temporary variables: 
		event: 	[(1440@399) mouseUp 981204 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(786432000)
		submorphs: 	an Array(an AlignmentMorph(62914560))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (315359232) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(144965632)


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(254017536)
	Arguments and temporary variables: 
		evt: 	[(1440@399) mouseUp 981204 nil]
		all: 	an Array(a PluggableButtonMorph(254017536) a PluggableButtonMorph(31064064...etc...
		m: 	a PluggableButtonMorph(254017536)
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(786432000)
		submorphs: 	an Array(an AlignmentMorph(62914560))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (315359232) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(144965632)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(254017536) a PluggableButtonMorph(310640640))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			i...etc...
		index: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(254017536) a PluggableButtonMorph(310640640))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(254017536)
	Arguments and temporary variables: 
		evt: 	[(1440@399) mouseUp 981204 nil]
		all: 	an Array(a PluggableButtonMorph(254017536) a PluggableButtonMorph(31064064...etc...
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(786432000)
		submorphs: 	an Array(an AlignmentMorph(62914560))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (315359232) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(144965632)


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(254017536)
	Arguments and temporary variables: 
		anEvent: 	[(1440@399) mouseUp 981204 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(786432000)
		submorphs: 	an Array(an AlignmentMorph(62914560))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (315359232) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(144965632)


MouseButtonEvent>>sentTo:
	Receiver: [(1440@399) mouseUp 981204 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(254017536)
	Receiver's instance variables: 
		timeStamp: 	981204
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1440@399)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(254017536)
	Arguments and temporary variables: 
		anEvent: 	[(1440@399) mouseUp 981204 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(786432000)
		submorphs: 	an Array(an AlignmentMorph(62914560))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (315359232) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(144965632)


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(254017536)
	Arguments and temporary variables: 
		anEvent: 	[(1440@399) mouseUp 981204 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(786432000)
		submorphs: 	an Array(an AlignmentMorph(62914560))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (315359232) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(144965632)


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1440@399) mouseUp 981204 nil]
		focusHolder: 	a PluggableButtonMorph(254017536)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1440@399) corner: (1456@415)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1440@399) corner: (1456@415)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(254017536)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1440@399) mouseOver nil nil]
		targetOffset: 	(91.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 981204 1440 399 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(1440@399) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(173539328) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(1440@399) mouseUp 981204 nil]
		focusHolder: 	a PluggableButtonMorph(254017536)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(1440@399) corner: (1456@415)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1440@399) corner: (1456@415)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(254017536)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1440@399) mouseOver nil nil]
		targetOffset: 	(91.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 981204 1440 399 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1440@399) mouseUp 981204 nil]
		focusHolder: 	a PluggableButtonMorph(254017536)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1440@399) corner: (1456@415)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1440@399) corner: (1456@415)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(254017536)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1440@399) mouseOver nil nil]
		targetOffset: 	(91.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 981204 1440 399 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1440@399) mouseUp 981204 nil]
	Receiver's instance variables: 
		bounds: 	(1440@399) corner: (1456@415)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1440@399) corner: (1456@415)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(254017536)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1440@399) mouseOver nil nil]
		targetOffset: 	(91.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 981204 1440 399 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1440@399) mouseUp 981204 nil]
		evt: 	[(1440@399) mouseUp 981204 nil]
	Receiver's instance variables: 
		bounds: 	(1440@399) corner: (1456@415)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1440@399) corner: (1456@415)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(254017536)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1440@399) mouseOver nil nil]
		targetOffset: 	(91.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 981204 1440 399 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(1440@399) mouseUp 981204 nil]
		evtBuf: 	#(1 981204 1440 399 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1440@399) corner: (1456@415)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1440@399) corner: (1456@415)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(254017536)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1440@399) mouseOver nil nil]
		targetOffset: 	(91.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 981204 1440 399 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(767295488))(a SearchMorp...etc...
		lastStepTime: 	981278
		lastStepMessage: 	nil
		lastCycleTime: 	981278
		alarms: 	a Heap()
		lastAlarmTime: 	981278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(767295488))(a SearchMorp...etc...
		lastStepTime: 	981278
		lastStepMessage: 	nil
		lastCycleTime: 	981278
		alarms: 	a Heap()
		lastAlarmTime: 	981278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(767295488))(a SearchMorp...etc...
		lastStepTime: 	981278
		lastStepMessage: 	nil
		lastCycleTime: 	981278
		alarms: 	a Heap()
		lastAlarmTime: 	981298
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316669952))(a SearchMorp...etc...
		lastStepTime: 	981298
		lastStepMessage: 	nil
		lastCycleTime: 	981298
		alarms: 	a Heap()
		lastAlarmTime: 	981298
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(173539328) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
MultiColumnListModel(Object)>>doesNotUnderstand: #selectItems
[ 
a := hideMenu selectItems.
self halt ] in HideWindow>>initializePresenter
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 November 2015 4:41:06.665617 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ 
a := hideMenu selectedItems.
self halt ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
		a: 	#(#('D' 'true'))
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	a HideWindow
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ 
a := hideMenu selectedItems.
self halt ] ]
		labelHolder: 	a CollectionValueHolder[ 'Show' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(470548480))
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(470548480)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(470548480)
	Arguments and temporary variables: 
		event: 	[(1485@392) mouseUp 1009420 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(525336576)
		submorphs: 	an Array(an AlignmentMorph(279445504))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (537919488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(361496576)


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(470548480)
	Arguments and temporary variables: 
		evt: 	[(1485@392) mouseUp 1009420 nil]
		all: 	an Array(a PluggableButtonMorph(470548480) a PluggableButtonMorph(64487424...etc...
		m: 	a PluggableButtonMorph(470548480)
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(525336576)
		submorphs: 	an Array(an AlignmentMorph(279445504))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (537919488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(361496576)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(470548480) a PluggableButtonMorph(64487424))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			i...etc...
		index: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(470548480) a PluggableButtonMorph(64487424))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(470548480)
	Arguments and temporary variables: 
		evt: 	[(1485@392) mouseUp 1009420 nil]
		all: 	an Array(a PluggableButtonMorph(470548480) a PluggableButtonMorph(64487424...etc...
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(525336576)
		submorphs: 	an Array(an AlignmentMorph(279445504))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (537919488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(361496576)


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(470548480)
	Arguments and temporary variables: 
		anEvent: 	[(1485@392) mouseUp 1009420 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(525336576)
		submorphs: 	an Array(an AlignmentMorph(279445504))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (537919488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(361496576)


MouseButtonEvent>>sentTo:
	Receiver: [(1485@392) mouseUp 1009420 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(470548480)
	Receiver's instance variables: 
		timeStamp: 	1009420
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1485@392)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(470548480)
	Arguments and temporary variables: 
		anEvent: 	[(1485@392) mouseUp 1009420 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(525336576)
		submorphs: 	an Array(an AlignmentMorph(279445504))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (537919488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(361496576)


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(470548480)
	Arguments and temporary variables: 
		anEvent: 	[(1485@392) mouseUp 1009420 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(525336576)
		submorphs: 	an Array(an AlignmentMorph(279445504))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (537919488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(361496576)


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1485@392) mouseUp 1009420 nil]
		focusHolder: 	a PluggableButtonMorph(470548480)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1485@392) corner: (1501@408)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1485@392) corner: (1501@408)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(470548480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1485@392) mouseOver nil nil]
		targetOffset: 	(136.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1009420 1485 392 0 0 0 1)
		lastKeyScanCode: 	27
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(1485@392) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(1042022400) a GLMSys...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(1485@392) mouseUp 1009420 nil]
		focusHolder: 	a PluggableButtonMorph(470548480)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(1485@392) corner: (1501@408)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1485@392) corner: (1501@408)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(470548480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1485@392) mouseOver nil nil]
		targetOffset: 	(136.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1009420 1485 392 0 0 0 1)
		lastKeyScanCode: 	27
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1485@392) mouseUp 1009420 nil]
		focusHolder: 	a PluggableButtonMorph(470548480)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1485@392) corner: (1501@408)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1485@392) corner: (1501@408)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(470548480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1485@392) mouseOver nil nil]
		targetOffset: 	(136.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1009420 1485 392 0 0 0 1)
		lastKeyScanCode: 	27
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1485@392) mouseUp 1009420 nil]
	Receiver's instance variables: 
		bounds: 	(1485@392) corner: (1501@408)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1485@392) corner: (1501@408)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(470548480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1485@392) mouseOver nil nil]
		targetOffset: 	(136.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1009420 1485 392 0 0 0 1)
		lastKeyScanCode: 	27
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1485@392) mouseUp 1009420 nil]
		evt: 	[(1485@392) mouseUp 1009420 nil]
	Receiver's instance variables: 
		bounds: 	(1485@392) corner: (1501@408)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1485@392) corner: (1501@408)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(470548480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1485@392) mouseOver nil nil]
		targetOffset: 	(136.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1009420 1485 392 0 0 0 1)
		lastKeyScanCode: 	27
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(1485@392) mouseUp 1009420 nil]
		evtBuf: 	#(1 1009420 1485 392 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1485@392) corner: (1501@408)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1485@392) corner: (1501@408)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(470548480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1485@392) mouseOver nil nil]
		targetOffset: 	(136.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1009420 1485 392 0 0 0 1)
		lastKeyScanCode: 	27
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316669952))(a SearchMorp...etc...
		lastStepTime: 	1009514
		lastStepMessage: 	nil
		lastCycleTime: 	1009514
		alarms: 	a Heap()
		lastAlarmTime: 	1009514
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316669952))(a SearchMorp...etc...
		lastStepTime: 	1009514
		lastStepMessage: 	nil
		lastCycleTime: 	1009514
		alarms: 	a Heap()
		lastAlarmTime: 	1009514
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316669952))(a SearchMorp...etc...
		lastStepTime: 	1009514
		lastStepMessage: 	nil
		lastCycleTime: 	1009514
		alarms: 	a Heap()
		lastAlarmTime: 	1009514
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316669952))(a SearchMorp...etc...
		lastStepTime: 	1009514
		lastStepMessage: 	nil
		lastCycleTime: 	1009514
		alarms: 	a Heap()
		lastAlarmTime: 	1009514
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(1042022400) a GLMSys...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ 
a := hideMenu selectedItems.
self halt ] in HideWindow>>initializePresenter
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 November 2015 4:41:25.641618 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ 
a := hideMenu selectedItems.
self halt ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
		a: 	#(#('D' 'true') #('B' 'true') #('C' 'true'))
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	a HideWindow
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ 
a := hideMenu selectedItems.
self halt ] ]
		labelHolder: 	a CollectionValueHolder[ 'Show' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(470548480))
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(470548480)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(470548480)
	Arguments and temporary variables: 
		event: 	[(1448@398) mouseUp 1028412 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(525336576)
		submorphs: 	an Array(an AlignmentMorph(279445504))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (537919488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(361496576)


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(470548480)
	Arguments and temporary variables: 
		evt: 	[(1448@398) mouseUp 1028412 nil]
		all: 	an Array(a PluggableButtonMorph(470548480) a PluggableButtonMorph(64487424...etc...
		m: 	a PluggableButtonMorph(470548480)
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(525336576)
		submorphs: 	an Array(an AlignmentMorph(279445504))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (537919488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(361496576)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(470548480) a PluggableButtonMorph(64487424))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			i...etc...
		index: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(470548480) a PluggableButtonMorph(64487424))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(470548480)
	Arguments and temporary variables: 
		evt: 	[(1448@398) mouseUp 1028412 nil]
		all: 	an Array(a PluggableButtonMorph(470548480) a PluggableButtonMorph(64487424...etc...
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(525336576)
		submorphs: 	an Array(an AlignmentMorph(279445504))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (537919488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(361496576)


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(470548480)
	Arguments and temporary variables: 
		anEvent: 	[(1448@398) mouseUp 1028412 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(525336576)
		submorphs: 	an Array(an AlignmentMorph(279445504))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (537919488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(361496576)


MouseButtonEvent>>sentTo:
	Receiver: [(1448@398) mouseUp 1028412 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(470548480)
	Receiver's instance variables: 
		timeStamp: 	1028412
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1448@398)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(470548480)
	Arguments and temporary variables: 
		anEvent: 	[(1448@398) mouseUp 1028412 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(525336576)
		submorphs: 	an Array(an AlignmentMorph(279445504))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (537919488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(361496576)


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(470548480)
	Arguments and temporary variables: 
		anEvent: 	[(1448@398) mouseUp 1028412 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(525336576)
		submorphs: 	an Array(an AlignmentMorph(279445504))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (537919488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(361496576)


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1448@398) mouseUp 1028412 nil]
		focusHolder: 	a PluggableButtonMorph(470548480)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1448@398) corner: (1464@414)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1448@398) corner: (1464@414)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(470548480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1448@398) mouseOver nil nil]
		targetOffset: 	(99.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1028412 1448 398 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(1448@398) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(1042022400) a GLMSys...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(1448@398) mouseUp 1028412 nil]
		focusHolder: 	a PluggableButtonMorph(470548480)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(1448@398) corner: (1464@414)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1448@398) corner: (1464@414)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(470548480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1448@398) mouseOver nil nil]
		targetOffset: 	(99.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1028412 1448 398 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1448@398) mouseUp 1028412 nil]
		focusHolder: 	a PluggableButtonMorph(470548480)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1448@398) corner: (1464@414)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1448@398) corner: (1464@414)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(470548480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1448@398) mouseOver nil nil]
		targetOffset: 	(99.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1028412 1448 398 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1448@398) mouseUp 1028412 nil]
	Receiver's instance variables: 
		bounds: 	(1448@398) corner: (1464@414)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1448@398) corner: (1464@414)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(470548480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1448@398) mouseOver nil nil]
		targetOffset: 	(99.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1028412 1448 398 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1448@398) mouseUp 1028412 nil]
		evt: 	[(1448@398) mouseUp 1028412 nil]
	Receiver's instance variables: 
		bounds: 	(1448@398) corner: (1464@414)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1448@398) corner: (1464@414)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(470548480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1448@398) mouseOver nil nil]
		targetOffset: 	(99.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1028412 1448 398 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(1448@398) mouseUp 1028412 nil]
		evtBuf: 	#(1 1028412 1448 398 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1448@398) corner: (1464@414)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1448@398) corner: (1464@414)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(470548480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1448@398) mouseOver nil nil]
		targetOffset: 	(99.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1028412 1448 398 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(767295488))(a SearchMorp...etc...
		lastStepTime: 	1028480
		lastStepMessage: 	nil
		lastCycleTime: 	1028480
		alarms: 	a Heap()
		lastAlarmTime: 	1028480
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(767295488))(a SearchMorp...etc...
		lastStepTime: 	1028480
		lastStepMessage: 	nil
		lastCycleTime: 	1028480
		alarms: 	a Heap()
		lastAlarmTime: 	1028480
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(767295488))(a SearchMorp...etc...
		lastStepTime: 	1028480
		lastStepMessage: 	nil
		lastCycleTime: 	1028480
		alarms: 	a Heap()
		lastAlarmTime: 	1028480
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(767295488))(a SearchMorp...etc...
		lastStepTime: 	1028480
		lastStepMessage: 	nil
		lastCycleTime: 	1028480
		alarms: 	a Heap()
		lastAlarmTime: 	1028480
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(1042022400) a GLMSys...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ 
a := hideMenu selectedItems.
self halt ] in HideWindow>>initializePresenter
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "a" is nil
26 November 2015 4:42:37.535621 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

UndefinedObject(Object)>>doesNotUnderstand: #a
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	a
		exception: 	MessageNotUnderstood: receiver of "a" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'a:=#(#(''D'' ''true'') #(''B'' ''true'') #(''C'' ''true'')).

...etc...
		itsSelection: 	a Text for 'a:=#(#(''D'' ''true'') #(''B'' ''true'') #(''C'' ''tr...etc...
		itsSelectionString: 	'a:=#(#(''D'' ''true'') #(''B'' ''true'') #(''C'' ''true'')...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	a := #(#('D' 'true') #('B' 'true') #('C' 'true')).
	^ first a
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(901513216)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(901513216)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(256114688)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(901513216)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@69)
		owner: 	a TransformWithLayoutMorph(371982336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(708050944) a RubCursor(225968128...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (299892736) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(333709312)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(225968128)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(74973184))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(256114688)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(767295488))(a SearchMorp...etc...
		lastStepTime: 	1100288
		lastStepMessage: 	nil
		lastCycleTime: 	1100310
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1100288
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(237502464) a Sp...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(767295488))(a SearchMorp...etc...
		lastStepTime: 	1100288
		lastStepMessage: 	nil
		lastCycleTime: 	1100310
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1100288
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(767295488))(a SearchMorp...etc...
		lastStepTime: 	1100288
		lastStepMessage: 	nil
		lastCycleTime: 	1100310
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1100288
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(237502464) a Sp...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #a
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "a" is nil
26 November 2015 4:42:48.909615 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

UndefinedObject(Object)>>doesNotUnderstand: #a
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	a
		exception: 	MessageNotUnderstood: receiver of "a" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ first a
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(901513216)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(901513216)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(256114688)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	1111670
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 
		anArgument: 	1111674
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	1111670
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1111674
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892338176))(a DropList...etc...
		lastStepTime: 	1111734
		lastStepMessage: 	nil
		lastCycleTime: 	1111734
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1111734
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		now: 	1111674
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892338176))(a DropList...etc...
		lastStepTime: 	1111734
		lastStepMessage: 	nil
		lastCycleTime: 	1111734
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1111734
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892338176))(a DropList...etc...
		lastStepTime: 	1111734
		lastStepMessage: 	nil
		lastCycleTime: 	1111734
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1111734
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(237502464) a Sp...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892338176))(a DropList...etc...
		lastStepTime: 	1111754
		lastStepMessage: 	nil
		lastCycleTime: 	1111754
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1111754
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892338176))(a DropList...etc...
		lastStepTime: 	1111754
		lastStepMessage: 	nil
		lastCycleTime: 	1111754
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1111754
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(237502464) a Sp...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #a
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "a" is nil
26 November 2015 4:43:11.405616 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

UndefinedObject(Object)>>doesNotUnderstand: #a
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	a
		exception: 	MessageNotUnderstood: receiver of "a" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'a:=#(#(''D'' ''true'') #(''B'' ''true'') #(''C'' ''true'')).

...etc...
		itsSelection: 	a Text for 'a:=#(#(''D'' ''true'') #(''B'' ''true'') #(''C'' ''tr...etc...
		itsSelectionString: 	'a:=#(#(''D'' ''true'') #(''B'' ''true'') #(''C'' ''true'')...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	a := #(#('D' 'true') #('B' 'true') #('C' 'true')).
	^ first a
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(901513216)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(901513216)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(256114688)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(901513216)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@69)
		owner: 	a TransformWithLayoutMorph(371982336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(708050944) a RubCursor(225968128...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (299892736) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(333709312)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(225968128)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(111411200))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(256114688)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SimpleBalloonMorph(46399488))(a Simp...etc...
		lastStepTime: 	1134178
		lastStepMessage: 	nil
		lastCycleTime: 	1134198
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1134178
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a SimpleBalloonMorph(46399488) a TaskbarMorph(984088576) a ...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SimpleBalloonMorph(46399488))(a Simp...etc...
		lastStepTime: 	1134178
		lastStepMessage: 	nil
		lastCycleTime: 	1134198
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1134178
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SimpleBalloonMorph(46399488))(a Simp...etc...
		lastStepTime: 	1134178
		lastStepMessage: 	nil
		lastCycleTime: 	1134198
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1134178
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a SimpleBalloonMorph(46399488) a TaskbarMorph(984088576) a ...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #a
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Array>>elements
26 November 2015 4:49:48.091614 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Array(Object)>>doesNotUnderstand: #elements
	Receiver: #(#('D' 'true') #('B' 'true') #('C' 'true'))
	Arguments and temporary variables: 
		aMessage: 	elements
		exception: 	MessageNotUnderstood: Array>>elements
		resumeValue: 	nil
	Receiver's instance variables: 
#(#('D' 'true') #('B' 'true') #('C' 'true'))

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'a:=#(#(''D'' ''true'') #(''B'' ''true'') #(''C'' ''true'')).

...etc...
		itsSelection: 	a Text for 'a:=#(#(''D'' ''true'') #(''B'' ''true'') #(''C'' ''tr...etc...
		itsSelectionString: 	'a:=#(#(''D'' ''true'') #(''B'' ''true'') #(''C'' ''true'')...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	a := #(#('D' 'true') #('B' 'true') #('C' 'true')).
	b := OrderedColl...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(901513216)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(901513216)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(256114688)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(901513216)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@164)
		owner: 	a TransformWithLayoutMorph(371982336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(951320576) a RubCursor(225968128...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (299892736) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(333709312)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(225968128)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(336592896))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(256114688)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(901513216))(a Rub...etc...
		lastStepTime: 	1530872
		lastStepMessage: 	nil
		lastCycleTime: 	1530892
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1530872
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(237502464) a Sp...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(901513216))(a Rub...etc...
		lastStepTime: 	1530872
		lastStepMessage: 	nil
		lastCycleTime: 	1530892
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1530872
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(901513216))(a Rub...etc...
		lastStepTime: 	1530872
		lastStepMessage: 	nil
		lastCycleTime: 	1530892
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1530872
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(237502464) a Sp...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #elements
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: BlockClosure>>b
26 November 2015 4:50:08.395616 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

BlockClosure(Object)>>doesNotUnderstand: #b
	Receiver: [ :asd | b add: asd first ]
	Arguments and temporary variables: 
		aMessage: 	b
		exception: 	MessageNotUnderstood: BlockClosure>>b
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	53
		numArgs: 	1


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'a:=#(#(''D'' ''true'') #(''B'' ''true'') #(''C'' ''true'')).

...etc...
		itsSelection: 	a Text for 'a:=#(#(''D'' ''true'') #(''B'' ''true'') #(''C'' ''tr...etc...
		itsSelectionString: 	'a:=#(#(''D'' ''true'') #(''B'' ''true'') #(''C'' ''true'')...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	a := #(#('D' 'true') #('B' 'true') #('C' 'true')).
	b := OrderedColl...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(901513216)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(901513216)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(256114688)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(901513216)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@145)
		owner: 	a TransformWithLayoutMorph(371982336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(951320576) a RubCursor(225968128...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (299892736) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(333709312)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(225968128)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(749207552))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(256114688)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(901513216))(a Rub...etc...
		lastStepTime: 	1551172
		lastStepMessage: 	nil
		lastCycleTime: 	1551192
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1551172
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(237502464) a Sp...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(901513216))(a Rub...etc...
		lastStepTime: 	1551172
		lastStepMessage: 	nil
		lastCycleTime: 	1551192
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1551172
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(901513216))(a Rub...etc...
		lastStepTime: 	1551172
		lastStepMessage: 	nil
		lastCycleTime: 	1551192
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(225968128)))
		lastAlarmTime: 	1551172
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(237502464) a Sp...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #b
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Array>>key
26 November 2015 4:52:00.363626 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Array(Object)>>doesNotUnderstand: #key
	Receiver: #('D' 'true')
	Arguments and temporary variables: 
		aMessage: 	key
		exception: 	MessageNotUnderstood: Array>>key
		resumeValue: 	nil
	Receiver's instance variables: 
#('D' 'true')

[ :item | item key ] in Array>>DoIt
	Receiver: #(#('D' 'true') #('B' 'true') #('C' 'true'))
	Arguments and temporary variables: 
		item: 	#('D' 'true')
	Receiver's instance variables: 
#(#('D' 'true') #('B' 'true') #('C' 'true'))

Array(SequenceableCollection)>>collect:
	Receiver: #(#('D' 'true') #('B' 'true') #('C' 'true'))
	Arguments and temporary variables: 
		aBlock: 	[ :item | item key ]
		newCollection: 	#(nil nil nil)
		index: 	1
	Receiver's instance variables: 
#(#('D' 'true') #('B' 'true') #('C' 'true'))

Array>>DoIt
	Receiver: #(#('D' 'true') #('B' 'true') #('C' 'true'))
	Arguments and temporary variables: 

	Receiver's instance variables: 
#(#('D' 'true') #('B' 'true') #('C' 'true'))

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ self collect: [ :item | item key ]
		source: 	a ReadStream
		context: 	nil
		receiver: 	#(#('D' 'true') #('B' 'true') #('C' 'true'))
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	#(#('D' 'true') #('B' 'true') #('C' 'true'))
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(513015808)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(513015808)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(262144)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	1663126
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 
		anArgument: 	1663136
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	1663126
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1663136
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(989593600)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316669952))(a SearchMorp...etc...
		lastStepTime: 	1663114
		lastStepMessage: 	nil
		lastCycleTime: 	1663166
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(989593600)))
		lastAlarmTime: 	1663114
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		now: 	1663136
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316669952))(a SearchMorp...etc...
		lastStepTime: 	1663114
		lastStepMessage: 	nil
		lastCycleTime: 	1663166
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(989593600)))
		lastAlarmTime: 	1663114
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316669952))(a SearchMorp...etc...
		lastStepTime: 	1663114
		lastStepMessage: 	nil
		lastCycleTime: 	1663166
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(989593600)))
		lastAlarmTime: 	1663114
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(220987392) a Sp...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316669952))(a SearchMorp...etc...
		lastStepTime: 	1663114
		lastStepMessage: 	nil
		lastCycleTime: 	1663166
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(989593600)))
		lastAlarmTime: 	1663114
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316669952))(a SearchMorp...etc...
		lastStepTime: 	1663114
		lastStepMessage: 	nil
		lastCycleTime: 	1663166
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(989593600)))
		lastAlarmTime: 	1663114
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(220987392) a Sp...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #key
[ :item | item key ] in Array>>DoIt
Array(SequenceableCollection)>>collect:
Array>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: HideWindow>>listChange:with:
26 November 2015 5:00:17.255619 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

HideWindow(Object)>>doesNotUnderstand: #listChange:with:
	Receiver: a HideWindow
	Arguments and temporary variables: 
		aMessage: 	listChange: 'C' with: true
		exception: 	MessageNotUnderstood: HideWindow>>listChange:with:
		resumeValue: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


[ :ele | self listChange: ele with: true ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


Array(SequenceableCollection)>>do:
	Receiver: #('C')
	Arguments and temporary variables: 
		aBlock: 	[ :ele | self listChange: ele with: true ]
		index: 	1
	Receiver's instance variables: 
#('C')

[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
		a: 	#('C')
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	a HideWindow
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ 
a := hideMenu selectedItems collect: [ :item...etc...
		labelHolder: 	a CollectionValueHolder[ 'Show' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(11534336))
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(11534336)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		event: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		evt: 	[(1444@397) mouseUp 2160014 nil]
		all: 	an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568...etc...
		m: 	a PluggableButtonMorph(11534336)
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			i...etc...
		index: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		evt: 	[(1444@397) mouseUp 2160014 nil]
		all: 	an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568...etc...
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


MouseButtonEvent>>sentTo:
	Receiver: [(1444@397) mouseUp 2160014 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(11534336)
	Receiver's instance variables: 
		timeStamp: 	2160014
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1444@397)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		focusHolder: 	a PluggableButtonMorph(11534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1444@397) corner: (1460@413)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1444@397) corner: (1460@413)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(11534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1444@397) mouseUp 2160014 nil]
		targetOffset: 	(95.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2160014 1444 397 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(1444@397) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(927727616) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		focusHolder: 	a PluggableButtonMorph(11534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(1444@397) corner: (1460@413)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1444@397) corner: (1460@413)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(11534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1444@397) mouseUp 2160014 nil]
		targetOffset: 	(95.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2160014 1444 397 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		focusHolder: 	a PluggableButtonMorph(11534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1444@397) corner: (1460@413)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1444@397) corner: (1460@413)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(11534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1444@397) mouseOver nil nil]
		targetOffset: 	(95.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2160014 1444 397 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(1444@397) corner: (1460@413)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1444@397) corner: (1460@413)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(11534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1444@397) mouseOver nil nil]
		targetOffset: 	(95.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2160014 1444 397 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		evt: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(1444@397) corner: (1460@413)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1444@397) corner: (1460@413)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(11534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1444@397) mouseOver nil nil]
		targetOffset: 	(95.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2160014 1444 397 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(1444@397) mouseUp 2160014 nil]
		evtBuf: 	#(1 2160014 1444 397 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1444@397) corner: (1460@413)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1444@397) corner: (1460@413)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(11534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1444@397) mouseOver nil nil]
		targetOffset: 	(95.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2160014 1444 397 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(853016576))(a DropList...etc...
		lastStepTime: 	2160106
		lastStepMessage: 	nil
		lastCycleTime: 	2160104
		alarms: 	a Heap()
		lastAlarmTime: 	2160106
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(853016576))(a DropList...etc...
		lastStepTime: 	2160106
		lastStepMessage: 	nil
		lastCycleTime: 	2160104
		alarms: 	a Heap()
		lastAlarmTime: 	2160106
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(853016576))(a DropList...etc...
		lastStepTime: 	2160106
		lastStepMessage: 	nil
		lastCycleTime: 	2160104
		alarms: 	a Heap()
		lastAlarmTime: 	2160106
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(853016576))(a DropList...etc...
		lastStepTime: 	2160106
		lastStepMessage: 	nil
		lastCycleTime: 	2160104
		alarms: 	a Heap()
		lastAlarmTime: 	2160106
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(927727616) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
HideWindow(Object)>>doesNotUnderstand: #listChange:with:
[ :ele | self listChange: ele with: true ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
Array(SequenceableCollection)>>do:
[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>equals:
26 November 2015 5:00:56.159614 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>doesNotUnderstand: #equals:
	Receiver: 'A'
	Arguments and temporary variables: 
		aMessage: 	equals: 'C'
		exception: 	MessageNotUnderstood: ByteString>>equals:
		resumeValue: 	nil
	Receiver's instance variables: 
'A'

[ :item | item objName equals: nameObj ] in HideWindow>>listChange:with:
	Receiver: a HideWindow
	Arguments and temporary variables: 
		nameObj: 	'C'
		value: 	true
		temp: 	nil
		item: 	a Node
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


OrderedCollection>>select:
	Receiver: an OrderedCollection(a Node a Node a Node a Node)
	Arguments and temporary variables: 
		selectBlock: 	[ :item | item objName equals: nameObj ]
		newCollection: 	an OrderedCollection()
		element: 	a Node
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Node a Node a Node a Node nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	4


HideWindow>>listChange:with:
	Receiver: a HideWindow
	Arguments and temporary variables: 
		nameObj: 	'C'
		value: 	true
		temp: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


[ :ele | self listChange: ele with: true ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


Array(SequenceableCollection)>>do:
	Receiver: #('C')
	Arguments and temporary variables: 
		aBlock: 	[ :ele | self listChange: ele with: true ]
		index: 	1
	Receiver's instance variables: 
#('C')

[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
		a: 	#('C')
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	a HideWindow
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ 
a := hideMenu selectedItems collect: [ :item...etc...
		labelHolder: 	a CollectionValueHolder[ 'Show' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(11534336))
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(11534336)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		event: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		evt: 	[(1444@397) mouseUp 2160014 nil]
		all: 	an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568...etc...
		m: 	a PluggableButtonMorph(11534336)
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			i...etc...
		index: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		evt: 	[(1444@397) mouseUp 2160014 nil]
		all: 	an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568...etc...
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


MouseButtonEvent>>sentTo:
	Receiver: [(1444@397) mouseUp 2160014 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(11534336)
	Receiver's instance variables: 
		timeStamp: 	2160014
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1444@397)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		focusHolder: 	a PluggableButtonMorph(11534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(738@388) corner: (754@404)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(738@388) corner: (754@404)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(908328960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(738@388) mouseOver nil nil]
		targetOffset: 	(115.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2198950 738 388 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(1444@397) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(858259456) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		focusHolder: 	a PluggableButtonMorph(11534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(738@388) corner: (754@404)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(738@388) corner: (754@404)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(908328960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(738@388) mouseOver nil nil]
		targetOffset: 	(115.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2198950 738 388 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		focusHolder: 	a PluggableButtonMorph(11534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(738@388) corner: (754@404)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(738@388) corner: (754@404)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(908328960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(738@388) mouseOver nil nil]
		targetOffset: 	(115.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2198950 738 388 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(738@388) corner: (754@404)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(738@388) corner: (754@404)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(908328960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(738@388) mouseOver nil nil]
		targetOffset: 	(115.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2198950 738 388 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		evt: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(738@388) corner: (754@404)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(738@388) corner: (754@404)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(908328960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(738@388) mouseOver nil nil]
		targetOffset: 	(115.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2198950 738 388 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(1444@397) mouseUp 2160014 nil]
		evtBuf: 	#(1 2160014 1444 397 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(738@388) corner: (754@404)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(738@388) corner: (754@404)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(908328960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(738@388) mouseOver nil nil]
		targetOffset: 	(115.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2198950 738 388 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(767295488))(a SearchMorp...etc...
		lastStepTime: 	2199056
		lastStepMessage: 	nil
		lastCycleTime: 	2199056
		alarms: 	a Heap()
		lastAlarmTime: 	2199056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(767295488))(a SearchMorp...etc...
		lastStepTime: 	2199056
		lastStepMessage: 	nil
		lastCycleTime: 	2199056
		alarms: 	a Heap()
		lastAlarmTime: 	2199056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(767295488))(a SearchMorp...etc...
		lastStepTime: 	2199056
		lastStepMessage: 	nil
		lastCycleTime: 	2199056
		alarms: 	a Heap()
		lastAlarmTime: 	2199056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(767295488))(a SearchMorp...etc...
		lastStepTime: 	2199056
		lastStepMessage: 	nil
		lastCycleTime: 	2199056
		alarms: 	a Heap()
		lastAlarmTime: 	2199056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(858259456) a Spe...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #equals:
[ :item | item objName equals: nameObj ] in HideWindow>>listChange:with:
OrderedCollection>>select:
HideWindow>>listChange:with:
[ :ele | self listChange: ele with: true ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
Array(SequenceableCollection)>>do:
[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>equals:
26 November 2015 5:01:46.119616 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>doesNotUnderstand: #equals:
	Receiver: 'A'
	Arguments and temporary variables: 
		aMessage: 	equals: 'C'
		exception: 	MessageNotUnderstood: ByteString>>equals:
		resumeValue: 	nil
	Receiver's instance variables: 
'A'

[ :item | item objName equals: nameObj ] in HideWindow>>listChange:with:
	Receiver: a HideWindow
	Arguments and temporary variables: 
		nameObj: 	'C'
		value: 	true
		temp: 	nil
		item: 	a Node
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


OrderedCollection>>select:
	Receiver: an OrderedCollection(a Node a Node a Node a Node)
	Arguments and temporary variables: 
		selectBlock: 	[ :item | item objName equals: nameObj ]
		newCollection: 	an OrderedCollection()
		element: 	a Node
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Node a Node a Node a Node nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	4


HideWindow>>listChange:with:
	Receiver: a HideWindow
	Arguments and temporary variables: 
		nameObj: 	'C'
		value: 	true
		temp: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


[ :ele | self listChange: ele with: true ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


Array(SequenceableCollection)>>do:
	Receiver: #('C')
	Arguments and temporary variables: 
		aBlock: 	[ :ele | self listChange: ele with: true ]
		index: 	1
	Receiver's instance variables: 
#('C')

[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
		a: 	#('C')
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	a HideWindow
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ 
a := hideMenu selectedItems collect: [ :item...etc...
		labelHolder: 	a CollectionValueHolder[ 'Show' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(11534336))
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(11534336)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		event: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		evt: 	[(1444@397) mouseUp 2160014 nil]
		all: 	an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568...etc...
		m: 	a PluggableButtonMorph(11534336)
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			i...etc...
		index: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		evt: 	[(1444@397) mouseUp 2160014 nil]
		all: 	an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568...etc...
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


MouseButtonEvent>>sentTo:
	Receiver: [(1444@397) mouseUp 2160014 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(11534336)
	Receiver's instance variables: 
		timeStamp: 	2160014
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1444@397)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		focusHolder: 	a PluggableButtonMorph(11534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(143@364) corner: (159@380)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(143@364) corner: (159@380)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(17301504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(143@364) mouseOver nil nil]
		targetOffset: 	(75.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2248918 143 364 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(1444@397) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(858259456) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		focusHolder: 	a PluggableButtonMorph(11534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(143@364) corner: (159@380)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(143@364) corner: (159@380)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(17301504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(143@364) mouseOver nil nil]
		targetOffset: 	(75.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2248918 143 364 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		focusHolder: 	a PluggableButtonMorph(11534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(143@364) corner: (159@380)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(143@364) corner: (159@380)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(17301504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(143@364) mouseOver nil nil]
		targetOffset: 	(75.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2248918 143 364 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(143@364) corner: (159@380)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(143@364) corner: (159@380)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(17301504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(143@364) mouseOver nil nil]
		targetOffset: 	(75.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2248918 143 364 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		evt: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(143@364) corner: (159@380)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(143@364) corner: (159@380)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(17301504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(143@364) mouseOver nil nil]
		targetOffset: 	(75.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2248918 143 364 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(1444@397) mouseUp 2160014 nil]
		evtBuf: 	#(1 2160014 1444 397 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(143@364) corner: (159@380)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(143@364) corner: (159@380)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(17301504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(143@364) mouseOver nil nil]
		targetOffset: 	(75.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2248918 143 364 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(700973056))(a Spec...etc...
		lastStepTime: 	2248956
		lastStepMessage: 	nil
		lastCycleTime: 	2248950
		alarms: 	a Heap()
		lastAlarmTime: 	2248956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(700973056))(a Spec...etc...
		lastStepTime: 	2248956
		lastStepMessage: 	nil
		lastCycleTime: 	2248950
		alarms: 	a Heap()
		lastAlarmTime: 	2248956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(700973056))(a Spec...etc...
		lastStepTime: 	2248956
		lastStepMessage: 	nil
		lastCycleTime: 	2248950
		alarms: 	a Heap()
		lastAlarmTime: 	2248956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(700973056))(a Spec...etc...
		lastStepTime: 	2248956
		lastStepMessage: 	nil
		lastCycleTime: 	2248950
		alarms: 	a Heap()
		lastAlarmTime: 	2248956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(858259456) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #equals:
[ :item | item objName equals: nameObj ] in HideWindow>>listChange:with:
OrderedCollection>>select:
HideWindow>>listChange:with:
[ :ele | self listChange: ele with: true ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
Array(SequenceableCollection)>>do:
[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 November 2015 5:02:13.35162 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

HideWindow>>listChange:with:
	Receiver: a HideWindow
	Arguments and temporary variables: 
		nameObj: 	'C'
		value: 	true
		temp: 	an OrderedCollection(a Node)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


[ :ele | self listChange: ele with: true ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


Array(SequenceableCollection)>>do:
	Receiver: #('C')
	Arguments and temporary variables: 
		aBlock: 	[ :ele | self listChange: ele with: true ]
		index: 	1
	Receiver's instance variables: 
#('C')

[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
		a: 	#('C')
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	a HideWindow
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ 
a := hideMenu selectedItems collect: [ :item...etc...
		labelHolder: 	a CollectionValueHolder[ 'Show' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(11534336))
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(11534336)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		event: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		evt: 	[(1444@397) mouseUp 2160014 nil]
		all: 	an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568...etc...
		m: 	a PluggableButtonMorph(11534336)
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			i...etc...
		index: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		evt: 	[(1444@397) mouseUp 2160014 nil]
		all: 	an Array(a PluggableButtonMorph(11534336) a PluggableButtonMorph(851181568...etc...
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


MouseButtonEvent>>sentTo:
	Receiver: [(1444@397) mouseUp 2160014 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(11534336)
	Receiver's instance variables: 
		timeStamp: 	2160014
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1444@397)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(11534336)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(238288896)
		submorphs: 	an Array(an AlignmentMorph(894173184))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (78905344) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(976224256)


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		focusHolder: 	a PluggableButtonMorph(11534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(193@372) corner: (209@388)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(193@372) corner: (209@388)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(760217600)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(193@372) mouseOver nil nil]
		targetOffset: 	(124.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2276126 193 372 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(1444@397) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(858259456) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		focusHolder: 	a PluggableButtonMorph(11534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(193@372) corner: (209@388)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(193@372) corner: (209@388)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(760217600)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(193@372) mouseOver nil nil]
		targetOffset: 	(124.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2276126 193 372 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		focusHolder: 	a PluggableButtonMorph(11534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(193@372) corner: (209@388)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(193@372) corner: (209@388)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(760217600)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(193@372) mouseOver nil nil]
		targetOffset: 	(124.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2276126 193 372 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(193@372) corner: (209@388)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(193@372) corner: (209@388)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(760217600)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(193@372) mouseOver nil nil]
		targetOffset: 	(124.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2276126 193 372 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1444@397) mouseUp 2160014 nil]
		evt: 	[(1444@397) mouseUp 2160014 nil]
	Receiver's instance variables: 
		bounds: 	(193@372) corner: (209@388)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(193@372) corner: (209@388)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(760217600)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(193@372) mouseOver nil nil]
		targetOffset: 	(124.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2276126 193 372 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(1444@397) mouseUp 2160014 nil]
		evtBuf: 	#(1 2160014 1444 397 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(193@372) corner: (209@388)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(193@372) corner: (209@388)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(760217600)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(193@372) mouseOver nil nil]
		targetOffset: 	(124.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2276126 193 372 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(966787072))(a SearchMorp...etc...
		lastStepTime: 	2276208
		lastStepMessage: 	nil
		lastCycleTime: 	2276190
		alarms: 	a Heap()
		lastAlarmTime: 	2276208
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(966787072))(a SearchMorp...etc...
		lastStepTime: 	2276208
		lastStepMessage: 	nil
		lastCycleTime: 	2276190
		alarms: 	a Heap()
		lastAlarmTime: 	2276208
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(966787072))(a SearchMorp...etc...
		lastStepTime: 	2276208
		lastStepMessage: 	nil
		lastCycleTime: 	2276190
		alarms: 	a Heap()
		lastAlarmTime: 	2276208
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(966787072))(a SearchMorp...etc...
		lastStepTime: 	2276208
		lastStepMessage: 	nil
		lastCycleTime: 	2276190
		alarms: 	a Heap()
		lastAlarmTime: 	2276208
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(858259456) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
HideWindow>>listChange:with:
[ :ele | self listChange: ele with: true ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
Array(SequenceableCollection)>>do:
[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 November 2015 5:07:40.807619 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

HideWindow>>listChange:with:
	Receiver: a HideWindow
	Arguments and temporary variables: 
		nameObj: 	'D'
		value: 	true
		temp: 	an OrderedCollection(a Node a Node a Node a Node)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


[ :ele | self listChange: ele with: true ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


Array(SequenceableCollection)>>do:
	Receiver: #('D')
	Arguments and temporary variables: 
		aBlock: 	[ :ele | self listChange: ele with: true ]
		index: 	1
	Receiver's instance variables: 
#('D')

[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
		a: 	#('D')
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	a HideWindow
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ 
a := hideMenu selectedItems collect: [ :item...etc...
		labelHolder: 	a CollectionValueHolder[ 'Show' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(565444608))
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(565444608)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(565444608)
	Arguments and temporary variables: 
		event: 	[(1378@391) mouseUp 2603574 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(312213504)
		submorphs: 	an Array(an AlignmentMorph(374341632))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (632815616) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(456392704)


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(565444608)
	Arguments and temporary variables: 
		evt: 	[(1378@391) mouseUp 2603574 nil]
		all: 	an Array(a PluggableButtonMorph(565444608) a PluggableButtonMorph(62364057...etc...
		m: 	a PluggableButtonMorph(565444608)
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(312213504)
		submorphs: 	an Array(an AlignmentMorph(374341632))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (632815616) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(456392704)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(565444608) a PluggableButtonMorph(623640576))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			i...etc...
		index: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(565444608) a PluggableButtonMorph(623640576))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(565444608)
	Arguments and temporary variables: 
		evt: 	[(1378@391) mouseUp 2603574 nil]
		all: 	an Array(a PluggableButtonMorph(565444608) a PluggableButtonMorph(62364057...etc...
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(312213504)
		submorphs: 	an Array(an AlignmentMorph(374341632))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (632815616) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(456392704)


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(565444608)
	Arguments and temporary variables: 
		anEvent: 	[(1378@391) mouseUp 2603574 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(312213504)
		submorphs: 	an Array(an AlignmentMorph(374341632))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (632815616) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(456392704)


MouseButtonEvent>>sentTo:
	Receiver: [(1378@391) mouseUp 2603574 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(565444608)
	Receiver's instance variables: 
		timeStamp: 	2603574
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1378@391)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(565444608)
	Arguments and temporary variables: 
		anEvent: 	[(1378@391) mouseUp 2603574 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(312213504)
		submorphs: 	an Array(an AlignmentMorph(374341632))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (632815616) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(456392704)


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(565444608)
	Arguments and temporary variables: 
		anEvent: 	[(1378@391) mouseUp 2603574 nil]
	Receiver's instance variables: 
		bounds: 	(1349.0@383.0) corner: (1540.0@412.0)
		owner: 	a PanelMorph(312213504)
		submorphs: 	an Array(an AlignmentMorph(374341632))
		fullBounds: 	(1349@383) corner: (1540@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (632815616) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Show'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(456392704)


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1378@391) mouseUp 2603574 nil]
		focusHolder: 	a PluggableButtonMorph(565444608)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1378@391) corner: (1394@407)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1378@391) corner: (1394@407)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(565444608)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1378@391) mouseOver nil nil]
		targetOffset: 	(29.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2603574 1378 391 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(1378@391) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(664535040) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(1378@391) mouseUp 2603574 nil]
		focusHolder: 	a PluggableButtonMorph(565444608)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(1378@391) corner: (1394@407)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1378@391) corner: (1394@407)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(565444608)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1378@391) mouseOver nil nil]
		targetOffset: 	(29.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2603574 1378 391 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1378@391) mouseUp 2603574 nil]
		focusHolder: 	a PluggableButtonMorph(565444608)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1378@391) corner: (1394@407)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1378@391) corner: (1394@407)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(565444608)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1378@391) mouseOver nil nil]
		targetOffset: 	(29.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2603574 1378 391 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1378@391) mouseUp 2603574 nil]
	Receiver's instance variables: 
		bounds: 	(1378@391) corner: (1394@407)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1378@391) corner: (1394@407)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(565444608)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1378@391) mouseOver nil nil]
		targetOffset: 	(29.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2603574 1378 391 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1378@391) mouseUp 2603574 nil]
		evt: 	[(1378@391) mouseUp 2603574 nil]
	Receiver's instance variables: 
		bounds: 	(1378@391) corner: (1394@407)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1378@391) corner: (1394@407)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(565444608)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1378@391) mouseOver nil nil]
		targetOffset: 	(29.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2603574 1378 391 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(1378@391) mouseUp 2603574 nil]
		evtBuf: 	#(1 2603574 1378 391 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1378@391) corner: (1394@407)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1378@391) corner: (1394@407)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(565444608)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1378@391) mouseOver nil nil]
		targetOffset: 	(29.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2603574 1378 391 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 358350848))(3...etc...
		lastStepTime: 	2603660
		lastStepMessage: 	nil
		lastCycleTime: 	2603660
		alarms: 	a Heap()
		lastAlarmTime: 	2603660
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 358350848))(3...etc...
		lastStepTime: 	2603660
		lastStepMessage: 	nil
		lastCycleTime: 	2603660
		alarms: 	a Heap()
		lastAlarmTime: 	2603660
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 358350848))(3...etc...
		lastStepTime: 	2603660
		lastStepMessage: 	nil
		lastCycleTime: 	2603660
		alarms: 	a Heap()
		lastAlarmTime: 	2603660
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 358350848))(3...etc...
		lastStepTime: 	2603660
		lastStepMessage: 	nil
		lastCycleTime: 	2603660
		alarms: 	a Heap()
		lastAlarmTime: 	2603660
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(664535040) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
HideWindow>>listChange:with:
[ :ele | self listChange: ele with: true ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
Array(SequenceableCollection)>>do:
[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: true ] ] in HideWindow>>initializePresenter
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 November 2015 5:09:03.341615 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

HideWindow>>listChange:with:
	Receiver: a HideWindow
	Arguments and temporary variables: 
		nameObj: 	'D'
		value: 	false
		temp: 	an OrderedCollection(a Node a Node a Node a Node)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


[ :ele | self listChange: ele with: false ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: false ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


Array(SequenceableCollection)>>do:
	Receiver: #('D')
	Arguments and temporary variables: 
		aBlock: 	[ :ele | self listChange: ele with: false ]
		index: 	1
	Receiver's instance variables: 
#('D')

[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: false ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
		a: 	#('D')
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	a HideWindow
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ 
a := hideMenu selectedItems collect: [ :item...etc...
		labelHolder: 	a CollectionValueHolder[ 'Hide' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(599261184))
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(599261184)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(599261184)
	Arguments and temporary variables: 
		event: 	[(1244@397) mouseUp 2686102 nil]
	Receiver's instance variables: 
		bounds: 	(1150.0@383.0) corner: (1345.0@412.0)
		owner: 	a PanelMorph(1060110336)
		submorphs: 	an Array(an AlignmentMorph(408158208))
		fullBounds: 	(1150@383) corner: (1345@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(490209280)


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(599261184)
	Arguments and temporary variables: 
		evt: 	[(1244@397) mouseUp 2686102 nil]
		all: 	an Array(a PluggableButtonMorph(973602816) a PluggableButtonMorph(59926118...etc...
		m: 	a PluggableButtonMorph(599261184)
	Receiver's instance variables: 
		bounds: 	(1150.0@383.0) corner: (1345.0@412.0)
		owner: 	a PanelMorph(1060110336)
		submorphs: 	an Array(an AlignmentMorph(408158208))
		fullBounds: 	(1150@383) corner: (1345@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(490209280)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(973602816) a PluggableButtonMorph(599261184))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			i...etc...
		index: 	2
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(973602816) a PluggableButtonMorph(599261184))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(599261184)
	Arguments and temporary variables: 
		evt: 	[(1244@397) mouseUp 2686102 nil]
		all: 	an Array(a PluggableButtonMorph(973602816) a PluggableButtonMorph(59926118...etc...
	Receiver's instance variables: 
		bounds: 	(1150.0@383.0) corner: (1345.0@412.0)
		owner: 	a PanelMorph(1060110336)
		submorphs: 	an Array(an AlignmentMorph(408158208))
		fullBounds: 	(1150@383) corner: (1345@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(490209280)


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(599261184)
	Arguments and temporary variables: 
		anEvent: 	[(1244@397) mouseUp 2686102 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1150.0@383.0) corner: (1345.0@412.0)
		owner: 	a PanelMorph(1060110336)
		submorphs: 	an Array(an AlignmentMorph(408158208))
		fullBounds: 	(1150@383) corner: (1345@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(490209280)


MouseButtonEvent>>sentTo:
	Receiver: [(1244@397) mouseUp 2686102 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(599261184)
	Receiver's instance variables: 
		timeStamp: 	2686102
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1244@397)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(599261184)
	Arguments and temporary variables: 
		anEvent: 	[(1244@397) mouseUp 2686102 nil]
	Receiver's instance variables: 
		bounds: 	(1150.0@383.0) corner: (1345.0@412.0)
		owner: 	a PanelMorph(1060110336)
		submorphs: 	an Array(an AlignmentMorph(408158208))
		fullBounds: 	(1150@383) corner: (1345@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(490209280)


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(599261184)
	Arguments and temporary variables: 
		anEvent: 	[(1244@397) mouseUp 2686102 nil]
	Receiver's instance variables: 
		bounds: 	(1150.0@383.0) corner: (1345.0@412.0)
		owner: 	a PanelMorph(1060110336)
		submorphs: 	an Array(an AlignmentMorph(408158208))
		fullBounds: 	(1150@383) corner: (1345@412)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(490209280)


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1244@397) mouseUp 2686102 nil]
		focusHolder: 	a PluggableButtonMorph(599261184)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1244@397) corner: (1260@413)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1244@397) corner: (1260@413)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(599261184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1244@397) mouseOver nil nil]
		targetOffset: 	(94.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2686102 1244 397 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(1244@397) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(471597056) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(1244@397) mouseUp 2686102 nil]
		focusHolder: 	a PluggableButtonMorph(599261184)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(1244@397) corner: (1260@413)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1244@397) corner: (1260@413)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(599261184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1244@397) mouseOver nil nil]
		targetOffset: 	(94.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2686102 1244 397 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1244@397) mouseUp 2686102 nil]
		focusHolder: 	a PluggableButtonMorph(599261184)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1244@397) corner: (1260@413)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1244@397) corner: (1260@413)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(599261184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1244@397) mouseOver nil nil]
		targetOffset: 	(94.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2686102 1244 397 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1244@397) mouseUp 2686102 nil]
	Receiver's instance variables: 
		bounds: 	(1244@397) corner: (1260@413)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1244@397) corner: (1260@413)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(599261184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1244@397) mouseOver nil nil]
		targetOffset: 	(94.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2686102 1244 397 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1244@397) mouseUp 2686102 nil]
		evt: 	[(1244@397) mouseUp 2686102 nil]
	Receiver's instance variables: 
		bounds: 	(1244@397) corner: (1260@413)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1244@397) corner: (1260@413)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(599261184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1244@397) mouseOver nil nil]
		targetOffset: 	(94.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2686102 1244 397 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(1244@397) mouseUp 2686102 nil]
		evtBuf: 	#(1 2686102 1244 397 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1244@397) corner: (1260@413)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1244@397) corner: (1260@413)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(599261184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1244@397) mouseOver nil nil]
		targetOffset: 	(94.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2686102 1244 397 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892338176))(a DropList...etc...
		lastStepTime: 	2686184
		lastStepMessage: 	nil
		lastCycleTime: 	2686184
		alarms: 	a Heap()
		lastAlarmTime: 	2686184
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892338176))(a DropList...etc...
		lastStepTime: 	2686184
		lastStepMessage: 	nil
		lastCycleTime: 	2686184
		alarms: 	a Heap()
		lastAlarmTime: 	2686184
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892338176))(a DropList...etc...
		lastStepTime: 	2686184
		lastStepMessage: 	nil
		lastCycleTime: 	2686184
		alarms: 	a Heap()
		lastAlarmTime: 	2686184
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892338176))(a DropList...etc...
		lastStepTime: 	2686184
		lastStepMessage: 	nil
		lastCycleTime: 	2686184
		alarms: 	a Heap()
		lastAlarmTime: 	2686184
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(471597056) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
HideWindow>>listChange:with:
[ :ele | self listChange: ele with: false ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: false ] ] in HideWindow>>initializePresenter
Array(SequenceableCollection)>>do:
[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: false ] ] in HideWindow>>initializePresenter
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 November 2015 5:10:43.325616 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

HideWindow>>listChange:with:
	Receiver: a HideWindow
	Arguments and temporary variables: 
		nameObj: 	'C'
		value: 	false
		temp: 	an OrderedCollection(a Node a Node a Node a Node)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


[ :ele | self listChange: ele with: false ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: false ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


Array(SequenceableCollection)>>do:
	Receiver: #('C')
	Arguments and temporary variables: 
		aBlock: 	[ :ele | self listChange: ele with: false ]
		index: 	1
	Receiver's instance variables: 
#('C')

[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: false ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
		a: 	#('C')
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	a HideWindow
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ 
a := hideMenu selectedItems collect: [ :item...etc...
		labelHolder: 	a CollectionValueHolder[ 'Hide' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(186646528))
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(186646528)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(186646528)
	Arguments and temporary variables: 
		event: 	[(733@345) mouseUp 2786086 nil]
	Receiver's instance variables: 
		bounds: 	(613.0@319.0) corner: (808.0@348.0)
		owner: 	a PanelMorph(647495680)
		submorphs: 	an Array(an AlignmentMorph(1063256064))
		fullBounds: 	(613@319) corner: (808@348)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (254017536) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(71565312)


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(186646528)
	Arguments and temporary variables: 
		evt: 	[(733@345) mouseUp 2786086 nil]
		all: 	an Array(a PluggableButtonMorph(573833216) a PluggableButtonMorph(18664652...etc...
		m: 	a PluggableButtonMorph(186646528)
	Receiver's instance variables: 
		bounds: 	(613.0@319.0) corner: (808.0@348.0)
		owner: 	a PanelMorph(647495680)
		submorphs: 	an Array(an AlignmentMorph(1063256064))
		fullBounds: 	(613@319) corner: (808@348)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (254017536) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(71565312)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(573833216) a PluggableButtonMorph(186646528))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			i...etc...
		index: 	2
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(573833216) a PluggableButtonMorph(186646528))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(186646528)
	Arguments and temporary variables: 
		evt: 	[(733@345) mouseUp 2786086 nil]
		all: 	an Array(a PluggableButtonMorph(573833216) a PluggableButtonMorph(18664652...etc...
	Receiver's instance variables: 
		bounds: 	(613.0@319.0) corner: (808.0@348.0)
		owner: 	a PanelMorph(647495680)
		submorphs: 	an Array(an AlignmentMorph(1063256064))
		fullBounds: 	(613@319) corner: (808@348)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (254017536) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(71565312)


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(186646528)
	Arguments and temporary variables: 
		anEvent: 	[(733@345) mouseUp 2786086 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(613.0@319.0) corner: (808.0@348.0)
		owner: 	a PanelMorph(647495680)
		submorphs: 	an Array(an AlignmentMorph(1063256064))
		fullBounds: 	(613@319) corner: (808@348)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (254017536) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(71565312)


MouseButtonEvent>>sentTo:
	Receiver: [(733@345) mouseUp 2786086 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(186646528)
	Receiver's instance variables: 
		timeStamp: 	2786086
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(733@345)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(186646528)
	Arguments and temporary variables: 
		anEvent: 	[(733@345) mouseUp 2786086 nil]
	Receiver's instance variables: 
		bounds: 	(613.0@319.0) corner: (808.0@348.0)
		owner: 	a PanelMorph(647495680)
		submorphs: 	an Array(an AlignmentMorph(1063256064))
		fullBounds: 	(613@319) corner: (808@348)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (254017536) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(71565312)


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(186646528)
	Arguments and temporary variables: 
		anEvent: 	[(733@345) mouseUp 2786086 nil]
	Receiver's instance variables: 
		bounds: 	(613.0@319.0) corner: (808.0@348.0)
		owner: 	a PanelMorph(647495680)
		submorphs: 	an Array(an AlignmentMorph(1063256064))
		fullBounds: 	(613@319) corner: (808@348)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (254017536) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(71565312)


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(733@345) mouseUp 2786086 nil]
		focusHolder: 	a PluggableButtonMorph(186646528)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(733@345) corner: (749@361)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(733@345) corner: (749@361)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(186646528)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(733@345) mouseOver nil nil]
		targetOffset: 	(120.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2786086 733 345 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(733@345) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(410255360) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(733@345) mouseUp 2786086 nil]
		focusHolder: 	a PluggableButtonMorph(186646528)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(733@345) corner: (749@361)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(733@345) corner: (749@361)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(186646528)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(733@345) mouseOver nil nil]
		targetOffset: 	(120.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2786086 733 345 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(733@345) mouseUp 2786086 nil]
		focusHolder: 	a PluggableButtonMorph(186646528)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(733@345) corner: (749@361)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(733@345) corner: (749@361)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(186646528)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(733@345) mouseOver nil nil]
		targetOffset: 	(120.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2786086 733 345 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(733@345) mouseUp 2786086 nil]
	Receiver's instance variables: 
		bounds: 	(733@345) corner: (749@361)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(733@345) corner: (749@361)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(186646528)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(733@345) mouseOver nil nil]
		targetOffset: 	(120.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2786086 733 345 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(733@345) mouseUp 2786086 nil]
		evt: 	[(733@345) mouseUp 2786086 nil]
	Receiver's instance variables: 
		bounds: 	(733@345) corner: (749@361)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(733@345) corner: (749@361)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(186646528)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(733@345) mouseOver nil nil]
		targetOffset: 	(120.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2786086 733 345 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(733@345) mouseUp 2786086 nil]
		evtBuf: 	#(1 2786086 733 345 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(733@345) corner: (749@361)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(733@345) corner: (749@361)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(186646528)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(733@345) mouseOver nil nil]
		targetOffset: 	(120.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2786086 733 345 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892338176))(a DropList...etc...
		lastStepTime: 	2786160
		lastStepMessage: 	nil
		lastCycleTime: 	2786160
		alarms: 	a Heap()
		lastAlarmTime: 	2786160
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892338176))(a DropList...etc...
		lastStepTime: 	2786160
		lastStepMessage: 	nil
		lastCycleTime: 	2786160
		alarms: 	a Heap()
		lastAlarmTime: 	2786160
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892338176))(a DropList...etc...
		lastStepTime: 	2786160
		lastStepMessage: 	nil
		lastCycleTime: 	2786160
		alarms: 	a Heap()
		lastAlarmTime: 	2786160
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892338176))(a DropList...etc...
		lastStepTime: 	2786160
		lastStepMessage: 	nil
		lastCycleTime: 	2786160
		alarms: 	a Heap()
		lastAlarmTime: 	2786160
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(410255360) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
HideWindow>>listChange:with:
[ :ele | self listChange: ele with: false ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: false ] ] in HideWindow>>initializePresenter
Array(SequenceableCollection)>>do:
[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: false ] ] in HideWindow>>initializePresenter
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: BlockClosure>>self
26 November 2015 5:29:45.025616 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

BlockClosure(Object)>>doesNotUnderstand: #self
	Receiver: [ :el | self halt ]
	Arguments and temporary variables: 
		aMessage: 	self
		exception: 	MessageNotUnderstood: BlockClosure>>self
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RQTGMainWindow>>initializePresenter
		startpc: 	35
		numArgs: 	1


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow(ComposableModel)>>initialize
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initialize
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow class(Behavior)>>new
	Receiver: RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	ComposableModel
		methodDict: 	a MethodDictionary(#data->RQTGMainWindow>>#data #data:->RQTGMainWin...etc...
		format: 	176
		layout: 	a FixedLayout
		instanceVariables: 	#(#refreshButton #showData #showName #hideNodes #hideTopics ...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RQTGMainWindow
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RQT-Pharo'
		traitComposition: 	{}
		localSelectors: 	nil


TestingGraph>>testMainWindow1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		topic1: 	a Topic
		topic2: 	a Topic
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	nil
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'"KeymapBrowser new openWithSpec."
TestingGraph new testMainWin...etc...
		itsSelection: 	a Text for '"KeymapBrowser new openWithSpec."
TestingGraph new te...etc...
		itsSelectionString: 	'"KeymapBrowser new openWithSpec."
TestingGraph new testMai...etc...
	Receiver's instance variables: 
		ast: 	<<error during printing>>

RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(944504832)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(944504832)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(329252864)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(944504832)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@601)
		owner: 	a TransformWithLayoutMorph(451149824)
		submorphs: 	an Array(a RubPrimarySelectionMorph(434896896) a RubCursor(317194240...etc...
		fullBounds: 	(0@0) corner: (272@601)
		color: 	Color transparent
		extension: 	a MorphExtension (348913664) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(412876800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(317194240)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(22020096))
		getMenuPolicy: 	a RubEditingArea(944504832)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(329252864)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(121110528))(a SearchMorp...etc...
		lastStepTime: 	3927856
		lastStepMessage: 	nil
		lastCycleTime: 	3927856
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(317194240)))
		lastAlarmTime: 	3927856
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1016594432) a N...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(121110528))(a SearchMorp...etc...
		lastStepTime: 	3927856
		lastStepMessage: 	nil
		lastCycleTime: 	3927856
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(317194240)))
		lastAlarmTime: 	3927856
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(121110528))(a SearchMorp...etc...
		lastStepTime: 	3927856
		lastStepMessage: 	nil
		lastCycleTime: 	3927856
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(317194240)))
		lastAlarmTime: 	3927856
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1016594432) a N...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #self
RQTGMainWindow>>initializePresenter
RQTGMainWindow(ComposableModel)>>initialize
RQTGMainWindow>>initialize
RQTGMainWindow class(Behavior)>>new
TestingGraph>>testMainWindow1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: OrderedCollection>>whenChangedDo:
26 November 2015 5:30:00.071621 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

OrderedCollection(Object)>>doesNotUnderstand: #whenChangedDo:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		aMessage: 	whenChangedDo: [ :el | self halt ]
		exception: 	MessageNotUnderstood: OrderedCollection>>whenChangedDo:
		resumeValue: 	nil
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow(ComposableModel)>>initialize
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initialize
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow class(Behavior)>>new
	Receiver: RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	ComposableModel
		methodDict: 	a MethodDictionary(#data->RQTGMainWindow>>#data #data:->RQTGMainWin...etc...
		format: 	176
		layout: 	a FixedLayout
		instanceVariables: 	#(#refreshButton #showData #showName #hideNodes #hideTopics ...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RQTGMainWindow
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RQT-Pharo'
		traitComposition: 	{}
		localSelectors: 	nil


TestingGraph>>testMainWindow1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		topic1: 	a Topic
		topic2: 	a Topic
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	nil
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'"KeymapBrowser new openWithSpec."
TestingGraph new testMainWin...etc...
		itsSelection: 	a Text for '"KeymapBrowser new openWithSpec."
TestingGraph new te...etc...
		itsSelectionString: 	'"KeymapBrowser new openWithSpec."
TestingGraph new testMai...etc...
	Receiver's instance variables: 
		ast: 	<<error during printing>>

RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(944504832)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(944504832)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(329252864)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(944504832)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@601)
		owner: 	a TransformWithLayoutMorph(451149824)
		submorphs: 	an Array(a RubPrimarySelectionMorph(434896896) a RubCursor(317194240...etc...
		fullBounds: 	(0@0) corner: (272@601)
		color: 	Color transparent
		extension: 	a MorphExtension (348913664) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(412876800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(317194240)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(22020096))
		getMenuPolicy: 	a RubEditingArea(944504832)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(329252864)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(202637312))(a DropList...etc...
		lastStepTime: 	3942846
		lastStepMessage: 	nil
		lastCycleTime: 	3942866
		alarms: 	a Heap()
		lastAlarmTime: 	3942846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(314310656) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(202637312))(a DropList...etc...
		lastStepTime: 	3942846
		lastStepMessage: 	nil
		lastCycleTime: 	3942866
		alarms: 	a Heap()
		lastAlarmTime: 	3942846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(202637312))(a DropList...etc...
		lastStepTime: 	3942846
		lastStepMessage: 	nil
		lastCycleTime: 	3942866
		alarms: 	a Heap()
		lastAlarmTime: 	3942846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(314310656) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
OrderedCollection(Object)>>doesNotUnderstand: #whenChangedDo:
RQTGMainWindow>>initializePresenter
RQTGMainWindow(ComposableModel)>>initialize
RQTGMainWindow>>initialize
RQTGMainWindow class(Behavior)>>new
TestingGraph>>testMainWindow1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
26 November 2015 5:31:01.737613 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow


RQTGMainWindow>>initializePresenter
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection()
		hide: 	a HideWindow



--- The full stack ---
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
RQTGMainWindow>>initializePresenter
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 November 2015 5:31:36.905615 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RQTGMainWindow>>listChange:with:
	Receiver: a RQTGMainWindow
	Arguments and temporary variables: 
		nameObj: 	'C'
		value: 	false
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo' ]
		refreshButton: 	a ButtonModel
		showData: 	a CheckBoxModel
		showName: 	a CheckBoxModel
		hideNodes: 	a ButtonModel
		hideTopics: 	a ButtonModel
		graph: 	a RoassalModel
		data: 	an OrderedCollection(a Node a Node a Node a Node)
		hide: 	a HideWindow


HideWindow>>listChange:with:
	Receiver: a HideWindow
	Arguments and temporary variables: 
		nameObj: 	'C'
		value: 	false
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel
		mainWindow: 	a RQTGMainWindow


[ :ele | self listChange: ele with: false ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: false ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel
		mainWindow: 	a RQTGMainWindow


Array(SequenceableCollection)>>do:
	Receiver: #('C')
	Arguments and temporary variables: 
		aBlock: 	[ :ele | self listChange: ele with: false ]
		index: 	1
	Receiver's instance variables: 
#('C')

[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: false ] ] in HideWindow>>initializePresenter
	Receiver: a HideWindow
	Arguments and temporary variables: 
		a: 	#('C')
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'RQT-GraPharo/NodesAndTopics' ]
		list: 	an OrderedCollection(a Node a Node a Node a Node)
		labelSearch: 	a LabelModel
		search: 	a TextInputFieldModel
		hideMenu: 	a MultiColumnListModel
		clearSearchButton: 	a ButtonModel
		hideButton: 	a ButtonModel
		showButton: 	a ButtonModel
		mainWindow: 	a RQTGMainWindow


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	a HideWindow
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ 
a := hideMenu selectedItems collect: [ :item...etc...
		labelHolder: 	a CollectionValueHolder[ 'Hide' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(59768832))
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(59768832)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(59768832)
	Arguments and temporary variables: 
		event: 	[(1313@532) mouseUp 4039676 nil]
	Receiver's instance variables: 
		bounds: 	(1211.0@512.0) corner: (1406.0@541.0)
		owner: 	a PanelMorph(822083584)
		submorphs: 	an Array(an AlignmentMorph(882114560))
		fullBounds: 	(1211@512) corner: (1406@541)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (127139840) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(964165632)


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(59768832)
	Arguments and temporary variables: 
		evt: 	[(1313@532) mouseUp 4039676 nil]
		all: 	an Array(a PluggableButtonMorph(19660800) a PluggableButtonMorph(59768832)...etc...
		m: 	a PluggableButtonMorph(59768832)
	Receiver's instance variables: 
		bounds: 	(1211.0@512.0) corner: (1406.0@541.0)
		owner: 	a PanelMorph(822083584)
		submorphs: 	an Array(an AlignmentMorph(882114560))
		fullBounds: 	(1211@512) corner: (1406@541)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (127139840) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(964165632)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(19660800) a PluggableButtonMorph(59768832))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			i...etc...
		index: 	2
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(19660800) a PluggableButtonMorph(59768832))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(59768832)
	Arguments and temporary variables: 
		evt: 	[(1313@532) mouseUp 4039676 nil]
		all: 	an Array(a PluggableButtonMorph(19660800) a PluggableButtonMorph(59768832)...etc...
	Receiver's instance variables: 
		bounds: 	(1211.0@512.0) corner: (1406.0@541.0)
		owner: 	a PanelMorph(822083584)
		submorphs: 	an Array(an AlignmentMorph(882114560))
		fullBounds: 	(1211@512) corner: (1406@541)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (127139840) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(964165632)


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(59768832)
	Arguments and temporary variables: 
		anEvent: 	[(1313@532) mouseUp 4039676 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1211.0@512.0) corner: (1406.0@541.0)
		owner: 	a PanelMorph(822083584)
		submorphs: 	an Array(an AlignmentMorph(882114560))
		fullBounds: 	(1211@512) corner: (1406@541)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (127139840) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(964165632)


MouseButtonEvent>>sentTo:
	Receiver: [(1313@532) mouseUp 4039676 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(59768832)
	Receiver's instance variables: 
		timeStamp: 	4039676
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1313@532)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(59768832)
	Arguments and temporary variables: 
		anEvent: 	[(1313@532) mouseUp 4039676 nil]
	Receiver's instance variables: 
		bounds: 	(1211.0@512.0) corner: (1406.0@541.0)
		owner: 	a PanelMorph(822083584)
		submorphs: 	an Array(an AlignmentMorph(882114560))
		fullBounds: 	(1211@512) corner: (1406@541)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (127139840) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(964165632)


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(59768832)
	Arguments and temporary variables: 
		anEvent: 	[(1313@532) mouseUp 4039676 nil]
	Receiver's instance variables: 
		bounds: 	(1211.0@512.0) corner: (1406.0@541.0)
		owner: 	a PanelMorph(822083584)
		submorphs: 	an Array(an AlignmentMorph(882114560))
		fullBounds: 	(1211@512) corner: (1406@541)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (127139840) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Hide'
		getStateSelector: 	#state
		actionSelector: 	#action
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		lastColor: 	nil
		labelMorph: 	a TextMorph(964165632)


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1313@532) mouseUp 4039676 nil]
		focusHolder: 	a PluggableButtonMorph(59768832)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1313@532) corner: (1329@548)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1313@532) corner: (1329@548)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(59768832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1313@532) mouseOver nil nil]
		targetOffset: 	(102.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4039676 1313 532 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(1313@532) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(11010048) a SpecWind...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(1313@532) mouseUp 4039676 nil]
		focusHolder: 	a PluggableButtonMorph(59768832)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(1313@532) corner: (1329@548)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1313@532) corner: (1329@548)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(59768832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1313@532) mouseOver nil nil]
		targetOffset: 	(102.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4039676 1313 532 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1313@532) mouseUp 4039676 nil]
		focusHolder: 	a PluggableButtonMorph(59768832)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1313@532) corner: (1329@548)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1313@532) corner: (1329@548)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(59768832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1313@532) mouseOver nil nil]
		targetOffset: 	(102.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4039676 1313 532 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1313@532) mouseUp 4039676 nil]
	Receiver's instance variables: 
		bounds: 	(1313@532) corner: (1329@548)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1313@532) corner: (1329@548)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(59768832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1313@532) mouseOver nil nil]
		targetOffset: 	(102.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4039676 1313 532 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(1313@532) mouseUp 4039676 nil]
		evt: 	[(1313@532) mouseUp 4039676 nil]
	Receiver's instance variables: 
		bounds: 	(1313@532) corner: (1329@548)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1313@532) corner: (1329@548)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(59768832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1313@532) mouseOver nil nil]
		targetOffset: 	(102.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4039676 1313 532 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(1313@532) mouseUp 4039676 nil]
		evtBuf: 	#(1 4039676 1313 532 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1313@532) corner: (1329@548)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(1313@532) corner: (1329@548)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (kmDispatcher -> a KMDispatche...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(59768832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1313@532) mouseOver nil nil]
		targetOffset: 	(102.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4039676 1313 532 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(121110528))(a SearchMorp...etc...
		lastStepTime: 	4039740
		lastStepMessage: 	nil
		lastCycleTime: 	4039740
		alarms: 	a Heap()
		lastAlarmTime: 	4039740
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(121110528))(a SearchMorp...etc...
		lastStepTime: 	4039740
		lastStepMessage: 	nil
		lastCycleTime: 	4039740
		alarms: 	a Heap()
		lastAlarmTime: 	4039740
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(121110528))(a SearchMorp...etc...
		lastStepTime: 	4039740
		lastStepMessage: 	nil
		lastCycleTime: 	4039740
		alarms: 	a Heap()
		lastAlarmTime: 	4039740
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(121110528))(a SearchMorp...etc...
		lastStepTime: 	4039740
		lastStepMessage: 	nil
		lastCycleTime: 	4039740
		alarms: 	a Heap()
		lastAlarmTime: 	4039740
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(11010048) a SpecWind...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RQTGMainWindow>>listChange:with:
HideWindow>>listChange:with:
[ :ele | self listChange: ele with: false ] in [ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: false ] ] in HideWindow>>initializePresenter
Array(SequenceableCollection)>>do:
[ 
a := hideMenu selectedItems collect: [ :item | item first ].
a do: [ :ele | self listChange: ele with: false ] ] in HideWindow>>initializePresenter
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

