THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MessageTally>>withDeepCollect:
20 October 2015 5:12:29.969833 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

MessageTally(Object)>>doesNotUnderstand: #withDeepCollect:
	Receiver: UndefinedObject(ProtoObject) >> ~~
	Arguments and temporary variables: 
		aMessage: 	withDeepCollect: #children
		exception: 	MessageNotUnderstood: MessageTally>>withDeepCollect:
		resumeValue: 	nil
	Receiver's instance variables: 
		class: 	UndefinedObject
		method: 	ProtoObject>>#'~~'
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	66
		receivers: 	#()
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


MessageTally>>gtInspectorMessageTreeIn:
	Receiver: UndefinedObject(ProtoObject) >> ~~
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=243531776 title=nil pane=a GLMPane(144...etc...
		methods: 	nil
		normalizer: 	nil
	Receiver's instance variables: 
		class: 	UndefinedObject
		method: 	ProtoObject>>#'~~'
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	66
		receivers: 	#()
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


[ :eachPragma | 
(eachPragma selector findTokens: $:) size = 1
	ifTrue: [ self perform: eachPragma selector with: composite ].
(eachPragma selector findTokens: $:) size = 2
	ifTrue: [ self perform: eachPragma selector with: composite with: aGTInspector ] ] in MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
	Receiver: UndefinedObject(ProtoObject) >> ~~
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=243531776 title=nil pane=a GLMPane(144...etc...
		aGTInspector: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLM...etc...
		pragmas: 	an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOr...etc...
		eachPragma: 	<gtInspectorPresentationOrder: 40>
	Receiver's instance variables: 
		class: 	UndefinedObject
		method: 	ProtoObject>>#'~~'
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	66
		receivers: 	#()
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


Array(SequenceableCollection)>>do:
	Receiver: an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOrder: 40> <gtInspecto...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :eachPragma | 
(eachPragma selector findTokens: $:) size = 1
	ifTrue:...etc...
		index: 	2
	Receiver's instance variables: 
an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOrder: 40> <gtInspecto...etc...

MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
	Receiver: UndefinedObject(ProtoObject) >> ~~
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=243531776 title=nil pane=a GLMPane(144...etc...
		aGTInspector: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLM...etc...
		pragmas: 	an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOr...etc...
	Receiver's instance variables: 
		class: 	UndefinedObject
		method: 	ProtoObject>>#'~~'
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	66
		receivers: 	#()
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


[ :d | each gtInspectorPresentationsIn: d inContext: pager ] in [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
	Receiver: a RTExampleBrowser
	Arguments and temporary variables: 
		pager: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(67...etc...
		a: 	a GLMCompositePresentation(id=806092800 title=a MessageTally (UndefinedObjec...etc...
		each: 	UndefinedObject(ProtoObject) >> ~~
		x: 	UndefinedObject(ProtoObject) >> ~~
		d: 	a GLMCompositePresentation(id=375390208 title=nil pane=a GLMPane(1024458752 ...etc...
	Receiver's instance variables: 
a RTExampleBrowser

GLMCompositePresentation(GLMPresentation)>>with:
	Receiver: a GLMCompositePresentation(id=375390208 title=nil pane=a GLMPane(1024458752 root))
	Arguments and temporary variables: 
		aBlock: 	[ :d | each gtInspectorPresentationsIn: d inContext: pager ]
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(1024458752 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentations: 	an OrderedCollection(a GTObjectVariablesBrowser(id=788004864 tit...etc...
		arrangement: 	nil


[ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
	Receiver: a RTExampleBrowser
	Arguments and temporary variables: 
		pager: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(67...etc...
		a: 	a GLMCompositePresentation(id=806092800 title=a MessageTally (UndefinedObjec...etc...
		each: 	UndefinedObject(ProtoObject) >> ~~
		x: 	UndefinedObject(ProtoObject) >> ~~
	Receiver's instance variables: 
a RTExampleBrowser

BlockClosure>>glamourValueWithArgs:
	Receiver: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inCon...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(UndefinedObject(ProtoObject) >> ~~)
	Receiver's instance variables: 
		outerContext: 	[ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: eac...etc...
		startpc: 	167
		numArgs: 	1


BlockClosure(Object)>>glamourValue:
	Receiver: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inCon...etc...
	Arguments and temporary variables: 
		anObject: 	UndefinedObject(ProtoObject) >> ~~
		args: 	an Array(UndefinedObject(ProtoObject) >> ~~)
	Receiver's instance variables: 
		outerContext: 	[ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: eac...etc...
		startpc: 	167
		numArgs: 	1


GLMDynamicPresentation(GLMPresentation)>>displayValue
	Receiver: a GLMDynamicPresentation(id=467664896 title=nil pane=a GLMPane(578289664 4))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(578289664 4)
		title: 	nil
		titleIcon: 	nil
		transformation: 	[ :x | (GLMCompositePresentation new with: [ :d | each gtInspec...etc...
		actions: 	nil
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMDynamicPresentation(id=934805504 title=nil pane=a GLMPane...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>dynamic
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentationTransformation: 	[ :aComposite :each | aComposite custom: each ]
		cachedPresentation: 	nil


GLMDynamicPresentation>>currentPresentation
	Receiver: a GLMDynamicPresentation(id=467664896 title=nil pane=a GLMPane(578289664 4))
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=251133952 title=nil pane=a GLMPane(131...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(578289664 4)
		title: 	nil
		titleIcon: 	nil
		transformation: 	[ :x | (GLMCompositePresentation new with: [ :d | each gtInspec...etc...
		actions: 	nil
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMDynamicPresentation(id=934805504 title=nil pane=a GLMPane...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>dynamic
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentationTransformation: 	[ :aComposite :each | aComposite custom: each ]
		cachedPresentation: 	nil


GLMMorphicDynamicRenderer>>render:
	Receiver: a GLMMorphicDynamicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=467664896 title=nil pane=a GLMPane(5...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(152829952)


GLMMorphicDynamicRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicDynamicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=467664896 title=nil pane=a GLMPane(5...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnPresentationUpdated:->GLMMorphicDynamicRen...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#container)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicDynamicRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderDynamicPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=467664896 title=nil pane=a GLMPane(5...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMDynamicPresentation>>renderGlamorouslyOn:
	River: a GLMDynamicPresentation(id=269484032 title=nil pane=a GLMPane(452460544 5))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(452460544 5)
		title: 	nil
		titleIcon: 	nil
		transformation: 	[ :x | (GLMCompositePresentation new with: [ :d | each gtInspec...etc...
		actions: 	nil
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMDynamicPresentation(id=766771200 title=nil pane=a GLMPane...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>dynamic
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentationTransformation: 	[ :aComposite :each | aComposite custom: each ]
		cachedPresentation: 	nil


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMDynamicPresentation(id=269484032 title=nil pane=a GLMPane(452...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMDynamicPresentation(id=269484032 title=nil pane=a GLMPane(452460...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=269484032 title=nil pane=a GLMPane(4...etc...
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=137101312 title=a MessageTally (Un...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicCompositeRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->GLMMorphicTabbedRenderer>...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#tabs)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicTabbedRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTabbedCompositePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aCompositePresentation: 	a GLMCompositePresentation(id=137101312 title=a Message...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMTabbedArrangement>>renderGlamorouslyOn:
	Receiver: a GLMTabbedArrangement
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		composite: 	a GLMCompositePresentation(id=137101312 title=a MessageTally (Undefi...etc...


GLMCompositePresentation>>renderGlamorouslyOn:
	Receiver: a GLMCompositePresentation(id=137101312 title=a MessageTally (UndefinedObject(ProtoObject)...etc...
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
er
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(578289664 4)
		title: 	[ GTInspector new printObjectAsAnItem: each ]
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	[ :aPresentation | each gtInspectorActions asOrderedCollec...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	a GLMCompositePresentation(id=806092800 title=a MessageTally (...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentations: 	an OrderedCollection(a GLMDynamicPresentation(id=467664896 title...etc...
		arrangement: 	a GLMTabbedArrangement


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMCompositePresentation(id=335282176 title=a MessageTally (Unde...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMCompositePresentation(id=335282176 title=a MessageTally (Undefin...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(1018691584)
		contentMorph: 	nil


GLMMorphicPaneRenderer>>renderContainerFor:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(578289664 4)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(1018691584)
		contentMorph: 	nil


GLMMorphicPaneRenderer>>render:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(578289664 4)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(1018691584)
		contentMorph: 	nil


GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPane(578289664 4)
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnMatchingPresentationChanged:->GLMMorphicPa...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#container #contentMorph)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicPaneRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderPane:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(578289664 4)
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMPane>>renderGlamorouslyOn:
	Receiver: a GLMPane(578289664 4)
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		browser: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(...etc...
		name: 	'4'
		presentations: 	a GLMCompositePresentation(id=335282176 title=a MessageTally (Un...etc...
		ports: 	an OrderedCollection(Port (pane='4' name=#activePresentation value=nil) ...etc...
		lastActivePresentation: 	nil
		allowedToNotePresentationsChanged: 	true
		cachedMatchingPresentations: 	an OrderedCollection(a GLMDynamicPresentation(id=4...etc...


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMPane(578289664 4)
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMMorphicPagerRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPagerRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMPane(578289664 4)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMFoundationBrick(970457088)


GLMMorphicPagerRenderer>>actOnPaneAdded:
	Receiver: a GLMMorphicPagerRenderer
	Arguments and temporary variables: 
		ann: 	a GLMPaneAdded
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMFoundationBrick(970457088)


MessageSend>>value:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		anObject: 	a GLMPaneAdded
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		arg: 	a GLMPaneAdded
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		arg1: 	a GLMPaneAdded
		arg2: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(675...etc...
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPaneAdded
	Receiver's instance variables: 
		announcer: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPan...etc...
		announcementClass: 	GLMPaneAdded
		subscriber: 	a GLMMorphicPagerRenderer
		action: 	MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0



--- The full stack ---
MessageTally(Object)>>doesNotUnderstand: #withDeepCollect:
MessageTally>>gtInspectorMessageTreeIn:
[ :eachPragma | 
(eachPragma selector findTokens: $:) size = 1
	ifTrue: [ self perform: eachPragma selector with: composite ].
(eachPragma selector findTokens: $:) size = 2
	ifTrue: [ self perform: eachPragma selector with: composite with: aGTInspector ] ] in MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
Array(SequenceableCollection)>>do:
MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
[ :d | each gtInspectorPresentationsIn: d inContext: pager ] in [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
GLMCompositePresentation(GLMPresentation)>>with:
[ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
BlockClosure>>glamourValueWithArgs:
BlockClosure(Object)>>glamourValue:
GLMDynamicPresentation(GLMPresentation)>>displayValue
GLMDynamicPresentation>>currentPresentation
GLMMorphicDynamicRenderer>>render:
GLMMorphicDynamicRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderDynamicPresentation:
GLMDynamicPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>render:
GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderPane:
GLMPane>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPagerRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPagerRenderer>>actOnPaneAdded:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MessageTally>>withDeepCollect:
20 October 2015 5:13:02.437839 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

MessageTally(Object)>>doesNotUnderstand: #withDeepCollect:
	Receiver: LazyMorphListMorph(LazyMorphListMorph) >> listChanged
	Arguments and temporary variables: 
		aMessage: 	withDeepCollect: #children
		exception: 	MessageNotUnderstood: MessageTally>>withDeepCollect:
		resumeValue: 	nil
	Receiver's instance variables: 
		class: 	LazyMorphListMorph
		method: 	LazyMorphListMorph>>#listChanged
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	1678
		receivers: 	an Array(LazyMorphListMorph(LazyListMorph) >> getListSize LazyMorphL...etc...
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


MessageTally>>gtInspectorMessageTreeIn:
	Receiver: LazyMorphListMorph(LazyMorphListMorph) >> listChanged
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=337379328 title=nil pane=a GLMPane(101...etc...
		methods: 	nil
		normalizer: 	nil
	Receiver's instance variables: 
		class: 	LazyMorphListMorph
		method: 	LazyMorphListMorph>>#listChanged
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	1678
		receivers: 	an Array(LazyMorphListMorph(LazyListMorph) >> getListSize LazyMorphL...etc...
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


[ :eachPragma | 
(eachPragma selector findTokens: $:) size = 1
	ifTrue: [ self perform: eachPragma selector with: composite ].
(eachPragma selector findTokens: $:) size = 2
	ifTrue: [ self perform: eachPragma selector with: composite with: aGTInspector ] ] in MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
	Receiver: LazyMorphListMorph(LazyMorphListMorph) >> listChanged
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=337379328 title=nil pane=a GLMPane(101...etc...
		aGTInspector: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLM...etc...
		pragmas: 	an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOr...etc...
		eachPragma: 	<gtInspectorPresentationOrder: 40>
	Receiver's instance variables: 
		class: 	LazyMorphListMorph
		method: 	LazyMorphListMorph>>#listChanged
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	1678
		receivers: 	an Array(LazyMorphListMorph(LazyListMorph) >> getListSize LazyMorphL...etc...
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


Array(SequenceableCollection)>>do:
	Receiver: an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOrder: 40> <gtInspecto...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :eachPragma | 
(eachPragma selector findTokens: $:) size = 1
	ifTrue:...etc...
		index: 	2
	Receiver's instance variables: 
an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOrder: 40> <gtInspecto...etc...

MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
	Receiver: LazyMorphListMorph(LazyMorphListMorph) >> listChanged
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=337379328 title=nil pane=a GLMPane(101...etc...
		aGTInspector: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLM...etc...
		pragmas: 	an Array(<gtInspectorPresentationOrder: 10> <gtInspectorPresentationOr...etc...
	Receiver's instance variables: 
		class: 	LazyMorphListMorph
		method: 	LazyMorphListMorph>>#listChanged
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	1678
		receivers: 	an Array(LazyMorphListMorph(LazyListMorph) >> getListSize LazyMorphL...etc...
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


[ :d | each gtInspectorPresentationsIn: d inContext: pager ] in [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
	Receiver: a RTExampleBrowser
	Arguments and temporary variables: 
		pager: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(67...etc...
		a: 	a GLMCompositePresentation(id=629407744 title=a MessageTally (LazyMorphListM...etc...
		each: 	LazyMorphListMorph(LazyMorphListMorph) >> listChanged
		x: 	LazyMorphListMorph(LazyMorphListMorph) >> listChanged
		d: 	a GLMCompositePresentation(id=337379328 title=nil pane=a GLMPane(1016594432 ...etc...
	Receiver's instance variables: 
a RTExampleBrowser

GLMCompositePresentation(GLMPresentation)>>with:
	Receiver: a GLMCompositePresentation(id=337379328 title=nil pane=a GLMPane(1016594432 root))
	Arguments and temporary variables: 
		aBlocationOr...etc...
	Receiver's instance variables: 
		class: 	LazyMorphListMorph
		method: 	LazyMorphListMorph>>#listChanged
		process: 	a Process in [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFal...etc...
		tally: 	1678
		receivers: 	an Array(LazyMorphListMorph(LazyListMorph) >> getListSize LazyMorphL...etc...
		senders: 	nil
		time: 	0
		gcStats: 	nil
		maxClassNameSize: 	50
		maxClassPlusSelectorSize: 	100
		maxTabs: 	120
		reportOtherProcesses: 	true


[ :d | each gtInspectorPresentationsIn: d inContext: pager ] in [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
	Receiver: a RTExampleBrowser
	Arguments and temporary variables: 
		pager: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(67...etc...
		a: 	a GLMCompositePresentation(id=689700864 title=a MessageTally (LazyMorphListM...etc...
		each: 	LazyMorphListMorph(LazyMorphListMorph) >> listChanged
		x: 	LazyMorphListMorph(LazyMorphListMorph) >> listChanged
		d: 	a GLMCompositePresentation(id=228851712 title=nil pane=a GLMPane(871890944 r...etc...
	Receiver's instance variables: 
a RTExampleBrowser

GLMCompositePresentation(GLMPresentation)>>with:
	Receiver: a GLMCompositePresentation(id=228851712 title=nil pane=a GLMPane(871890944 root))
	Arguments and temporary variables: 
		aBlock: 	[ :d | each gtInspectorPresentationsIn: d inContext: pager ]
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(871890944 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentations: 	an OrderedCollection(a GTObjectVariablesBrowser(id=647495680 tit...etc...
		arrangement: 	nil


[ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
	Receiver: a RTExampleBrowser
	Arguments and temporary variables: 
		pager: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(67...etc...
		a: 	a GLMCompositePresentation(id=689700864 title=a MessageTally (LazyMorphListM...etc...
		each: 	LazyMorphListMorph(LazyMorphListMorph) >> listChanged
		x: 	LazyMorphListMorph(LazyMorphListMorph) >> listChanged
	Receiver's instance variables: 
a RTExampleBrowser

BlockClosure>>glamourValueWithArgs:
	Receiver: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inCon...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(LazyMorphListMorph(LazyMorphListMorph) >> listChanged)
	Receiver's instance variables: 
		outerContext: 	[ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: eac...etc...
		startpc: 	167
		numArgs: 	1


BlockClosure(Object)>>glamourValue:
	Receiver: [ :x | (GLMCompositePresennsformation: 	[ :aComposite :each | aComposite custom: each ]
		cachedPresentation: 	nil


GLMDynamicPresentation>>currentPresentation
	Receiver: a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(486014976 4))
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=207093760 title=nil pane=a GLMPane(650...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(486014976 4)
		title: 	nil
		titleIcon: 	nil
		transformation: 	[ :x | (GLMCompositePresentation new with: [ :d | each gtInspec...etc...
		actions: 	nil
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMDynamicPresentation(id=782237696 title=nil pane=a GLMPane...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>dynamic
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentationTransformation: 	[ :aComposite :each | aComposite custom: each ]
		cachedPresentation: 	nil


GLMMorphicDynamicRenderer>>render:
	Receiver: a GLMMorphicDynamicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(4...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(102760448)


GLMMorphicDynamicRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicDynamicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(4...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnPresentationUpdated:->GLMMorphicDynamicRen...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#container)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicDynamicRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderDynamicPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(4...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMDynamicPresentation>>renderGlamorouslyOn:
	Receiver: a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(486014976 4))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(486014976 4)
		title: 	nil
		titleIcon: 	nil
		transformation: 	[ :x | (GLMCompositePresentation new with: [ :d | each gtInspec...etc...
		actions: 	nil
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMDynamicPresentation(id=782237696 title=nil pane=a GLMPane...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>dynamic
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentationTransformation: 	[ :aComposite :each | aComposite custom: each ]
		cachedPresentation: 	nil


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(486...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(486014...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMDynamicPresentation(id=339214336 title=nil pane=a GLMPane(4...etc...
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=212860928 title=a MessageTally (La...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicCompositeRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->GLMMorphicTabbedRenderer>...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#tabs)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicTabbedRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTabbedCompositePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aCompositePresentation: 	a GLMCompositePresentation(id=212860928 title=a Message...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMTabbedArrangement>>renderGlamorouslyOn:
	Receiver: a GLMTabbedArrangement
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		composite: 	a GLMCompositePresentation(id=212860928 title=a MessageTally (LazyMo...etc...


GLMCompositePresentation>>renderGlamorouslyOn:
	Receiver: a GLMCompositePresentation(id=212860928 title=a MessageTally (LazyMorphListMorph>>#listCha...etc...
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(486014976 4)
		title: 	[ GTInspector new printObjectAsAnItem: each ]
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	[ :aPresentation | each gtInspectorActions asOrderedCollec...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	a GLMCompositePresentation(id=629407744 title=a MessageTally (...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		presentations: 	an OrderedCollection(a GLMDynamicPresentation(id=339214336 title...etc...
		arrangement: 	a GLMTabbedArrangement


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMCompositePresentation(id=212860928 title=a MessageTally (Lazy...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMCompositePresentation(id=212860928 title=a MessageTally (LazyMor...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(938475520)
		contentMorph: 	nil


GLMMorphicPaneRenderer>>renderContainerFor:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(486014976 4)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(938475520)
		contentMorph: 	nil


GLMMorphicPaneRenderer>>render:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(486014976 4)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(938475520)
		contentMorph: 	nil


GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPane(486014976 4)
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnMatchingPresentationChanged:->GLMMorphicPa...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#container #contentMorph)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicPaneRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderPane:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(486014976 4)
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMPane>>renderGlamorouslyOn:
	Receiver: a GLMPane(486014976 4)
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		browser: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(...etc...
		name: 	'4'
		presentations: 	a GLMCompositePresentation(id=212860928 title=a MessageTally (La...etc...
		ports: 	an OrderedCollection(Port (pane='4' name=#activePresentation value=nil) ...etc...
		lastActivePresentation: 	nil
		allowedToNotePresentationsChanged: 	true
		cachedMatchingPresentations: 	an OrderedCollection(a GLMDynamicPresentation(id=3...etc...


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMPane(486014976 4)
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMMorphicPagerRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPagerRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMPane(486014976 4)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMFoundationBrick(970457088)


GLMMorphicPagerRenderer>>actOnPaneAdded:
	Receiver: a GLMMorphicPagerRenderer
	Arguments and temporary variables: 
		ann: 	a GLMPaneAdded
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMFoundationBrick(970457088)


MessageSend>>value:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		anObject: 	a GLMPaneAdded
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


MessageSend>>cull:
	Recinstance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		browser: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(...etc...
		name: 	'5'
		presentations: 	a GLMCompositePresentation(id=164626432 title=a MessageTally (La...etc...
		ports: 	an OrderedCollection(Port (pane='5' name=#activePresentation value=nil) ...etc...
		lastActivePresentation: 	nil
		allowedToNotePresentationsChanged: 	true
		cachedMatchingPresentations: 	an OrderedCollection(a GLMDynamicPresentation(id=2...etc...


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMPane(528220160 5)
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(850919424)


GLMMorphicPagerRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPagerRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMPane(528220160 5)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMFoundationBrick(970457088)


GLMMorphicPagerRenderer>>actOnPaneAdded:
	Receiver: a GLMMorphicPagerRenderer
	Arguments and temporary variables: 
		ann: 	a GLMPaneAdded
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMFoundationBrick(970457088)


MessageSend>>value:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		anObject: 	a GLMPaneAdded
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		arg: 	a GLMPaneAdded
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		arg1: 	a GLMPaneAdded
		arg2: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(675...etc...
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPaneAdded
	Receiver's instance variables: 
		announcer: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPan...etc...
		announcementClass: 	GLMPaneAdded
		subscriber: 	a GLMMorphicPagerRenderer
		action: 	MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0



--- The full stack ---
MessageTally(Object)>>doesNotUnderstand: #withDeepCollect:
MessageTally>>gtInspectorMessageTreeIn:
[ :eachPragma | 
(eachPragma selector findTokens: $:) size = 1
	ifTrue: [ self perform: eachPragma selector with: composite ].
(eachPragma selector findTokens: $:) size = 2
	ifTrue: [ self perform: eachPragma selector with: composite with: aGTInspector ] ] in MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
Array(SequenceableCollection)>>do:
MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
[ :d | each gtInspectorPresentationsIn: d inContext: pager ] in [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsInslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPagerRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPagerRenderer>>actOnPaneAdded:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

 	a GLMMorphicRenderer
		container: 	a GLMFoundationBrick(970457088)


MessageSend>>value:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		anObject: 	a GLMPaneAdded
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		arg: 	a GLMPaneAdded
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)
	Arguments and temporary variables: 
		arg1: 	a GLMPaneAdded
		arg2: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPane(675...etc...
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPagerRenderer
		selector: 	#actOnPaneAdded:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPaneAdded
	Receiver's instance variables: 
		announcer: 	a GLMPager(id=262406144 title=Roassal examples browser pane=a GLMPan...etc...
		announcementClass: 	GLMPaneAdded
		subscriber: 	a GLMMorphicPagerRenderer
		action: 	MessageSend(#actOnPaneAdded: -> a GLMMorphicPagerRenderer)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0



--- The full stack ---
MessageTally(Object)>>doesNotUnderstand: #withDeepCollect:
MessageTally>>gtInspectorMessageTreeIn:
[ :eachPragma | 
(eachPragma selector findTokens: $:) size = 1
	ifTrue: [ self perform: eachPragma selector with: composite ].
(eachPragma selector findTokens: $:) size = 2
	ifTrue: [ self perform: eachPragma selector with: composite with: aGTInspector ] ] in MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
Array(SequenceableCollection)>>do:
MessageTally(Object)>>gtInspectorPresentationsIn:inContext:
[ :d | each gtInspectorPresentationsIn: d inContext: pager ] in [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
GLMCompositePresentation(GLMPresentation)>>with:
[ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] in [ :a :each | 
a title: [ GTInspector new printObjectAsAnItem: each ].
a dynamicActions: [ :aPresentation | each gtInspectorActions asOrderedCollection ].
a dynamic
	display: [ :x | (GLMCompositePresentation new with: [ :d | each gtInspectorPresentationsIn: d inContext: pager ]) startOn: x ] ] in RTExampleBrowser>>open
BlockClosure>>glamourValueWithArgs:
BlockClosure(Object)>>glamourValue:
GLMDynamicPresentation(GLMPresentation)>>displayValue
GLMDynamicPresentation>>currentPresentation
GLMMorphicDynamicRenderer>>render:
GLMMorphicDynamicRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderDynamicPresentation:
GLMDynamicPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>render:
GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderPane:
GLMPane>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPagerRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPagerRenderer>>actOnPaneAdded:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TRConstraint class>>stick:onTheBottomLeftOf:
22 October 2015 3:36:40.686015 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

TRConstraint class(Object)>>doesNotUnderstand: #stick:onTheBottomLeftOf:
	Receiver: TRConstraint
	Arguments and temporary variables: 
		aMessage: 	stick: a TRLabelShape onTheBottomLeftOf: a TRArcShape
		exception: 	MessageNotUnderstood: TRConstraint class>>stick:onTheBottomLeftOf:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	TRObject
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TRConstraint
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Trachel-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTLabelled>>initializeElement:
	Receiver: a RTLabelled
	Arguments and temporary variables: 
		element: 	a RTElement
		s: 	a TRArcShape
		t: 	1
		callback: 	a TRRemoveCallback
	Receiver's instance variables: 
		canvas: 	a TRCanvas
		color: 	Color gray
		highlightable: 	false
		lbl: 	a TRLabelShape
		lowColor: 	Color veryVeryLightGray
		offsetOnEdge: 	0.5
		position: 	#bottomLeft
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontSize: 	12


RTElement(RTAnnounceableObject)>>addInteraction:
	Receiver: a RTElement
	Arguments and temporary variables: 
		anInteractionClassOrInstance: 	a RTLabelled
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#RTLabelledCallback->a TRRemoveCallback #RTLabelledLab...etc...
		isFixed: 	false
		model: 	1
		shape: 	a RTArc
		trachelShape: 	a TRArcShape
		view: 	a RTView
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


RTElement(RTAnnounceableObject)>>@
	Receiver: a RTElement
	Arguments and temporary variables: 
		anInteractionClassOrInstance: 	a RTLabelled
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#RTLabelledCallback->a TRRemoveCallback #RTLabelledLab...etc...
		isFixed: 	false
		model: 	1
		shape: 	a RTArc
		trachelShape: 	a TRArcShape
		view: 	a RTView
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


[ :e | e @ interaction ] in RTGroup>>@
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		interaction: 	a RTLabelled
		e: 	a RTElement
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	10
		attributes: 	nil


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | e @ interaction ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	10
		attributes: 	nil


RTGroup>>@
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		interaction: 	a RTLabelled
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	10
		attributes: 	nil


RTRoassalExample>>exampleArc
	Receiver: a RTRoassalExample
	Arguments and temporary variables: 
		view: 	a RTView
		shape: 	a RTArc
		label: 	a RTLabelled
	Receiver's instance variables: 
a RTRoassalExample

RTExampleSelection(GTExample)>>result
	Receiver: a RTExampleSelection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		result: 	nil
		title: 	nil
		provider: 	a RTRoassalExample
		selector: 	#exampleArc
		parentExample: 	nil
		extractionStrategy: 	nil


[ :example | example result ] in RTRoassalExample(RTAbstractExample)>>gtInspectorPreviewIn:
	Receiver: a RTRoassalExample
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=258473984 title=nil pane=a GLMPane(478...etc...
		example: 	a RTExampleSelection
	Receiver's instance variables: 
a RTRoassalExample

BlockClosure>>glamourValueWithArgs:
	Receiver: [ :example | example result ]
	Arguments and temporary variables: 
		anArray: 	an Array(a RTExampleSelection)
	Receiver's instance variables: 
		outerContext: 	RTRoassalExample(RTAbstractExample)>>gtInspectorPreviewIn:
		startpc: 	79
		numArgs: 	1


BlockClosure(Object)>>glamourValue:
	Receiver: [ :example | example result ]
	Arguments and temporary variables: 
		anObject: 	a RTExampleSelection
		args: 	an Array(a RTExampleSelection)
	Receiver's instance variables: 
		outerContext: 	RTRoassalExample(RTAbstractExample)>>gtInspectorPreviewIn:
		startpc: 	79
		numArgs: 	1


GLMTransmission>>value
	Receiver: GLMTransmission (origins=an OrderedCollection(a GLMPresentationBoundPort 757858304 (name=#...etc...
	Arguments and temporary variables: 
		originalValue: 	a RTExampleSelection
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	a GLMPresentationBoundPort 794558464 (name=#selection value=a RTVi...etc...
		browser: 	nil
		origins: 	an OrderedCollection(a GLMOriginPortReference 793247744 (a GLMPresenta...etc...
		transmissionStrategy: 	a GLMNoStrategy
		transformation: 	[ :example | example result ]
		condition: 	true


GLMPanePort>>receive:in:
	Receiver: Port (pane='2' name=#selection value=a RTView)
	Arguments and temporary variables: 
		aTransmission: 	GLMTransmission (origins=an OrderedCollection(a GLMPresentationB...etc...
		aContext: 	a GLMTransmissionContext(nil)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		name: 	#selection
		pane: 	a GLMPane(478937088 2)
		value: 	a RTView


GLMPresentationBoundPort>>receive:in:
	Receiver: a GLMPresentationBoundPort 794558464 (name=#selection value=a RTView)
	Arguments and temporary variables: 
		aTransmission: 	GLMTransmission (origins=an OrderedCollection(a GLMPresentationB...etc...
		aContext: 	a GLMTransmissionContext(nil)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		name: 	#selection
		presentation: 	a GLMRoassal2Presentation(id=710672384 title=Examples pane=a GLMP...etc...


[ 
self transmissionStrategy transmitIn: aContext.
self destination receive: self in: aContext ] in GLMTransmission>>transmitIn:
	Receiver: GLMTransmission (origins=an OrderedCollection(a GLMPresentationBoundPort 757858304 (name=#...etc...
	Arguments and temporary variables: 
		aContext: 	a GLMTransmissionContext(nil)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	a GLMPresentationBoundPort 794558464 (name=#selection value=a RTVi...etc...
		browser: 	nil
		origins: 	an OrderedCollection(a GLMOriginPortReference 793247744 (a GLMPresenta...etc...
		transmissionStrategy: 	a GLMNoStrategy
		transformation: 	[ :example | example result ]
		condition: 	true


GLMPane>>notingPresentationChangeDo:
	Receiver: a GLMPane(478937088 2)
	Arguments and temporary variables: 
		aBlock: 	[ 
self transmissionStrategy transmitIn: aContext.
self destination rec...etc...
		oldPresentations: 	an OrderedCollection(a GLMDynamicPresentation(id=350224384 ti...etc...
		oldMatchingPresentations: 	an OrderedCollection(a GLMDynamicPresentation(id=3502...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		browser: 	a GLMPager(id=108003328 title=Roassal examples browser pane=a GLMPane(...etc...
		name: 	'2'
		presentations: 	a GLMCompositePresentation(id=217841664 title=a RTRoassalExample...etc...
		ports: 	an OrderedCollection(Port (pane='2' name=#activePresentation value=nil) ...etc...
		lastActivePresentation: 	nil
		allowedToNotePresentationsChanged: 	false
		cachedMatchingPresentations: 	an OrderedCollection(a GLMDynamicPresentation(id=3...etc...


GLMPresentationBoundPort(GLMBoundPort)>>notingPresentationChangeDo:
	Receiver: a GLMPresentationBoundPort 794558464 (name=#selection value=a RTView)
	Arguments and temporary variables: 
		aBlock: 	[ 
self transmissionStrategy transmitIn: aContext.
self destination rec...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		name: 	#selection
		presentation: 	a GLMRoassal2Presentation(id=710672384 title=Examples pane=a GLMP...etc...


GLMTransmission>>transmitIn:
	Receiver: GLMTransmission (origins=an OrderedCollection(a GLMPresentationBoundPort 757858304 (name=#...etc...
	Arguments and temporary variables: 
		aContext: 	a GLMTransmissionContext(nil)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	a GLMPresentationBoundPort 794558464 (name=#selection value=a RTVi...etc...
		browser: 	nil
		origins: 	an OrderedCollection(a GLMOriginPortReference 793247744 (a GLMPresenta...etc...
		transmissionStrategy: 	a GLMNoStrategy
		transformation: 	[ :example | example result ]
		condition: 	true


GLMTransmission>>transmit
	Receiver: GLMTransmission (origins=an OrderedCollection(a GLMPresentationBoundPort 757858304 (name=#...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	a GLMPresentationBoundPort 794558464 (name=#selection value=a RTVi...etc...
		browser: 	nil
		origins: 	an OrderedCollection(a GLMOriginPortReference 793247744 (a GLMPresenta...etc...
		transmissionStrategy: 	a GLMNoStrategy
		transformation: 	[ :example | example result ]
		condition: 	true


ByteSymbol(Symbol)>>value:
	Receiver: #transmit
	Arguments and temporary variables: 
		anObject: 	GLMTransmission (origins=an OrderedCollection(a GLMPresentationBoundP...etc...
	Receiver's instance variables: 
#transmit

IdentitySet(Set)>>do:
	Receiver: an IdentitySet(GLMTransmission (origins=an OrderedCollection(a GLMPresentationBoundPort 75...etc...
	Arguments and temporary variables: 
		aBlock: 	#transmit
		index: 	1
		each: 	GLMTransmission (origins=an OrderedCollection(a GLMPresentationBoundPort ...etc...
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(GLMTransmission (origins=an OrderedCollection(a GLMPresentation...etc...


GLMRoassal2Presentation(GLMPresentation)>>selection:
	Receiver: a GLMRoassal2Presentation(id=710672384 title=Examples pane=a GLMPane(478937088 2))
	Arguments and temporary variables: 
		anObject: 	a RTExampleSelection
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(478937088 2)
		title: 	'Examples'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection(a GLMGenericAction a GLMGenericAction a GLMGeneri...etc...
		condition: 	[ self gtExamples notEmpty ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	true
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>roassal2
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		painting: 	nil
		paintingBlock: 	[ :view | 
view @ RTDraggableView.
self gtOpenOn: view ]
		view: 	a RTView
		shouldPopulateSelection: 	true
		newViewBlock: 	[ RTView new ]


[ :event | self selection: each model ] in [ :each | each when: TRMouseLeftClick do: [ :event | self selection: each model ] ] in GLMRoassal2Presentation>>renderOn:
	Receiver: a GLMRoassal2Presentation(id=710672384 title=Examples pane=a GLMPane(478937088 2))
	Arguments and temporary variables: 
		aView: 	a RTView
		each: 	a RTElement
		event: 	a TRMouseLeftClick
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(478937088 2)
		title: 	'Examples'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection(a GLMGenericAction a GLMGenericAction a GLMGeneri...etc...
		condition: 	[ self gtExamples notEmpty ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	true
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>roassal2
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		painting: 	nil
		paintingBlock: 	[ :view | 
view @ RTDraggableView.
self gtOpenOn: view ]
		view: 	a RTView
		shouldPopulateSelection: 	true
		newViewBlock: 	[ RTView new ]


BlockClosure>>cull:
	Receiver: [ :event | self selection: each model ]
	Arguments and temporary variables: 
		anArg: 	a TRMouseLeftClick
	Receiver's instance variables: 
		outerContext: 	[ :each | each when: TRMouseLeftClick do: [ :event | self selecti...etc...
		startpc: 	107
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :event | self selection: each model ]
	Arguments and temporary variables: 
		firstArg: 	a TRMouseLeftClick
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	[ :each | each when: TRMouseLeftClick do: [ :event | self selecti...etc...
		startpc: 	107
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseLeftClick
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseLeftClick
		subscriber: 	a GLMRoassal2Presentation(id=710672384 title=Examples pane=a GLMPan...etc...
		action: 	[ :event | self selection: each model ]


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	nil
		ex: 	UnhandledError
		copy: 	nil
		onDoCtx: 	nil
		process: 	nil
		handler: 	nil
		bottom: 	nil
		thisCtx: 	nil
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0



--- The full stack ---
TRConstraint class(Object)>>doesNotUnderstand: #stick:onTheBottomLeftOf:
RTLabelled>>initializeElement:
RTElement(RTAnnounceableObject)>>addInteraction:
RTElement(RTAnnounceableObject)>>@
[ :e | e @ interaction ] in RTGroup>>@
RTGroup(OrderedCollection)>>do:
RTGroup>>@
RTRoassalExample>>exampleArc
RTExampleSelection(GTExample)>>result
[ :example | example result ] in RTRoassalExample(RTAbstractExample)>>gtInspectorPreviewIn:
BlockClosure>>glamourValueWithArgs:
BlockClosure(Object)>>glamourValue:
GLMTransmission>>value
GLMPanePort>>receive:in:
GLMPresentationBoundPort>>receive:in:
[ 
self transmissionStrategy transmitIn: aContext.
self destination receive: self in: aContext ] in GLMTransmission>>transmitIn:
GLMPane>>notingPresentationChangeDo:
GLMPresentationBoundPort(GLMBoundPort)>>notingPresentationChangeDo:
GLMTransmission>>transmitIn:
GLMTransmission>>transmit
ByteSymbol(Symbol)>>value:
IdentitySet(Set)>>do:
GLMRoassal2Presentation(GLMPresentation)>>selection:
[ :event | self selection: each model ] in [ :each | each when: TRMouseLeftClick do: [ :event | self selection: each model ] ] in GLMRoassal2Presentation>>renderOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
26 October 2015 5:11:32.212771 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: 'PharoTutorial'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'PharoTutorial'

ByteString(Object)>>at:
	Receiver: 'PharoTutorial'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'PharoTutorial'

ByteString>>at:
	Receiver: 'PharoTutorial'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'PharoTutorial'

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'''PharoTutorial'' at: 0.'
		itsSelection: 	a Text for '''PharoTutorial'' at: 0.'
		itsSelectionString: 	'''PharoTutorial'' at: 0.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ 'PharoTutorial' at: 0
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
printString := [ result printString ]
	on: Error
	do: [ '<...etc...
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(774373376)
		selectionShowing: 	true
		model: 	a LessonView
		editingState: 	a SmalltalkEditingState


[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(104.0@100.0) corner: (794.0@567.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(104@100) corner: (794@567)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(273 to: 272)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		editBlock: 	[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :resul...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@363)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@363)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"A String is a collection of characters. Use single quotes to...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(104.0@100.0) corner: (794.0@567.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(104@100) corner: (794@567)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(273 to: 272)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{GLMSmalltalkEditor}
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	209
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387973120)
		secondArg: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	209
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387973120)
		secondArg: 	a PluggableTextMorph(387973120)
		thirdArg: 	[keystroke '<Ctrl-p>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	209
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Ctrl + P do [ :morph | morph printIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387973120)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387973120)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Ctrl + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Ctrl + P
		defaultShortcut: 	Ctrl + P
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Ctrl + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Ctrl + P
		defaultShortcut: 	Ctrl + P
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Ctrl + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Ctrl + P
		defaultShortcut: 	Ctrl + P
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#printIt on Ctrl + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 #doIt on Ctrl + D do [ :morp...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	15
		each: 	#printIt on Ctrl + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 nil nil...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387973120)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387973120)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(387973120)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(387973120)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(387973120)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-p>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-p>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(774373376)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@363)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@363)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"A String is a collection of characters. Use single quotes to...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@363)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@363)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"A String is a collection of characters. Use single quotes to...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(774373376)
	Receiver's instance variables: 
		timeStamp: 	602934
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(202@371)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	16
		charCode: 	112
		scanCode: 	16


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@363)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@363)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"A String is a collection of characters. Use single quotes to...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@363)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@363)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"A String is a collection of characters. Use single quotes to...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-p>']
		focusHolder: 	a TextMorphForEditView(774373376)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(310@472) corner: (326@488)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(774373376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(310@472) mouseOver nil nil]
		targetOffset: 	(205@281)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 523126 312 472 0 0 0 1)
		lastKeyScanCode: 	16
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(364118016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Ctrl-p>']
		focusHolder: 	a TextMorphForEditView(774373376)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(310@472) corner: (326@488)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(774373376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(310@472) mouseOver nil nil]
		targetOffset: 	(205@281)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 523126 312 472 0 0 0 1)
		lastKeyScanCode: 	16
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2



--- The full stack ---
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PharoTutorial class>>prev
26 October 2015 5:13:57.994774 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

PharoTutorial class(Object)>>doesNotUnderstand: #prev
	Receiver: PharoTutorial
	Arguments and temporary variables: 
		aMessage: 	prev
		exception: 	MessageNotUnderstood: PharoTutorial class>>prev
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#close->PharoTutorial>>#close #first->PharoTutor...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#lessonView #player)
		organization: 	a ClassOrganization
		subclasses: 	{ProfStef}
		name: 	#PharoTutorial
		classPool: 	a Dictionary(#Instance->a PharoTutorial )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'ProfStef-Core'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'PharoTutorial prev.'
		itsSelection: 	a Text for 'PharoTutorial prev.'
		itsSelectionString: 	'PharoTutorial prev.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ PharoTutorial prev
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(774373376)
		selectionShowing: 	true
		model: 	a LessonView
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(774373376)
		selectionShowing: 	true
		model: 	a LessonView
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(104.0@100.0) corner: (794.0@567.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(104@100) corner: (794@567)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(188 to: 187)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(104.0@100.0) corner: (794.0@567.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(104@100) corner: (794@567)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(188 to: 187)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@249)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@249)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Literal arrays are created at parse time:"

#(1 2 3).

#( 1 ...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(104.0@100.0) corner: (794.0@567.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(104@100) corner: (794@567)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(188 to: 187)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(104.0@100.0) corner: (794.0@567.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(104@100) corner: (794@567)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(188 to: 187)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{GLMSmalltalkEditor}
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387973120)
		secondArg: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387973120)
		secondArg: 	a PluggableTextMorph(387973120)
		thirdArg: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387973120)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387973120)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 #doIt on Ctrl + D do [ :morp...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	6
		each: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 nil nil...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387973120)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387973120)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(387973120)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(387973120)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(387973120)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(774373376)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@249)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@249)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Literal arrays are created at parse time:"

#(1 2 3).

#( 1 ...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@249)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@249)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Literal arrays are created at parse time:"

#(1 2 3).

#( 1 ...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(774373376)
	Receiver's instance variables: 
		timeStamp: 	748688
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(156@241)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	4
		charCode: 	100
		scanCode: 	4


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@249)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@249)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Literal arrays are created at parse time:"

#(1 2 3).

#( 1 ...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@249)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@249)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Literal arrays are created at parse time:"

#(1 2 3).

#( 1 ...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		focusHolder: 	a TextMorphForEditView(774373376)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(264@342) corner: (280@358)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(264@342) corner: (280@358)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(774373376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(264@342) mouseOver nil nil]
		targetOffset: 	(81@243)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 743382 263 341 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(364118016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil



--- The full stack ---
PharoTutorial class(Object)>>doesNotUnderstand: #prev
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PharoTutorial class>>back
26 October 2015 5:14:05.068774 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

PharoTutorial class(Object)>>doesNotUnderstand: #back
	Receiver: PharoTutorial
	Arguments and temporary variables: 
		aMessage: 	back
		exception: 	MessageNotUnderstood: PharoTutorial class>>back
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#close->PharoTutorial>>#close #first->PharoTutor...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#lessonView #player)
		organization: 	a ClassOrganization
		subclasses: 	{ProfStef}
		name: 	#PharoTutorial
		classPool: 	a Dictionary(#Instance->a PharoTutorial )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'ProfStef-Core'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'PharoTutorial back.'
		itsSelection: 	a Text for 'PharoTutorial back.'
		itsSelectionString: 	'PharoTutorial back.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ PharoTutorial back
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(774373376)
		selectionShowing: 	true
		model: 	a LessonView
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(774373376)
		selectionShowing: 	true
		model: 	a LessonView
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(104.0@100.0) corner: (794.0@567.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(104@100) corner: (794@567)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(187 to: 186)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(104.0@100.0) corner: (794.0@567.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(104@100) corner: (794@567)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(187 to: 186)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@249)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@249)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Literal arrays are created at parse time:"

#(1 2 3).

#( 1 ...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(104.0@100.0) corner: (794.0@567.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(104@100) corner: (794@567)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(187 to: 186)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(104.0@100.0) corner: (794.0@567.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(104@100) corner: (794@567)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(187 to: 186)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{GLMSmalltalkEditor}
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387973120)
		secondArg: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387973120)
		secondArg: 	a PluggableTextMorph(387973120)
		thirdArg: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387973120)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387973120)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 #doIt on Ctrl + D do [ :morp...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	6
		each: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 nil nil...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387973120)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387973120)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(387973120)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(387973120)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(387973120)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(774373376)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@249)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@249)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Literal arrays are created at parse time:"

#(1 2 3).

#( 1 ...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@249)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@249)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Literal arrays are created at parse time:"

#(1 2 3).

#( 1 ...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(774373376)
	Receiver's instance variables: 
		timeStamp: 	755776
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(160@262)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	4
		charCode: 	100
		scanCode: 	4


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@249)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@249)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Literal arrays are created at parse time:"

#(1 2 3).

#( 1 ...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@249)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@249)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Literal arrays are created at parse time:"

#(1 2 3).

#( 1 ...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		focusHolder: 	a TextMorphForEditView(774373376)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(268@363) corner: (284@379)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(774373376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(268@363) mouseOver nil nil]
		targetOffset: 	(121@233)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 751902 261 350 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(364118016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil



--- The full stack ---
PharoTutorial class(Object)>>doesNotUnderstand: #back
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Rectangle>>dyjxfj
26 October 2015 5:27:04.558775 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Rectangle(Object)>>doesNotUnderstand: #dyjxfj
	Receiver: (0@0) corner: (100@200)
	Arguments and temporary variables: 
		aMessage: 	dyjxfj
		exception: 	MessageNotUnderstood: Rectangle>>dyjxfj
		resumeValue: 	nil
	Receiver's instance variables: 
		origin: 	(0@0)
		corner: 	(100@200)


Rectangle>>DoIt
	Receiver: (0@0) corner: (100@200)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		origin: 	(0@0)
		corner: 	(100@200)


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ self dyjxfj
		source: 	a ReadStream
		context: 	nil
		receiver: 	(0@0) corner: (100@200)
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	(0@0) corner: (100@200)
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1002962944)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1002962944)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(925892608)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	1535270
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 
		anArgument: 	1535280
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	1535270
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1535280
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(387710976)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1478420
		lastStepMessage: 	nil
		lastCycleTime: 	1535314
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(387710976)))
		lastAlarmTime: 	1535318
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		now: 	1535280
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1478420
		lastStepMessage: 	nil
		lastCycleTime: 	1535314
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(387710976)))
		lastAlarmTime: 	1535318
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1478420
		lastStepMessage: 	nil
		lastCycleTime: 	1535314
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(387710976)))
		lastAlarmTime: 	1535318
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(69730304) a Sys...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1478420
		lastStepMessage: 	nil
		lastCycleTime: 	1535334
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(387710976)))
		lastAlarmTime: 	1535334
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1478420
		lastStepMessage: 	nil
		lastCycleTime: 	1535334
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(387710976)))
		lastAlarmTime: 	1535334
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(69730304) a Sys...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Rectangle(Object)>>doesNotUnderstand: #dyjxfj
Rectangle>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PharoTutorial class>>back
26 October 2015 5:28:42.068771 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

PharoTutorial class(Object)>>doesNotUnderstand: #back
	Receiver: PharoTutorial
	Arguments and temporary variables: 
		aMessage: 	back
		exception: 	MessageNotUnderstood: PharoTutorial class>>back
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#close->PharoTutorial>>#close #first->PharoTutor...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#lessonView #player)
		organization: 	a ClassOrganization
		subclasses: 	{ProfStef}
		name: 	#PharoTutorial
		classPool: 	a Dictionary(#Instance->a PharoTutorial )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'ProfStef-Core'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'PharoTutorial back.'
		itsSelection: 	a Text for 'PharoTutorial back.'
		itsSelectionString: 	'PharoTutorial back.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ PharoTutorial back
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(774373376)
		selectionShowing: 	true
		model: 	a LessonView
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(774373376)
		selectionShowing: 	true
		model: 	a LessonView
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(104.0@100.0) corner: (794.0@567.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(104@100) corner: (794@567)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(144 to: 143)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(104.0@100.0) corner: (794.0@567.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(104@100) corner: (794@567)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(144 to: 143)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@173)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@173)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Use parentheses to change order of evaluation"

(2 + 3) squa...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(104.0@100.0) corner: (794.0@567.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(104@100) corner: (794@567)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(144 to: 143)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(104.0@100.0) corner: (794.0@567.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(104@100) corner: (794@567)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(144 to: 143)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{GLMSmalltalkEditor}
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387973120)
		secondArg: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387973120)
		secondArg: 	a PluggableTextMorph(387973120)
		thirdArg: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387973120)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387973120)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 #doIt on Ctrl + D do [ :morp...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	6
		each: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 nil nil...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387973120)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387973120)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(387973120)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(387973120)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(387973120)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(774373376)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@173)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@173)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Use parentheses to change order of evaluation"

(2 + 3) squa...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@173)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@173)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Use parentheses to change order of evaluation"

(2 + 3) squa...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(774373376)
	Receiver's instance variables: 
		timeStamp: 	1632784
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(251@304)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	4
		charCode: 	100
		scanCode: 	4


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@173)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@173)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Use parentheses to change order of evaluation"

(2 + 3) squa...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@173)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@173)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Use parentheses to change order of evaluation"

(2 + 3) squa...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		focusHolder: 	a TextMorphForEditView(774373376)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(359@405) corner: (375@421)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(774373376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(359@405) mouseOver nil nil]
		targetOffset: 	(243@290)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1602232 359 405 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(364118016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil



--- The full stack ---
PharoTutorial class(Object)>>doesNotUnderstand: #back
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>,
26 October 2015 5:33:36.778776 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 3
	Arguments and temporary variables: 
		aMessage: 	, 5
		exception: 	MessageNotUnderstood: SmallInteger>>,
		resumeValue: 	nil
	Receiver's instance variables: 
3

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'[:x :y| x + y] value:3 ,5.'
		itsSelection: 	a Text for '[:x :y| x + y] value:3 ,5.'
		itsSelectionString: 	'[:x :y| x + y] value:3 ,5.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ [ :x :y | x + y ] value: 3 , 5
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
printString := [ result printString ]
	on: Error
	do: [ '<...etc...
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(774373376)
		selectionShowing: 	true
		model: 	a LessonView
		editingState: 	a SmalltalkEditingState


[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(70.0@40.0) corner: (760.0@507.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a ScrollBar(459014144) a TransformMorph(544473088))
		fullBounds: 	(70@40) corner: (760@507)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(468 to: 493)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		editBlock: 	[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :resul...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (669@477)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (669@477)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Cascade is cool ! Let''s talk about blocks.

Blocks are anon...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(70.0@40.0) corner: (760.0@507.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a ScrollBar(459014144) a TransformMorph(544473088))
		fullBounds: 	(70@40) corner: (760@507)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(468 to: 493)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{GLMSmalltalkEditor}
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	209
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387973120)
		secondArg: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	209
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph printIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387973120)
		secondArg: 	a PluggableTextMorph(387973120)
		thirdArg: 	[keystroke '<Ctrl-p>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	209
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Ctrl + P do [ :morph | morph printIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387973120)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387973120)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Ctrl + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Ctrl + P
		defaultShortcut: 	Ctrl + P
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Ctrl + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Ctrl + P
		defaultShortcut: 	Ctrl + P
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Ctrl + P do [ :morph | morph printIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph printIt ]
		name: 	#printIt
		shortcut: 	Ctrl + P
		defaultShortcut: 	Ctrl + P
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#printIt on Ctrl + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 #doIt on Ctrl + D do [ :morp...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	15
		each: 	#printIt on Ctrl + P do [ :morph | morph printIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 nil nil...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387973120)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387973120)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(387973120)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(387973120)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(387973120)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-p>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-p>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(774373376)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (669@477)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (669@477)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Cascade is cool ! Let''s talk about blocks.

Blocks are anon...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (669@477)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (669@477)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Cascade is cool ! Let''s talk about blocks.

Blocks are anon...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(774373376)
	Receiver's instance variables: 
		timeStamp: 	1927472
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(167@377)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	16
		charCode: 	112
		scanCode: 	16


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (669@477)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (669@477)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Cascade is cool ! Let''s talk about blocks.

Blocks are anon...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (669@477)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (669@477)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"Cascade is cool ! Let''s talk about blocks.

Blocks are anon...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-p>']
		focusHolder: 	a TextMorphForEditView(774373376)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(233@371) corner: (249@387)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(233@371) corner: (249@387)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(774373376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(241@380) mouseOver nil nil]
		targetOffset: 	(10.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1898792 241 380 0 0 0 1)
		lastKeyScanCode: 	16
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(364118016) a Syste...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Ctrl-p>']
		focusHolder: 	a TextMorphForEditView(774373376)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(233@371) corner: (249@387)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(233@371) corner: (249@387)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(774373376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(241@380) mouseOver nil nil]
		targetOffset: 	(10.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1898792 241 380 0 0 0 1)
		lastKeyScanCode: 	16
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-p>']
		focusHolder: 	a TextMorphForEditView(774373376)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(233@371) corner: (249@387)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(233@371) corner: (249@387)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(774373376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(241@380) mouseOver nil nil]
		targetOffset: 	(10.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1898792 241 380 0 0 0 1)
		lastKeyScanCode: 	16
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-p>']
	Receiver's instance variables: 
		bounds: 	(233@371) corner: (249@387)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(233@371) corner: (249@387)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(774373376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(241@380) mouseOver nil nil]
		targetOffset: 	(10.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1898792 241 380 0 0 0 1)
		lastKeyScanCode: 	16
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #,
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
[ 
(oldEditor := textMorph editor)
	evaluateSelectionAndDo: [ :result | 
		printString := [ result printString ]
			on: Error
			do: [ '<error in printString: try ''Inspect it'' to debug>' ].
		selectionInterval := oldEditor selectionInterval.
		textMorph installEditorToReplace: oldEditor.
		textMorph handleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].
		selectionInterval := oldEditor selectionInterval.
		textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
		self scrollSelectionIntoView ] ] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
[ :morph | morph printIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ZeroDivide
27 October 2015 5:02:02.364311 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

SmallInteger>>/
	Receiver: 2
	Arguments and temporary variables: 
		aNumber: 	0
	Receiver's instance variables: 
2

PharoSyntaxTutorial>>divideTwoByZero
	Receiver: a Pharo Tutorial (Pharo Syntax Tutorial)
	Arguments and temporary variables: 

	Receiver's instance variables: 
a Pharo Tutorial (Pharo Syntax Tutorial)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'PharoSyntaxTutorial new divideTwoByZero.'
		itsSelection: 	a Text for 'PharoSyntaxTutorial new divideTwoByZero.'
		itsSelectionString: 	'PharoSyntaxTutorial new divideTwoByZero.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ PharoSyntaxTutorial new divideTwoByZero
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(774373376)
		selectionShowing: 	true
		model: 	a LessonView
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(774373376)
		selectionShowing: 	true
		model: 	a LessonView
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(232.0@219.0) corner: (922.0@686.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(232@219) corner: (922@686)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(279 to: 278)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(232.0@219.0) corner: (922.0@686.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(232@219) corner: (922@686)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(279 to: 278)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@116)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@116)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"The Debugger may be the most famous tool of Smalltalk enviro...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(232.0@219.0) corner: (922.0@686.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(232@219) corner: (922@686)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(279 to: 278)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(232.0@219.0) corner: (922.0@686.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(232@219) corner: (922@686)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(279 to: 278)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{GLMSmalltalkEditor}
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387973120)
		secondArg: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387973120)
		secondArg: 	a PluggableTextMorph(387973120)
		thirdArg: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387973120)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387973120)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 #doIt on Ctrl + D do [ :morp...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	6
		each: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 nil nil...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387973120)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387973120)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(387973120)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(387973120)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(387973120)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(774373376)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@116)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@116)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"The Debugger may be the most famous tool of Smalltalk enviro...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@116)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@116)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"The Debugger may be the most famous tool of Smalltalk enviro...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(774373376)
	Receiver's instance variables: 
		timeStamp: 	812046
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(297@117)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	4
		charCode: 	100
		scanCode: 	4


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@116)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@116)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"The Debugger may be the most famous tool of Smalltalk enviro...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@116)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@116)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"The Debugger may be the most famous tool of Smalltalk enviro...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		focusHolder: 	a TextMorphForEditView(774373376)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(532@336) corner: (548@352)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(532@336) corner: (548@352)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(774373376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(532@336) mouseOver CTRL nil nil]
		targetOffset: 	(309@109)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 812054 532 336 0 2 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
SmallInteger>>/
PharoSyntaxTutorial>>divideTwoByZero
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ZeroDivide
27 October 2015 5:03:43.308317 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

SmallInteger>>/
	Receiver: 2
	Arguments and temporary variables: 
		aNumber: 	0
	Receiver's instance variables: 
2

PharoSyntaxTutorial>>divideTwoByZero
	Receiver: a Pharo Tutorial (Pharo Syntax Tutorial)
	Arguments and temporary variables: 

	Receiver's instance variables: 
a Pharo Tutorial (Pharo Syntax Tutorial)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'PharoSyntaxTutorial new divideTwoByZero.'
		itsSelection: 	a Text for 'PharoSyntaxTutorial new divideTwoByZero.'
		itsSelectionString: 	'PharoSyntaxTutorial new divideTwoByZero.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ PharoSyntaxTutorial new divideTwoByZero
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(774373376)
		selectionShowing: 	true
		model: 	a LessonView
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(774373376)
		selectionShowing: 	true
		model: 	a LessonView
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(232.0@219.0) corner: (922.0@686.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(232@219) corner: (922@686)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(279 to: 278)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(232.0@219.0) corner: (922.0@686.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(232@219) corner: (922@686)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(279 to: 278)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@116)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@116)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"The Debugger may be the most famous tool of Smalltalk enviro...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(232.0@219.0) corner: (922.0@686.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(232@219) corner: (922@686)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(279 to: 278)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(387973120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(232.0@219.0) corner: (922.0@686.0)
		owner: 	a SystemWindow(364118016)
		submorphs: 	an Array(a TransformMorph(544473088))
		fullBounds: 	(232@219) corner: (922@686)
		color: 	Color white
		extension: 	a MorphExtension (671612928) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a LessonView
		scrollBar: 	a ScrollBar(459014144)
		scroller: 	a TransformMorph(544473088)
		getMenuSelector: 	#shoutMorphFillMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1071906816)
		textMorph: 	a TextMorphForEditView(774373376)
		getTextSelector: 	nil
		setTextSelector: 	nil
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(279 to: 278)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{GLMSmalltalkEditor}
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387973120)
		secondArg: 	a PluggableTextMorph(387973120)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(387973120)
		secondArg: 	a PluggableTextMorph(387973120)
		thirdArg: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387973120)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387973120)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 #doIt on Ctrl + D do [ :morp...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	6
		each: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 nil nil...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(387973120)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(387973120)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(387973120)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	7


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a PluggableTextMorph(387973120)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(387973120)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(774373376)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@116)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@116)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"The Debugger may be the most famous tool of Smalltalk enviro...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@116)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@116)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"The Debugger may be the most famous tool of Smalltalk enviro...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(774373376)
	Receiver's instance variables: 
		timeStamp: 	913062
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(394@107)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	4
		charCode: 	100
		scanCode: 	4


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@116)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@116)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"The Debugger may be the most famous tool of Smalltalk enviro...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(774373376)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (682@116)
		owner: 	a TransformMorph(544473088)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (682@116)
		color: 	Color black
		extension: 	a MorphExtension (820248576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '"The Debugger may be the most famous tool of Smalltalk enviro...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil
		editView: 	a PluggableTextMorph(387973120)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		focusHolder: 	a TextMorphForEditView(774373376)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(622@318) corner: (638@334)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(622@318) corner: (638@334)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(774373376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(630@327) mouseOver nil nil]
		targetOffset: 	(394@107)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 912846 630 327 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
SmallInteger>>/
PharoSyntaxTutorial>>divideTwoByZero
UndefinedObject>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorph>>doIt
[ result := editBlock value ] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Object class>>browser
27 October 2015 5:29:55.338253 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Object class(Object)>>doesNotUnderstand: #browser
	Receiver: Object
	Arguments and temporary variables: 
		aMessage: 	browser
		exception: 	MessageNotUnderstood: Object class>>browser
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 383)
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(a GLMGen...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ Object browser
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1040711680)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1040711680)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(438042624)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1040711680)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@69)
		owner: 	a TransformWithLayoutMorph(559939584)
		submorphs: 	an Array(a RubPrimarySelectionMorph(737411072) a RubCursor(398983168...etc...
		fullBounds: 	(0@0) corner: (580@69)
		color: 	Color transparent
		extension: 	a MorphExtension (490995712) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(521666560)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(398983168)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(884998144))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(438042624)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1059237
		lastStepMessage: 	nil
		lastCycleTime: 	1151541
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	1151541
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(970194944) a Sy...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1059237
		lastStepMessage: 	nil
		lastCycleTime: 	1151541
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	1151541
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1059237
		lastStepMessage: 	nil
		lastCycleTime: 	1151541
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	1151541
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(970194944) a Sy...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Object class(Object)>>doesNotUnderstand: #browser
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PharoTutorial class>>selector
27 October 2015 5:51:23.930255 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

PharoTutorial class(Object)>>doesNotUnderstand: #selector
	Receiver: PharoTutorial
	Arguments and temporary variables: 
		aMessage: 	selector
		exception: 	MessageNotUnderstood: PharoTutorial class>>selector
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#close->PharoTutorial>>#close #first->PharoTutor...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#lessonView #player)
		organization: 	a ClassOrganization
		subclasses: 	{ProfStef}
		name: 	#PharoTutorial
		classPool: 	a Dictionary(#Instance->a PharoTutorial )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'ProfStef-Core'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ PharoTutorial selector
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(897318912)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(897318912)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(221773824)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	2439979
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 
		anArgument: 	2439987
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	2439979
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2439987
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(221773824)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2340455
		lastStepMessage: 	nil
		lastCycleTime: 	2440060
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(221773824)))
		lastAlarmTime: 	2440060
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		now: 	2439987
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2340455
		lastStepMessage: 	nil
		lastCycleTime: 	2440060
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(221773824)))
		lastAlarmTime: 	2440060
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2340455
		lastStepMessage: 	nil
		lastCycleTime: 	2440060
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(221773824)))
		lastAlarmTime: 	2440060
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(428605440) a GL...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2340455
		lastStepMessage: 	nil
		lastCycleTime: 	2440060
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(221773824)))
		lastAlarmTime: 	2440060
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2340455
		lastStepMessage: 	nil
		lastCycleTime: 	2440060
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(221773824)))
		lastAlarmTime: 	2440060
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(428605440) a GL...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
PharoTutorial class(Object)>>doesNotUnderstand: #selector
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>shout
27 October 2015 6:03:18.850252 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>doesNotUnderstand: #shout
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 
		aMessage: 	shout
		exception: 	MessageNotUnderstood: ByteString>>shout
		resumeValue: 	nil
	Receiver's instance variables: 
'Don"t panic'

StringTest>>testShout
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


StringTest(TestCase)>>performTest
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 
		each: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(StringTest>>#testShout)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each debug.
self announceTest: each.
self changed: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(StringTest>>#testShout nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: eac...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>debug
		startpc: 	48
		numArgs: 	0


TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		anArg: 	a TestSuite
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		firstArg: 	a TestSuite
		secondArg: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 e...etc...
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>ensure:
	Receiver: [ aBlock cull: aTestSuite cull: result ]
	Arguments and temporary variables: 
		aBlock: 	[ aTestSuite unsubscribe: TestAnnouncement ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>executeSuite:as:
		startpc: 	49
		numArgs: 	0


TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		event: 	[(569@399) mouseUp 3154915 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		evt: 	[(569@399) mouseUp 3154915 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(569@399) mouseUp 3154915 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(569@399) mouseUp 3154915 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		timeStamp: 	3154915
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(569@399)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(569@399) mouseUp 3154915 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(569@399) mouseUp 3154915 nil]
		aMorph: 	a PluggableListMorph(937426944)
		localEvt: 	[(569@399) mouseUp 3154915 nil]
		index: 	2
		child: 	a TransformMorph(172490752)
		morphs: 	an Array(a TransformMorph(172490752))
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(569@399) mouseUp 3154915 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(569@399) mouseUp 3154915 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	3154915
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(569@399)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(569@399) mouseUp 3154915 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(569@399) mouseUp 3154915 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(569@399) mouseUp 3154915 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(569@399) mouseUp 3154915 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(569@399) mouseUp 3154915 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(569@399) mouseUp 3154915 nil]
		focusHolder: 	a PluggableListMorph(937426944)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(569@399) corner: (585@415)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(569@399) corner: (585@415)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(937426944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(569@399) mouseOver nil nil]
		targetOffset: 	(62.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3154915 569 399 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #shout
StringTest>>testShout
StringTest(TestCase)>>performTest
[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
BlockClosure>>ensure:
StringTest(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
BlockClosure>>ensure:
StringTest(TestCase)>>debug
[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
OrderedCollection>>do:
[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
BlockClosure>>ensure:
TestSuite>>debug
[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
BlockClosure>>ensure:
TestRunner>>executeSuite:as:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>shout
27 October 2015 6:04:22.750251 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>doesNotUnderstand: #shout
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 
		aMessage: 	shout
		exception: 	MessageNotUnderstood: ByteString>>shout
		resumeValue: 	nil
	Receiver's instance variables: 
'Don"t panic'

StringTest>>testShout
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


StringTest(TestCase)>>performTest
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 
		each: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(StringTest>>#testShout)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each debug.
self announceTest: each.
self changed: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(StringTest>>#testShout nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: eac...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>debug
		startpc: 	48
		numArgs: 	0


TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		anArg: 	a TestSuite
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		firstArg: 	a TestSuite
		secondArg: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 e...etc...
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>ensure:
	Receiver: [ aBlock cull: aTestSuite cull: result ]
	Arguments and temporary variables: 
		aBlock: 	[ aTestSuite unsubscribe: TestAnnouncement ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>executeSuite:as:
		startpc: 	49
		numArgs: 	0


TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		event: 	[(606@389) mouseUp 3218835 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		evt: 	[(606@389) mouseUp 3218835 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(606@389) mouseUp 3218835 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(606@389) mouseUp 3218835 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		timeStamp: 	3218835
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(606@389)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(606@389) mouseUp 3218835 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(606@389) mouseUp 3218835 nil]
		aMorph: 	a PluggableListMorph(937426944)
		localEvt: 	[(606@389) mouseUp 3218835 nil]
		index: 	2
		child: 	a TransformMorph(172490752)
		morphs: 	an Array(a TransformMorph(172490752))
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(606@389) mouseUp 3218835 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(606@389) mouseUp 3218835 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	3218835
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(606@389)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(606@389) mouseUp 3218835 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(606@389) mouseUp 3218835 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(606@389) mouseUp 3218835 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(606@389) mouseUp 3218835 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(606@389) mouseUp 3218835 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(606@389) mouseUp 3218835 nil]
		focusHolder: 	a PluggableListMorph(937426944)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(606@389) corner: (622@405)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(606@389) corner: (622@405)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(937426944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(606@389) mouseUp 3218835 nil]
		targetOffset: 	(99.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3218835 606 389 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #shout
StringTest>>testShout
StringTest(TestCase)>>performTest
[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
BlockClosure>>ensure:
StringTest(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
BlockClosure>>ensure:
StringTest(TestCase)>>debug
[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
OrderedCollection>>do:
[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
BlockClosure>>ensure:
TestSuite>>debug
[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
BlockClosure>>ensure:
TestRunner>>executeSuite:as:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>shout
27 October 2015 6:04:23.656251 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>doesNotUnderstand: #shout
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 
		aMessage: 	shout
		exception: 	MessageNotUnderstood: ByteString>>shout
		resumeValue: 	nil
	Receiver's instance variables: 
'Don"t panic'

StringTest>>testShout
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


StringTest(TestCase)>>performTest
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 
		each: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(StringTest>>#testShout)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each debug.
self announceTest: each.
self changed: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(StringTest>>#testShout nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: eac...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>debug
		startpc: 	48
		numArgs: 	0


TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		anArg: 	a TestSuite
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		firstArg: 	a TestSuite
		secondArg: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 e...etc...
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>ensure:
	Receiver: [ aBlock cull: aTestSuite cull: result ]
	Arguments and temporary variables: 
		aBlock: 	[ aTestSuite unsubscribe: TestAnnouncement ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>executeSuite:as:
		startpc: 	49
		numArgs: 	0


TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		event: 	[(605@391) mouseUp 3219755 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		evt: 	[(605@391) mouseUp 3219755 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(605@391) mouseUp 3219755 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(605@391) mouseUp 3219755 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		timeStamp: 	3219755
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(605@391)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(605@391) mouseUp 3219755 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(605@391) mouseUp 3219755 nil]
		aMorph: 	a PluggableListMorph(937426944)
		localEvt: 	[(605@391) mouseUp 3219755 nil]
		index: 	2
		child: 	a TransformMorph(172490752)
		morphs: 	an Array(a TransformMorph(172490752))
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(605@391) mouseUp 3219755 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(605@391) mouseUp 3219755 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	3219755
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(605@391)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(605@391) mouseUp 3219755 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(605@391) mouseUp 3219755 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(605@391) mouseUp 3219755 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(605@391) mouseUp 3219755 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(605@391) mouseUp 3219755 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(605@391) mouseUp 3219755 nil]
		focusHolder: 	a PluggableListMorph(937426944)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(605@391) corner: (621@407)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(605@391) corner: (621@407)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(937426944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(605@391) mouseUp 3219755 nil]
		targetOffset: 	(98.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3219755 605 391 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #shout
StringTest>>testShout
StringTest(TestCase)>>performTest
[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
BlockClosure>>ensure:
StringTest(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
BlockClosure>>ensure:
StringTest(TestCase)>>debug
[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
OrderedCollection>>do:
[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
BlockClosure>>ensure:
TestSuite>>debug
[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
BlockClosure>>ensure:
TestRunner>>executeSuite:as:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>shout
27 October 2015 6:04:35.54426 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>doesNotUnderstand: #shout
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 
		aMessage: 	shout
		exception: 	MessageNotUnderstood: ByteString>>shout
		resumeValue: 	nil
	Receiver's instance variables: 
'Don"t panic'

StringTest>>testShout
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


StringTest(TestCase)>>performTest
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 
		each: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(StringTest>>#testShout)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each debug.
self announceTest: each.
self changed: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(StringTest>>#testShout nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: eac...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>debug
		startpc: 	48
		numArgs: 	0


TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		anArg: 	a TestSuite
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		firstArg: 	a TestSuite
		secondArg: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 e...etc...
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>ensure:
	Receiver: [ aBlock cull: aTestSuite cull: result ]
	Arguments and temporary variables: 
		aBlock: 	[ aTestSuite unsubscribe: TestAnnouncement ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>executeSuite:as:
		startpc: 	49
		numArgs: 	0


TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		event: 	[(591@394) mouseUp 3231611 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		evt: 	[(591@394) mouseUp 3231611 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3231611 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(591@394) mouseUp 3231611 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		timeStamp: 	3231611
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(591@394)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3231611 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3231611 nil]
		aMorph: 	a PluggableListMorph(937426944)
		localEvt: 	[(591@394) mouseUp 3231611 nil]
		index: 	2
		child: 	a TransformMorph(172490752)
		morphs: 	an Array(a TransformMorph(172490752))
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3231611 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(591@394) mouseUp 3231611 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	3231611
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(591@394)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3231611 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3231611 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3231611 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3231611 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3231611 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3231611 nil]
		focusHolder: 	a PluggableListMorph(937426944)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(591@394) corner: (607@410)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(591@394) corner: (607@410)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(937426944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(591@394) mouseUp 3231611 nil]
		targetOffset: 	(84.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3231611 591 394 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #shout
StringTest>>testShout
StringTest(TestCase)>>performTest
[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
BlockClosure>>ensure:
StringTest(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
BlockClosure>>ensure:
StringTest(TestCase)>>debug
[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
OrderedCollection>>do:
[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
BlockClosure>>ensure:
TestSuite>>debug
[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
BlockClosure>>ensure:
TestRunner>>executeSuite:as:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>shout
27 October 2015 6:04:36.226259 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>doesNotUnderstand: #shout
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 
		aMessage: 	shout
		exception: 	MessageNotUnderstood: ByteString>>shout
		resumeValue: 	nil
	Receiver's instance variables: 
'Don"t panic'

StringTest>>testShout
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


StringTest(TestCase)>>performTest
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 
		each: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(StringTest>>#testShout)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each debug.
self announceTest: each.
self changed: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(StringTest>>#testShout nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: eac...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>debug
		startpc: 	48
		numArgs: 	0


TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		anArg: 	a TestSuite
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		firstArg: 	a TestSuite
		secondArg: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 e...etc...
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>ensure:
	Receiver: [ aBlock cull: aTestSuite cull: result ]
	Arguments and temporary variables: 
		aBlock: 	[ aTestSuite unsubscribe: TestAnnouncement ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>executeSuite:as:
		startpc: 	49
		numArgs: 	0


TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		event: 	[(591@394) mouseUp 3232291 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		evt: 	[(591@394) mouseUp 3232291 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3232291 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(591@394) mouseUp 3232291 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		timeStamp: 	3232291
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(591@394)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3232291 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3232291 nil]
		aMorph: 	a PluggableListMorph(937426944)
		localEvt: 	[(591@394) mouseUp 3232291 nil]
		index: 	2
		child: 	a TransformMorph(172490752)
		morphs: 	an Array(a TransformMorph(172490752))
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3232291 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(591@394) mouseUp 3232291 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	3232291
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(591@394)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3232291 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3232291 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3232291 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3232291 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3232291 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(591@394) mouseUp 3232291 nil]
		focusHolder: 	a PluggableListMorph(937426944)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(591@394) corner: (607@410)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(591@394) corner: (607@410)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(937426944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(591@394) mouseOver nil nil]
		targetOffset: 	(84.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3232291 591 394 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #shout
StringTest>>testShout
StringTest(TestCase)>>performTest
[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
BlockClosure>>ensure:
StringTest(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
BlockClosure>>ensure:
StringTest(TestCase)>>debug
[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
OrderedCollection>>do:
[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
BlockClosure>>ensure:
TestSuite>>debug
[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
BlockClosure>>ensure:
TestRunner>>executeSuite:as:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ShouldBeImplemented: #shout should have been implemented in ByteString
27 October 2015 6:05:24.882258 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>shouldBeImplemented
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'Don"t panic'

ByteString(String)>>shout
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'Don"t panic'

StringTest>>testShout
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


StringTest(TestCase)>>performTest
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 
		each: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(StringTest>>#testShout)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each debug.
self announceTest: each.
self changed: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(StringTest>>#testShout nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: eac...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>debug
		startpc: 	48
		numArgs: 	0


TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		anArg: 	a TestSuite
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		firstArg: 	a TestSuite
		secondArg: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 e...etc...
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>ensure:
	Receiver: [ aBlock cull: aTestSuite cull: result ]
	Arguments and temporary variables: 
		aBlock: 	[ aTestSuite unsubscribe: TestAnnouncement ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>executeSuite:as:
		startpc: 	49
		numArgs: 	0


TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		event: 	[(597@396) mouseUp 3280947 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		evt: 	[(597@396) mouseUp 3280947 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3280947 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(597@396) mouseUp 3280947 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		timeStamp: 	3280947
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(597@396)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3280947 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3280947 nil]
		aMorph: 	a PluggableListMorph(937426944)
		localEvt: 	[(597@396) mouseUp 3280947 nil]
		index: 	2
		child: 	a TransformMorph(172490752)
		morphs: 	an Array(a TransformMorph(172490752))
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3280947 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(597@396) mouseUp 3280947 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	3280947
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(597@396)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3280947 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3280947 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3280947 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3280947 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3280947 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil



--- The full stack ---
ByteString(Object)>>shouldBeImplemented
ByteString(String)>>shout
StringTest>>testShout
StringTest(TestCase)>>performTest
[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
BlockClosure>>ensure:
StringTest(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
BlockClosure>>ensure:
StringTest(TestCase)>>debug
[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
OrderedCollection>>do:
[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
BlockClosure>>ensure:
TestSuite>>debug
[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
BlockClosure>>ensure:
TestRunner>>executeSuite:as:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ShouldBeImplemented: #shout should have been implemented in ByteString
27 October 2015 6:05:25.612251 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>shouldBeImplemented
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'Don"t panic'

ByteString(String)>>shout
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'Don"t panic'

StringTest>>testShout
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


StringTest(TestCase)>>performTest
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 
		each: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(StringTest>>#testShout)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each debug.
self announceTest: each.
self changed: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(StringTest>>#testShout nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: eac...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>debug
		startpc: 	48
		numArgs: 	0


TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		anArg: 	a TestSuite
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		firstArg: 	a TestSuite
		secondArg: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 e...etc...
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>ensure:
	Receiver: [ aBlock cull: aTestSuite cull: result ]
	Arguments and temporary variables: 
		aBlock: 	[ aTestSuite unsubscribe: TestAnnouncement ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>executeSuite:as:
		startpc: 	49
		numArgs: 	0


TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		event: 	[(597@396) mouseUp 3281699 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		evt: 	[(597@396) mouseUp 3281699 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3281699 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(597@396) mouseUp 3281699 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		timeStamp: 	3281699
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(597@396)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3281699 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3281699 nil]
		aMorph: 	a PluggableListMorph(937426944)
		localEvt: 	[(597@396) mouseUp 3281699 nil]
		index: 	2
		child: 	a TransformMorph(172490752)
		morphs: 	an Array(a TransformMorph(172490752))
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3281699 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(597@396) mouseUp 3281699 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	3281699
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(597@396)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3281699 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3281699 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3281699 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3281699 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(597@396) mouseUp 3281699 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil



--- The full stack ---
ByteString(Object)>>shouldBeImplemented
ByteString(String)>>shout
StringTest>>testShout
StringTest(TestCase)>>performTest
[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
BlockClosure>>ensure:
StringTest(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
BlockClosure>>ensure:
StringTest(TestCase)>>debug
[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
OrderedCollection>>do:
[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
BlockClosure>>ensure:
TestSuite>>debug
[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
BlockClosure>>ensure:
TestRunner>>executeSuite:as:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ShouldBeImplemented: #shout should have been implemented in ByteString
27 October 2015 6:05:49.328257 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>shouldBeImplemented
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'Don"t panic'

ByteString(String)>>shout
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'Don"t panic'

StringTest>>testShout
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


StringTest(TestCase)>>performTest
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 
		each: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(StringTest>>#testShout)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each debug.
self announceTest: each.
self changed: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(StringTest>>#testShout nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: eac...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>debug
		startpc: 	48
		numArgs: 	0


TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		anArg: 	a TestSuite
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		firstArg: 	a TestSuite
		secondArg: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 e...etc...
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>ensure:
	Receiver: [ aBlock cull: aTestSuite cull: result ]
	Arguments and temporary variables: 
		aBlock: 	[ aTestSuite unsubscribe: TestAnnouncement ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>executeSuite:as:
		startpc: 	49
		numArgs: 	0


TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		event: 	[(600@393) mouseUp 3305411 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		evt: 	[(600@393) mouseUp 3305411 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(600@393) mouseUp 3305411 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(600@393) mouseUp 3305411 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		timeStamp: 	3305411
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(600@393)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(600@393) mouseUp 3305411 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(600@393) mouseUp 3305411 nil]
		aMorph: 	a PluggableListMorph(937426944)
		localEvt: 	[(600@393) mouseUp 3305411 nil]
		index: 	2
		child: 	a TransformMorph(172490752)
		morphs: 	an Array(a TransformMorph(172490752))
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(600@393) mouseUp 3305411 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(600@393) mouseUp 3305411 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	3305411
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(600@393)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(600@393) mouseUp 3305411 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(600@393) mouseUp 3305411 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(600@393) mouseUp 3305411 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(600@393) mouseUp 3305411 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(600@393) mouseUp 3305411 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil



--- The full stack ---
ByteString(Object)>>shouldBeImplemented
ByteString(String)>>shout
StringTest>>testShout
StringTest(TestCase)>>performTest
[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
BlockClosure>>ensure:
StringTest(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
BlockClosure>>ensure:
StringTest(TestCase)>>debug
[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
OrderedCollection>>do:
[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
BlockClosure>>ensure:
TestSuite>>debug
[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
BlockClosure>>ensure:
TestRunner>>executeSuite:as:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ShouldBeImplemented: #shout should have been implemented in ByteString
27 October 2015 6:06:09.122259 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>shouldBeImplemented
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'Don"t panic'

ByteString(String)>>shout
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'Don"t panic'

StringTest>>testShout
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


StringTest(TestCase)>>performTest
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 
		each: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(StringTest>>#testShout)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each debug.
self announceTest: each.
self changed: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(StringTest>>#testShout nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: eac...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>debug
		startpc: 	48
		numArgs: 	0


TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		anArg: 	a TestSuite
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		firstArg: 	a TestSuite
		secondArg: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 e...etc...
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>ensure:
	Receiver: [ aBlock cull: aTestSuite cull: result ]
	Arguments and temporary variables: 
		aBlock: 	[ aTestSuite unsubscribe: TestAnnouncement ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>executeSuite:as:
		startpc: 	49
		numArgs: 	0


TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		event: 	[(580@394) mouseUp 3325203 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		evt: 	[(580@394) mouseUp 3325203 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3325203 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(580@394) mouseUp 3325203 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		timeStamp: 	3325203
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(580@394)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3325203 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3325203 nil]
		aMorph: 	a PluggableListMorph(937426944)
		localEvt: 	[(580@394) mouseUp 3325203 nil]
		index: 	2
		child: 	a TransformMorph(172490752)
		morphs: 	an Array(a TransformMorph(172490752))
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3325203 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(580@394) mouseUp 3325203 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	3325203
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(580@394)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3325203 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3325203 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3325203 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3325203 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3325203 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil



--- The full stack ---
ByteString(Object)>>shouldBeImplemented
ByteString(String)>>shout
StringTest>>testShout
StringTest(TestCase)>>performTest
[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
BlockClosure>>ensure:
StringTest(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
BlockClosure>>ensure:
StringTest(TestCase)>>debug
[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
OrderedCollection>>do:
[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
BlockClosure>>ensure:
TestSuite>>debug
[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
BlockClosure>>ensure:
TestRunner>>executeSuite:as:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ShouldBeImplemented: #shout should have been implemented in ByteString
27 October 2015 6:06:09.90225 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>shouldBeImplemented
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'Don"t panic'

ByteString(String)>>shout
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'Don"t panic'

StringTest>>testShout
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


StringTest(TestCase)>>performTest
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 
		each: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(StringTest>>#testShout)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each debug.
self announceTest: each.
self changed: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(StringTest>>#testShout nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: eac...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>debug
		startpc: 	48
		numArgs: 	0


TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		anArg: 	a TestSuite
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		firstArg: 	a TestSuite
		secondArg: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 e...etc...
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>ensure:
	Receiver: [ aBlock cull: aTestSuite cull: result ]
	Arguments and temporary variables: 
		aBlock: 	[ aTestSuite unsubscribe: TestAnnouncement ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>executeSuite:as:
		startpc: 	49
		numArgs: 	0


TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		event: 	[(580@394) mouseUp 3326003 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		evt: 	[(580@394) mouseUp 3326003 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326003 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(580@394) mouseUp 3326003 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		timeStamp: 	3326003
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(580@394)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326003 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326003 nil]
		aMorph: 	a PluggableListMorph(937426944)
		localEvt: 	[(580@394) mouseUp 3326003 nil]
		index: 	2
		child: 	a TransformMorph(172490752)
		morphs: 	an Array(a TransformMorph(172490752))
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326003 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(580@394) mouseUp 3326003 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	3326003
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(580@394)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326003 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326003 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326003 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326003 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326003 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil



--- The full stack ---
ByteString(Object)>>shouldBeImplemented
ByteString(String)>>shout
StringTest>>testShout
StringTest(TestCase)>>performTest
[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
BlockClosure>>ensure:
StringTest(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
BlockClosure>>ensure:
StringTest(TestCase)>>debug
[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
OrderedCollection>>do:
[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
BlockClosure>>ensure:
TestSuite>>debug
[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
BlockClosure>>ensure:
TestRunner>>executeSuite:as:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ShouldBeImplemented: #shout should have been implemented in ByteString
27 October 2015 6:06:10.268254 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>shouldBeImplemented
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'Don"t panic'

ByteString(String)>>shout
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'Don"t panic'

StringTest>>testShout
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


StringTest(TestCase)>>performTest
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 
		each: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(StringTest>>#testShout)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each debug.
self announceTest: each.
self changed: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(StringTest>>#testShout nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: eac...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>debug
		startpc: 	48
		numArgs: 	0


TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		anArg: 	a TestSuite
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		firstArg: 	a TestSuite
		secondArg: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 e...etc...
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>ensure:
	Receiver: [ aBlock cull: aTestSuite cull: result ]
	Arguments and temporary variables: 
		aBlock: 	[ aTestSuite unsubscribe: TestAnnouncement ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>executeSuite:as:
		startpc: 	49
		numArgs: 	0


TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		event: 	[(580@394) mouseUp 3326355 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		evt: 	[(580@394) mouseUp 3326355 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326355 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(580@394) mouseUp 3326355 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		timeStamp: 	3326355
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(580@394)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326355 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326355 nil]
		aMorph: 	a PluggableListMorph(937426944)
		localEvt: 	[(580@394) mouseUp 3326355 nil]
		index: 	2
		child: 	a TransformMorph(172490752)
		morphs: 	an Array(a TransformMorph(172490752))
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326355 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(580@394) mouseUp 3326355 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	3326355
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(580@394)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326355 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326355 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326355 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326355 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326355 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil



--- The full stack ---
ByteString(Object)>>shouldBeImplemented
ByteString(String)>>shout
StringTest>>testShout
StringTest(TestCase)>>performTest
[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
BlockClosure>>ensure:
StringTest(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
BlockClosure>>ensure:
StringTest(TestCase)>>debug
[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
OrderedCollection>>do:
[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
BlockClosure>>ensure:
TestSuite>>debug
[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
BlockClosure>>ensure:
TestRunner>>executeSuite:as:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ShouldBeImplemented: #shout should have been implemented in ByteString
27 October 2015 6:06:10.594251 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteString(Object)>>shouldBeImplemented
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'Don"t panic'

ByteString(String)>>shout
	Receiver: 'Don"t panic'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'Don"t panic'

StringTest>>testShout
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


StringTest(TestCase)>>performTest
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ 
self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ 
self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	nil
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


BlockClosure>>ensure:
	Receiver: [ (self class selector: testSelector) runCase ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	nil
		emptyString: 	nil
		elementInNonEmpty: 	nil
		notIn: 	nil
		nonEmpty1element: 	nil
		withoutEqualElements: 	nil
		collectionNotIncluded: 	nil
		indexInNonEmptyArray: 	nil
		sameAtEndAndBegining: 	nil
		nonEmpty5ElementsSorted: 	nil
		unsortedCollection: 	nil
		subcollection3ElementsSorted: 	nil
		arrayWithCharacters: 	nil


[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 
		each: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(StringTest>>#testShout)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each debug.
self announceTest: each.
self changed: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(StringTest>>#testShout nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: eac...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>debug
		startpc: 	48
		numArgs: 	0


TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		anArg: 	a TestSuite
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		firstArg: 	a TestSuite
		secondArg: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 e...etc...
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


BlockClosure>>ensure:
	Receiver: [ aBlock cull: aTestSuite cull: result ]
	Arguments and temporary variables: 
		aBlock: 	[ aTestSuite unsubscribe: TestAnnouncement ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>executeSuite:as:
		startpc: 	49
		numArgs: 	0


TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(475004928) a SearchMorph(563085312...etc...
		categories: 	#(#'AST-Tests-Core' #'Announcements-Tests-Core-Tests' #'AsmJit-Test...etc...
		categoryIndex: 	13
		categoriesSelected: 	a Set(#'CollectionsTests-Strings')
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(SymbolTest StringTest ByteSymbolTest WideStringTest Char...etc...
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3623432584
		result: 	678 run, 677 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		categoryPattern: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		event: 	[(580@394) mouseUp 3326683 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		evt: 	[(580@394) mouseUp 3326683 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326683 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(580@394) mouseUp 3326683 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		timeStamp: 	3326683
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(580@394)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326683 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326683 nil]
		aMorph: 	a PluggableListMorph(937426944)
		localEvt: 	[(580@394) mouseUp 3326683 nil]
		index: 	2
		child: 	a TransformMorph(172490752)
		morphs: 	an Array(a TransformMorph(172490752))
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326683 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(580@394) mouseUp 3326683 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	3326683
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(580@394)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326683 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326683 nil]
		aMorph: 	a PluggableListMorph(937426944)
	Receiver's instance variables: 
		morph: 	nil


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326683 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326683 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(937426944)
	Arguments and temporary variables: 
		anEvent: 	[(580@394) mouseUp 3326683 nil]
	Receiver's instance variables: 
		bounds: 	(507.0@384.0) corner: (848.0@583.0)
		owner: 	a SystemWindow(475004928)
		submorphs: 	an Array(a TransformMorph(172490752))
		fullBounds: 	(507@384) corner: (848@583)
		color: 	Color white
		extension: 	a MorphExtension (225705984) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(969932800)
		scroller: 	a TransformMorph(172490752)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(583794688)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(239599616)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil



--- The full stack ---
ByteString(Object)>>shouldBeImplemented
ByteString(String)>>shout
StringTest>>testShout
StringTest(TestCase)>>performTest
[ 
self setUp.
self performTest ] in StringTest(TestCase)>>runCase
BlockClosure>>ensure:
StringTest(TestCase)>>runCase
[ (self class selector: testSelector) runCase ] in StringTest(TestCase)>>debug
BlockClosure>>ensure:
StringTest(TestCase)>>debug
[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
OrderedCollection>>do:
[ 
self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
BlockClosure>>ensure:
TestSuite>>debug
[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
BlockClosure>>ensure:
TestRunner>>executeSuite:as:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Rectangle>>bounds:
29 October 2015 4:42:46.016565 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Rectangle(Object)>>doesNotUnderstand: #bounds:
	Receiver: (0@0) corner: (16@16)
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: Rectangle>>bounds:
		resumeValue: 	nil
	Receiver's instance variables: 
		origin: 	(0@0)
		corner: 	(16@16)


Rectangle>>DoIt
	Receiver: (0@0) corner: (16@16)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		origin: 	(0@0)
		corner: 	(16@16)


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	(0@0) corner: (16@16)
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	(0@0) corner: (16@16)
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(390856704)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(390856704)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(994050048)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(390856704)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (348@50)
		owner: 	a TransformWithLayoutMorph(48234496)
		submorphs: 	an Array(a RubPrimarySelectionMorph(649854976) a RubCursor(813170688...etc...
		fullBounds: 	(0@0) corner: (348@50)
		color: 	Color transparent
		extension: 	a MorphExtension (862978048) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(9961472)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(813170688)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(520093696))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(994050048)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	1220190
		lastStepMessage: 	nil
		lastCycleTime: 	1220189
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(813170688)))
		lastAlarmTime: 	1220190
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(370409472) a GL...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	1220190
		lastStepMessage: 	nil
		lastCycleTime: 	1220189
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(813170688)))
		lastAlarmTime: 	1220190
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	1220190
		lastStepMessage: 	nil
		lastCycleTime: 	1220189
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(813170688)))
		lastAlarmTime: 	1220190
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(370409472) a GL...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Rectangle(Object)>>doesNotUnderstand: #bounds:
Rectangle>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOCell>>close
29 October 2015 4:44:25.252573 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

LOCell(Object)>>doesNotUnderstand: #close
	Receiver: a LOCell(441974784)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: LOCell>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(200.0@200.0) corner: (250.0@250.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a StringMorph(271843328)'')
		fullBounds: 	(200@200) corner: (250@250)
		color: 	Color paleYellow
		extension: 	a MorphExtension (504102912) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		label: 	a StringMorph(271843328)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	nil


LOCell>>DoIt
	Receiver: a LOCell(441974784)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(200.0@200.0) corner: (250.0@250.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a StringMorph(271843328)'')
		fullBounds: 	(200@200) corner: (250@250)
		color: 	Color paleYellow
		extension: 	a MorphExtension (504102912) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		label: 	a StringMorph(271843328)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ self close
		source: 	a ReadStream
		context: 	nil
		receiver: 	a LOCell(441974784)
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	a LOCell(441974784)
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(103546880)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(103546880)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1028915200)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(103546880)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (348@88)
		owner: 	a TransformWithLayoutMorph(77070336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(875036672) a RubCursor(554434560...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (568066048) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(38797312)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(554434560)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1037303808))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1028915200)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	1319325
		lastStepMessage: 	nil
		lastCycleTime: 	1319347
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(554434560)))
		lastAlarmTime: 	1319325
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a LOCell(441974784) a GLMSystemWi...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	1319325
		lastStepMessage: 	nil
		lastCycleTime: 	1319347
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(554434560)))
		lastAlarmTime: 	1319325
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	1319325
		lastStepMessage: 	nil
		lastCycleTime: 	1319347
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(554434560)))
		lastAlarmTime: 	1319325
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a LOCell(441974784) a GLMSystemWi...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOCell(Object)>>doesNotUnderstand: #close
LOCell>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>cellsPerSide
29 October 2015 5:00:58.328569 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

LOGame(Object)>>doesNotUnderstand: #cellsPerSide
	Receiver: a LOGame(99876864)
	Arguments and temporary variables: 
		aMessage: 	cellsPerSide
		exception: 	MessageNotUnderstood: LOGame>>cellsPerSide
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


LOGame>>initialize
	Receiver: a LOGame(99876864)
	Arguments and temporary variables: 
		sampleCell: 	nil
		width: 	nil
		height: 	nil
		n: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


LOGame class(Behavior)>>new
	Receiver: LOGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	BorderedMorph
		methodDict: 	a MethodDictionary(#initialize->LOGame>>#initialize )
		format: 	148
		layout: 	a FixedLayout
		instanceVariables: 	#(#cells)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ LOGame new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(438829056)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(438829056)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(891289600)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(438829056)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1013186560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(37224448) a RubCursor(921436160)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (916979712) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(974913536)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(921436160)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(936116224))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(891289600)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	2312413
		lastStepMessage: 	nil
		lastCycleTime: 	2312433
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(921436160)))
		lastAlarmTime: 	2312413
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(119799808) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	2312413
		lastStepMessage: 	nil
		lastCycleTime: 	2312433
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(921436160)))
		lastAlarmTime: 	2312413
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	2312413
		lastStepMessage: 	nil
		lastCycleTime: 	2312433
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(921436160)))
		lastAlarmTime: 	2312413
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(119799808) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #cellsPerSide
LOGame>>initialize
LOGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>cellsPerSide
29 October 2015 5:01:11.154565 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

LOGame(Object)>>doesNotUnderstand: #cellsPerSide
	Receiver: a LOGame(794296320)
	Arguments and temporary variables: 
		aMessage: 	cellsPerSide
		exception: 	MessageNotUnderstood: LOGame>>cellsPerSide
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


LOGame>>initialize
	Receiver: a LOGame(794296320)
	Arguments and temporary variables: 
		sampleCell: 	nil
		width: 	nil
		height: 	nil
		n: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


LOGame class(Behavior)>>new
	Receiver: LOGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	BorderedMorph
		methodDict: 	a MethodDictionary(#initialize->LOGame>>#initialize )
		format: 	148
		layout: 	a FixedLayout
		instanceVariables: 	#(#cells)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ LOGame new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(438829056)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(438829056)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(891289600)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(438829056)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1013186560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(37224448) a RubCursor(921436160)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (916979712) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(974913536)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(921436160)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(273678336))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(891289600)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	2325255
		lastStepMessage: 	nil
		lastCycleTime: 	2325275
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(921436160)))
		lastAlarmTime: 	2325255
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(119799808) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	2325255
		lastStepMessage: 	nil
		lastCycleTime: 	2325275
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(921436160)))
		lastAlarmTime: 	2325255
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	2325255
		lastStepMessage: 	nil
		lastCycleTime: 	2325275
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(921436160)))
		lastAlarmTime: 	2325255
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(119799808) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #cellsPerSide
LOGame>>initialize
LOGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
29 October 2015 5:30:40.718571 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		i: 	4
		j: 	4
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		i: 	4
		j: 	4
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(67633152)
	Arguments and temporary variables: 
		anEvent: 	[(230@175) mouseUp 4094785 nil]
	Receiver's instance variables: 
		bounds: 	(54.0@54.0) corner: (70.0@70.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(998506496)'')
		fullBounds: 	(54.0@54.0) corner: (70.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (129761280)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(998506496)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(67633152)
	Arguments and temporary variables: 
		anEvent: 	[(230@175) mouseUp 4094785 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(54.0@54.0) corner: (70.0@70.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(998506496)'')
		fullBounds: 	(54.0@54.0) corner: (70.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (129761280)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(998506496)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(230@175) mouseUp 4094785 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(67633152)
	Receiver's instance variables: 
		timeStamp: 	4094785
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(230@175)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(67633152)
	Arguments and temporary variables: 
		anEvent: 	[(230@175) mouseUp 4094785 nil]
	Receiver's instance variables: 
		bounds: 	(54.0@54.0) corner: (70.0@70.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(998506496)'')
		fullBounds: 	(54.0@54.0) corner: (70.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (129761280)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(998506496)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(67633152)
	Arguments and temporary variables: 
		anEvent: 	[(230@175) mouseUp 4094785 nil]
	Receiver's instance variables: 
		bounds: 	(54.0@54.0) corner: (70.0@70.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(998506496)'')
		fullBounds: 	(54.0@54.0) corner: (70.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (129761280)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(998506496)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(230@175) mouseUp 4094785 nil]
		focusHolder: 	a LOCell(67633152)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(229@172.0) corner: (245@188.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(229@172.0) corner: (245@188.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(229@172) mouseOver nil nil]
		targetOffset: 	(12.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4094873 229 172 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(230@175) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a LOGame(1012924416) a GLMSystemW...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(230@175) mouseUp 4094785 nil]
		focusHolder: 	a LOCell(67633152)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(229@172.0) corner: (245@188.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(229@172.0) corner: (245@188.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(229@172) mouseOver nil nil]
		targetOffset: 	(12.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4094873 229 172 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(230@175) mouseUp 4094785 nil]
		focusHolder: 	a LOCell(67633152)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(229@172.0) corner: (245@188.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(229@172.0) corner: (245@188.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(229@172) mouseOver nil nil]
		targetOffset: 	(12.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4094873 229 172 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(230@175) mouseUp 4094785 nil]
	Receiver's instance variables: 
		bounds: 	(229@172.0) corner: (245@188.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(229@172.0) corner: (245@188.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(229@172) mouseOver nil nil]
		targetOffset: 	(12.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4094873 229 172 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(230@175) mouseUp 4094785 nil]
		evt: 	[(230@175) mouseUp 4094785 nil]
	Receiver's instance variables: 
		bounds: 	(229@172.0) corner: (245@188.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(229@172.0) corner: (245@188.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(229@172) mouseOver nil nil]
		targetOffset: 	(12.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4094873 229 172 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(230@175) mouseUp 4094785 nil]
		evtBuf: 	#(1 4094785 230 175 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(229@172.0) corner: (245@188.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(229@172.0) corner: (245@188.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(229@172) mouseOver nil nil]
		targetOffset: 	(12.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4094873 229 172 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4067582
		lastStepMessage: 	nil
		lastCycleTime: 	4094873
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	4094873
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4067582
		lastStepMessage: 	nil
		lastCycleTime: 	4094873
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	4094873
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4067582
		lastStepMessage: 	nil
		lastCycleTime: 	4094873
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	4094873
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4067582
		lastStepMessage: 	nil
		lastCycleTime: 	4094873
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	4094873
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a LOGame(1012924416) a GLMSystemW...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
29 October 2015 5:31:00.386575 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		i: 	5
		j: 	7
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(984875008)
	Arguments and temporary variables: 
		anEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
	Receiver's instance variables: 
		bounds: 	(70.0@102.0) corner: (86.0@118.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(757596160)'')
		fullBounds: 	(70.0@102.0) corner: (86.0@122.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (1034944512)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(757596160)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(984875008)
	Arguments and temporary variables: 
		anEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(70.0@102.0) corner: (86.0@118.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(757596160)'')
		fullBounds: 	(70.0@102.0) corner: (86.0@122.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (1034944512)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(757596160)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(82@114) mouseUp SHIFT 4114473 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(984875008)
	Receiver's instance variables: 
		timeStamp: 	4114473
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	8
		position: 	(82@114)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(984875008)
	Arguments and temporary variables: 
		anEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
	Receiver's instance variables: 
		bounds: 	(70.0@102.0) corner: (86.0@118.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(757596160)'')
		fullBounds: 	(70.0@102.0) corner: (86.0@122.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (1034944512)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(757596160)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(984875008)
	Arguments and temporary variables: 
		anEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
	Receiver's instance variables: 
		bounds: 	(70.0@102.0) corner: (86.0@118.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(757596160)'')
		fullBounds: 	(70.0@102.0) corner: (86.0@122.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (1034944512)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(757596160)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
		focusHolder: 	a LOCell(984875008)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(82@114.0) corner: (98@130.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(82@114.0) corner: (98@130.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
		targetOffset: 	(12.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4114473 82 114 0 1 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	1


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(82@114) mouseOver SHIFT red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(970194944) a LO...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
		focusHolder: 	a LOCell(984875008)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(82@114.0) corner: (98@130.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(82@114.0) corner: (98@130.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
		targetOffset: 	(12.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4114473 82 114 0 1 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	1


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
		focusHolder: 	a LOCell(984875008)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(82@114.0) corner: (98@130.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(82@114.0) corner: (98@130.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
		targetOffset: 	(12.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4114473 82 114 0 1 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	1


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
	Receiver's instance variables: 
		bounds: 	(82@114.0) corner: (98@130.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(82@114.0) corner: (98@130.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
		targetOffset: 	(12.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4114473 82 114 0 1 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	1


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
		evt: 	[(82@114) mouseUp SHIFT 4114473 nil]
	Receiver's instance variables: 
		bounds: 	(82@114.0) corner: (98@130.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(82@114.0) corner: (98@130.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
		targetOffset: 	(12.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4114473 82 114 0 1 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	1


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(82@114) mouseUp SHIFT 4114473 nil]
		evtBuf: 	#(1 4114473 82 114 0 1 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(82@114.0) corner: (98@130.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(82@114.0) corner: (98@130.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(82@114) mouseUp SHIFT 4114473 nil]
		targetOffset: 	(12.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4114473 82 114 0 1 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	1


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4112392
		lastStepMessage: 	nil
		lastCycleTime: 	4114491
		alarms: 	a Heap()
		lastAlarmTime: 	4114469
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4112392
		lastStepMessage: 	nil
		lastCycleTime: 	4114491
		alarms: 	a Heap()
		lastAlarmTime: 	4114469
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4112392
		lastStepMessage: 	nil
		lastCycleTime: 	4114491
		alarms: 	a Heap()
		lastAlarmTime: 	4114469
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4112392
		lastStepMessage: 	nil
		lastCycleTime: 	4114491
		alarms: 	a Heap()
		lastAlarmTime: 	4114469
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(970194944) a LO...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
29 October 2015 5:31:06.508575 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		i: 	6
		j: 	8
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		i: 	6
		j: 	8
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(483131392)
	Arguments and temporary variables: 
		anEvent: 	[(110@85) mouseUp SHIFT 4120601 nil]
	Receiver's instance variables: 
		bounds: 	(86.0@118.0) corner: (102.0@134.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(340262912)'')
		fullBounds: 	(86.0@118.0) corner: (102.0@138.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (545259520) [other:  (hasHalo -> true)]
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(340262912)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(483131392)
	Arguments and temporary variables: 
		anEvent: 	[(110@85) mouseUp SHIFT 4120601 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(86.0@118.0) corner: (102.0@134.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(340262912)'')
		fullBounds: 	(86.0@118.0) corner: (102.0@138.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (545259520) [other:  (hasHalo -> true)]
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(340262912)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(110@85) mouseUp SHIFT 4120601 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(483131392)
	Receiver's instance variables: 
		timeStamp: 	4120601
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	8
		position: 	(110@85)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(483131392)
	Arguments and temporary variables: 
		anEvent: 	[(110@85) mouseUp SHIFT 4120601 nil]
	Receiver's instance variables: 
		bounds: 	(86.0@118.0) corner: (102.0@134.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(340262912)'')
		fullBounds: 	(86.0@118.0) corner: (102.0@138.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (545259520) [other:  (hasHalo -> true)]
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(340262912)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(483131392)
	Arguments and temporary variables: 
		anEvent: 	[(110@85) mouseUp SHIFT 4120601 nil]
	Receiver's instance variables: 
		bounds: 	(86.0@118.0) corner: (102.0@134.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(340262912)'')
		fullBounds: 	(86.0@118.0) corner: (102.0@138.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (545259520) [other:  (hasHalo -> true)]
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(340262912)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(110@85) mouseUp SHIFT 4120601 nil]
		focusHolder: 	a LOCell(483131392)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(110@85.0) corner: (126@101.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(110@85.0) corner: (126@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (halo -> a HaloMorph(415498240...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(110@85) mouseUp SHIFT 4120601 nil]
		targetOffset: 	(9.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4120601 110 85 0 1 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	1


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(110@85) mouseOver SHIFT red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a HaloMorph(415498240) a TaskbarMorph(984088576) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(110@85) mouseUp SHIFT 4120601 nil]
		focusHolder: 	a LOCell(483131392)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(110@85.0) corner: (126@101.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(110@85.0) corner: (126@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (halo -> a HaloMorph(415498240...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(110@85) mouseOver SHIFT nil nil]
		targetOffset: 	(9.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4120601 110 85 0 1 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	1


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(110@85) mouseUp SHIFT 4120601 nil]
		focusHolder: 	a LOCell(483131392)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(110@85.0) corner: (126@101.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(110@85.0) corner: (126@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (halo -> a HaloMorph(415498240...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(110@85) mouseOver SHIFT nil nil]
		targetOffset: 	(9.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4120601 110 85 0 1 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	1


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(110@85) mouseUp SHIFT 4120601 nil]
	Receiver's instance variables: 
		bounds: 	(110@85.0) corner: (126@101.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(110@85.0) corner: (126@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (halo -> a HaloMorph(415498240...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(110@85) mouseOver SHIFT nil nil]
		targetOffset: 	(9.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4120601 110 85 0 1 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	1


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(110@85) mouseUp SHIFT 4120601 nil]
		evt: 	[(110@85) mouseUp SHIFT 4120601 nil]
	Receiver's instance variables: 
		bounds: 	(110@85.0) corner: (126@101.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(110@85.0) corner: (126@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (halo -> a HaloMorph(415498240...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(110@85) mouseOver SHIFT nil nil]
		targetOffset: 	(9.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4120601 110 85 0 1 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	1


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(110@85) mouseUp SHIFT 4120601 nil]
		evtBuf: 	#(1 4120601 110 85 0 1 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(110@85.0) corner: (126@101.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(110@85.0) corner: (126@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928) [other:  (halo -> a HaloMorph(415498240...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(110@85) mouseOver SHIFT nil nil]
		targetOffset: 	(9.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4120601 110 85 0 1 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	1


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a HaloMorph(415498240))(a HaloMorph(41...etc...
		lastStepTime: 	4120654
		lastStepMessage: 	nil
		lastCycleTime: 	4120654
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)) MorphicAlarm(#...etc...
		lastAlarmTime: 	4120654
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a HaloMorph(415498240))(a HaloMorph(41...etc...
		lastStepTime: 	4120654
		lastStepMessage: 	nil
		lastCycleTime: 	4120654
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)) MorphicAlarm(#...etc...
		lastAlarmTime: 	4120654
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a HaloMorph(415498240))(a HaloMorph(41...etc...
		lastStepTime: 	4120654
		lastStepMessage: 	nil
		lastCycleTime: 	4120654
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)) MorphicAlarm(#...etc...
		lastAlarmTime: 	4120654
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a HaloMorph(415498240))(a HaloMorph(41...etc...
		lastStepTime: 	4120654
		lastStepMessage: 	nil
		lastCycleTime: 	4120654
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)) MorphicAlarm(#...etc...
		lastAlarmTime: 	4120654
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a HaloMorph(415498240) a TaskbarMorph(984088576) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
29 October 2015 5:31:22.822575 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(293.0@673.0) corner: (455.0@835.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(293@673) corner: (455@838)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		i: 	4
		j: 	5
	Receiver's instance variables: 
		bounds: 	(293.0@673.0) corner: (455.0@835.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(293@673) corner: (455@838)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(293.0@673.0) corner: (455.0@835.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(293@673) corner: (455@838)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(596901888)
	Arguments and temporary variables: 
		anEvent: 	[(356@750) mouseUp 4136913 nil]
	Receiver's instance variables: 
		bounds: 	(342.0@738.0) corner: (358.0@754.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(369623040)'')
		fullBounds: 	(342.0@738.0) corner: (358.0@758.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (646971392)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(369623040)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(596901888)
	Arguments and temporary variables: 
		anEvent: 	[(356@750) mouseUp 4136913 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(342.0@738.0) corner: (358.0@754.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(369623040)'')
		fullBounds: 	(342.0@738.0) corner: (358.0@758.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (646971392)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(369623040)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(356@750) mouseUp 4136913 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(596901888)
	Receiver's instance variables: 
		timeStamp: 	4136913
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(356@750)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(596901888)
	Arguments and temporary variables: 
		anEvent: 	[(356@750) mouseUp 4136913 nil]
	Receiver's instance variables: 
		bounds: 	(342.0@738.0) corner: (358.0@754.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(369623040)'')
		fullBounds: 	(342.0@738.0) corner: (358.0@758.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (646971392)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(369623040)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(596901888)
	Arguments and temporary variables: 
		anEvent: 	[(356@750) mouseUp 4136913 nil]
	Receiver's instance variables: 
		bounds: 	(342.0@738.0) corner: (358.0@754.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(369623040)'')
		fullBounds: 	(342.0@738.0) corner: (358.0@758.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (646971392)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(369623040)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(356@750) mouseUp 4136913 nil]
		focusHolder: 	a LOCell(596901888)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(356@750.0) corner: (372@766.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(356@750.0) corner: (372@766.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(356@750) mouseOver nil nil]
		targetOffset: 	(14.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4136913 356 750 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(356@750) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(970194944) a LO...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(356@750) mouseUp 4136913 nil]
		focusHolder: 	a LOCell(596901888)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(356@750.0) corner: (372@766.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(356@750.0) corner: (372@766.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(356@750) mouseOver nil nil]
		targetOffset: 	(14.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4136913 356 750 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(356@750) mouseUp 4136913 nil]
		focusHolder: 	a LOCell(596901888)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(356@750.0) corner: (372@766.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(356@750.0) corner: (372@766.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(356@750) mouseOver nil nil]
		targetOffset: 	(14.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4136913 356 750 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(356@750) mouseUp 4136913 nil]
	Receiver's instance variables: 
		bounds: 	(356@750.0) corner: (372@766.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(356@750.0) corner: (372@766.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(356@750) mouseOver nil nil]
		targetOffset: 	(14.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4136913 356 750 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(356@750) mouseUp 4136913 nil]
		evt: 	[(356@750) mouseUp 4136913 nil]
	Receiver's instance variables: 
		bounds: 	(356@750.0) corner: (372@766.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(356@750.0) corner: (372@766.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(356@750) mouseOver nil nil]
		targetOffset: 	(14.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4136913 356 750 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(356@750) mouseUp 4136913 nil]
		evtBuf: 	#(1 4136913 356 750 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(356@750.0) corner: (372@766.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(356@750.0) corner: (372@766.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(356@750) mouseOver nil nil]
		targetOffset: 	(14.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4136913 356 750 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4135983
		lastStepMessage: 	nil
		lastCycleTime: 	4136948
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	4136948
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4135983
		lastStepMessage: 	nil
		lastCycleTime: 	4136948
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	4136948
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4135983
		lastStepMessage: 	nil
		lastCycleTime: 	4136948
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	4136948
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4135983
		lastStepMessage: 	nil
		lastCycleTime: 	4136948
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	4136948
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(970194944) a LO...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
29 October 2015 5:31:23.754575 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(293.0@673.0) corner: (455.0@835.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(293@673) corner: (455@838)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		i: 	5
		j: 	5
	Receiver's instance variables: 
		bounds: 	(293.0@673.0) corner: (455.0@835.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(293@673) corner: (455@838)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(293.0@673.0) corner: (455.0@835.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(293@673) corner: (455@838)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(22806528)
	Arguments and temporary variables: 
		anEvent: 	[(359@747) mouseUp 4137841 nil]
	Receiver's instance variables: 
		bounds: 	(358.0@738.0) corner: (374.0@754.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(869269504)'')
		fullBounds: 	(358.0@738.0) corner: (374.0@758.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (72876032)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(869269504)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(22806528)
	Arguments and temporary variables: 
		anEvent: 	[(359@747) mouseUp 4137841 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(358.0@738.0) corner: (374.0@754.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(869269504)'')
		fullBounds: 	(358.0@738.0) corner: (374.0@758.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (72876032)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(869269504)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(359@747) mouseUp 4137841 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(22806528)
	Receiver's instance variables: 
		timeStamp: 	4137841
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(359@747)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(22806528)
	Arguments and temporary variables: 
		anEvent: 	[(359@747) mouseUp 4137841 nil]
	Receiver's instance variables: 
		bounds: 	(358.0@738.0) corner: (374.0@754.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(869269504)'')
		fullBounds: 	(358.0@738.0) corner: (374.0@758.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (72876032)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(869269504)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(22806528)
	Arguments and temporary variables: 
		anEvent: 	[(359@747) mouseUp 4137841 nil]
	Receiver's instance variables: 
		bounds: 	(358.0@738.0) corner: (374.0@754.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(869269504)'')
		fullBounds: 	(358.0@738.0) corner: (374.0@758.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (72876032)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(869269504)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(359@747) mouseUp 4137841 nil]
		focusHolder: 	a LOCell(22806528)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(359@747.0) corner: (375@763.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(359@747.0) corner: (375@763.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(371195904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(359@747) mouseUp 4137841 nil]
		targetOffset: 	(1.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4137841 359 747 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(359@747) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(562298880) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(359@747) mouseUp 4137841 nil]
		focusHolder: 	a LOCell(22806528)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(359@747.0) corner: (375@763.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(359@747.0) corner: (375@763.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(371195904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(359@747) mouseUp 4137841 nil]
		targetOffset: 	(1.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4137841 359 747 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(359@747) mouseUp 4137841 nil]
		focusHolder: 	a LOCell(22806528)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(359@747.0) corner: (375@763.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(359@747.0) corner: (375@763.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(371195904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(359@747) mouseUp 4137841 nil]
		targetOffset: 	(1.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4137841 359 747 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(359@747) mouseUp 4137841 nil]
	Receiver's instance variables: 
		bounds: 	(359@747.0) corner: (375@763.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(359@747.0) corner: (375@763.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(371195904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(359@747) mouseUp 4137841 nil]
		targetOffset: 	(1.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4137841 359 747 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(359@747) mouseUp 4137841 nil]
		evt: 	[(359@747) mouseUp 4137841 nil]
	Receiver's instance variables: 
		bounds: 	(359@747.0) corner: (375@763.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(359@747.0) corner: (375@763.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(371195904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(359@747) mouseUp 4137841 nil]
		targetOffset: 	(1.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4137841 359 747 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(359@747) mouseUp 4137841 nil]
		evtBuf: 	#(1 4137841 359 747 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(359@747.0) corner: (375@763.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(359@747.0) corner: (375@763.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(371195904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(359@747) mouseUp 4137841 nil]
		targetOffset: 	(1.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4137841 359 747 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4135983
		lastStepMessage: 	nil
		lastCycleTime: 	4137859
		alarms: 	a Heap()
		lastAlarmTime: 	4137839
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4135983
		lastStepMessage: 	nil
		lastCycleTime: 	4137859
		alarms: 	a Heap()
		lastAlarmTime: 	4137839
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4135983
		lastStepMessage: 	nil
		lastCycleTime: 	4137859
		alarms: 	a Heap()
		lastAlarmTime: 	4137839
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4135983
		lastStepMessage: 	nil
		lastCycleTime: 	4137859
		alarms: 	a Heap()
		lastAlarmTime: 	4137839
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(562298880) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
29 October 2015 5:31:24.338574 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(293.0@673.0) corner: (455.0@835.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(293@673) corner: (455@838)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		i: 	5
		j: 	4
	Receiver's instance variables: 
		bounds: 	(293.0@673.0) corner: (455.0@835.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(293@673) corner: (455@838)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		i: 	5
		j: 	4
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(293.0@673.0) corner: (455.0@835.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(293@673) corner: (455@838)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(564658176)
	Arguments and temporary variables: 
		anEvent: 	[(370@736) mouseUp 4138441 nil]
	Receiver's instance variables: 
		bounds: 	(358.0@722.0) corner: (374.0@738.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(421789696)'')
		fullBounds: 	(358.0@722.0) corner: (374.0@742.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (626786304)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(421789696)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(564658176)
	Arguments and temporary variables: 
		anEvent: 	[(370@736) mouseUp 4138441 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(358.0@722.0) corner: (374.0@738.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(421789696)'')
		fullBounds: 	(358.0@722.0) corner: (374.0@742.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (626786304)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(421789696)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(370@736) mouseUp 4138441 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(564658176)
	Receiver's instance variables: 
		timeStamp: 	4138441
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(370@736)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(564658176)
	Arguments and temporary variables: 
		anEvent: 	[(370@736) mouseUp 4138441 nil]
	Receiver's instance variables: 
		bounds: 	(358.0@722.0) corner: (374.0@738.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(421789696)'')
		fullBounds: 	(358.0@722.0) corner: (374.0@742.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (626786304)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(421789696)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(564658176)
	Arguments and temporary variables: 
		anEvent: 	[(370@736) mouseUp 4138441 nil]
	Receiver's instance variables: 
		bounds: 	(358.0@722.0) corner: (374.0@738.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(421789696)'')
		fullBounds: 	(358.0@722.0) corner: (374.0@742.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (626786304)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(421789696)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(370@736) mouseUp 4138441 nil]
		focusHolder: 	a LOCell(564658176)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(370@736.0) corner: (386@752.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(370@736.0) corner: (386@752.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(690225152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(370@736) mouseUp 4138441 nil]
		targetOffset: 	(12.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4138441 370 736 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(370@736) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(647233536) a SpecWin...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(370@736) mouseUp 4138441 nil]
		focusHolder: 	a LOCell(564658176)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(370@736.0) corner: (386@752.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(370@736.0) corner: (386@752.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(690225152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(370@736) mouseUp 4138441 nil]
		targetOffset: 	(12.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4138441 370 736 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(370@736) mouseUp 4138441 nil]
		focusHolder: 	a LOCell(564658176)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(370@736.0) corner: (386@752.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(370@736.0) corner: (386@752.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(690225152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(370@736) mouseUp 4138441 nil]
		targetOffset: 	(12.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4138441 370 736 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(370@736) mouseUp 4138441 nil]
	Receiver's instance variables: 
		bounds: 	(370@736.0) corner: (386@752.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(370@736.0) corner: (386@752.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(690225152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(370@736) mouseUp 4138441 nil]
		targetOffset: 	(12.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4138441 370 736 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(370@736) mouseUp 4138441 nil]
		evt: 	[(370@736) mouseUp 4138441 nil]
	Receiver's instance variables: 
		bounds: 	(370@736.0) corner: (386@752.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(370@736.0) corner: (386@752.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(690225152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(370@736) mouseUp 4138441 nil]
		targetOffset: 	(12.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4138441 370 736 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(370@736) mouseUp 4138441 nil]
		evtBuf: 	#(1 4138441 370 736 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(370@736.0) corner: (386@752.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(370@736.0) corner: (386@752.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(690225152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(370@736) mouseUp 4138441 nil]
		targetOffset: 	(12.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4138441 370 736 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4135983
		lastStepMessage: 	nil
		lastCycleTime: 	4138449
		alarms: 	a Heap()
		lastAlarmTime: 	4138429
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4135983
		lastStepMessage: 	nil
		lastCycleTime: 	4138449
		alarms: 	a Heap()
		lastAlarmTime: 	4138429
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4135983
		lastStepMessage: 	nil
		lastCycleTime: 	4138449
		alarms: 	a Heap()
		lastAlarmTime: 	4138429
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4135983
		lastStepMessage: 	nil
		lastCycleTime: 	4138449
		alarms: 	a Heap()
		lastAlarmTime: 	4138429
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(647233536) a SpecWin...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
29 October 2015 5:31:48.330572 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(293.0@673.0) corner: (455.0@835.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(293@673) corner: (455@838)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
		i: 	6
		j: 	5
	Receiver's instance variables: 
		bounds: 	(293.0@673.0) corner: (455.0@835.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(293@673) corner: (455@838)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(1012924416)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(293.0@673.0) corner: (455.0@835.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	an Array(a LOCell(668205056) a LOCell(223870976) a LOCell(751042560)...etc...
		fullBounds: 	(293@673) corner: (455@838)
		color: 	Color blue
		extension: 	a MorphExtension (358612992)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(1012924416) a LOGame(1012924416) a LOGame(1012924416) a LOGame...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(156762112)
	Arguments and temporary variables: 
		anEvent: 	[(376@749) mouseUp 4162425 nil]
	Receiver's instance variables: 
		bounds: 	(374.0@738.0) corner: (390.0@754.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(1003225088)'')
		fullBounds: 	(374.0@738.0) corner: (390.0@758.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (206831616)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(1003225088)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(156762112)
	Arguments and temporary variables: 
		anEvent: 	[(376@749) mouseUp 4162425 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(374.0@738.0) corner: (390.0@754.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(1003225088)'')
		fullBounds: 	(374.0@738.0) corner: (390.0@758.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (206831616)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(1003225088)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(376@749) mouseUp 4162425 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(156762112)
	Receiver's instance variables: 
		timeStamp: 	4162425
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(376@749)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(156762112)
	Arguments and temporary variables: 
		anEvent: 	[(376@749) mouseUp 4162425 nil]
	Receiver's instance variables: 
		bounds: 	(374.0@738.0) corner: (390.0@754.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(1003225088)'')
		fullBounds: 	(374.0@738.0) corner: (390.0@758.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (206831616)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(1003225088)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(156762112)
	Arguments and temporary variables: 
		anEvent: 	[(376@749) mouseUp 4162425 nil]
	Receiver's instance variables: 
		bounds: 	(374.0@738.0) corner: (390.0@754.0)
		owner: 	a LOGame(1012924416)
		submorphs: 	an Array(a StringMorph(1003225088)'')
		fullBounds: 	(374.0@738.0) corner: (390.0@758.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (206831616)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(1003225088)''
		helpText: 	nil
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(376@749) mouseUp 4162425 nil]
		focusHolder: 	a LOCell(156762112)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(376@749.0) corner: (392@765.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(376@749.0) corner: (392@765.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(376@749) mouseUp 4162425 nil]
		targetOffset: 	(2.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4162425 376 749 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(376@749) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(970194944) a LO...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(376@749) mouseUp 4162425 nil]
		focusHolder: 	a LOCell(156762112)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(376@749.0) corner: (392@765.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(376@749.0) corner: (392@765.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(376@749) mouseOver nil nil]
		targetOffset: 	(2.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4162425 376 749 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(376@749) mouseUp 4162425 nil]
		focusHolder: 	a LOCell(156762112)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(376@749.0) corner: (392@765.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(376@749.0) corner: (392@765.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(376@749) mouseOver nil nil]
		targetOffset: 	(2.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4162425 376 749 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(376@749) mouseUp 4162425 nil]
	Receiver's instance variables: 
		bounds: 	(376@749.0) corner: (392@765.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(376@749.0) corner: (392@765.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(376@749) mouseOver nil nil]
		targetOffset: 	(2.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4162425 376 749 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(376@749) mouseUp 4162425 nil]
		evt: 	[(376@749) mouseUp 4162425 nil]
	Receiver's instance variables: 
		bounds: 	(376@749.0) corner: (392@765.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(376@749.0) corner: (392@765.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(376@749) mouseOver nil nil]
		targetOffset: 	(2.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4162425 376 749 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(376@749) mouseUp 4162425 nil]
		evtBuf: 	#(1 4162425 376 749 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(376@749.0) corner: (392@765.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(376@749.0) corner: (392@765.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(376@749) mouseOver nil nil]
		targetOffset: 	(2.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4162425 376 749 0 0 0 1)
		lastKeyScanCode: 	255
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4143815
		lastStepMessage: 	nil
		lastCycleTime: 	4162474
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	4162476
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4143815
		lastStepMessage: 	nil
		lastCycleTime: 	4162474
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	4162476
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4143815
		lastStepMessage: 	nil
		lastCycleTime: 	4162474
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	4162476
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4143815
		lastStepMessage: 	nil
		lastCycleTime: 	4162474
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(398983168)))
		lastAlarmTime: 	4162476
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(970194944) a LO...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Color>>trans
2 November 2015 4:46:24.135645 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Color(Object)>>doesNotUnderstand: #trans
	Receiver: Color blue
	Arguments and temporary variables: 
		aMessage: 	trans
		exception: 	MessageNotUnderstood: Color>>trans
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1023
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Color blue trans'
		itsSelection: 	a Text for 'Color blue trans'
		itsSelectionString: 	'Color blue trans'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Color blue trans
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(445906944)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(445906944)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1024983040)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(445906944)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(73138176)
		submorphs: 	an Array(a RubCursor(880279552) a RubPrimarySelectionMorph(104569241...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (924057600) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(34865152)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(880279552)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(619184128))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1024983040)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	1380063
		lastStepMessage: 	nil
		lastCycleTime: 	1380063
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(880279552)))
		lastAlarmTime: 	1380063
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(618921984) a GL...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	1380063
		lastStepMessage: 	nil
		lastCycleTime: 	1380063
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(880279552)))
		lastAlarmTime: 	1380063
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	1380063
		lastStepMessage: 	nil
		lastCycleTime: 	1380063
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(880279552)))
		lastAlarmTime: 	1380063
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(618921984) a GL...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #trans
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Color>>transparent
2 November 2015 4:46:29.759645 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Color(Object)>>doesNotUnderstand: #transparent
	Receiver: Color blue
	Arguments and temporary variables: 
		aMessage: 	transparent
		exception: 	MessageNotUnderstood: Color>>transparent
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1023
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ Color blue transparent
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(445906944)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(445906944)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1024983040)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(445906944)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(73138176)
		submorphs: 	an Array(a RubCursor(880279552) a RubPrimarySelectionMorph(104569241...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (924057600) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(34865152)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(880279552)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(269746176))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1024983040)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	1385667
		lastStepMessage: 	nil
		lastCycleTime: 	1385687
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(880279552)))
		lastAlarmTime: 	1385667
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(618921984) a GL...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	1385667
		lastStepMessage: 	nil
		lastCycleTime: 	1385687
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(880279552)))
		lastAlarmTime: 	1385667
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	1385667
		lastStepMessage: 	nil
		lastCycleTime: 	1385687
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(880279552)))
		lastAlarmTime: 	1385667
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(618921984) a GL...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #transparent
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Color>>trans
2 November 2015 4:51:12.459645 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Color(Object)>>doesNotUnderstand: #trans
	Receiver: Color blue
	Arguments and temporary variables: 
		aMessage: 	trans
		exception: 	MessageNotUnderstood: Color>>trans
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1023
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
shape := RTBox new color: Color blue trans.
e...etc...
		itsSelection: 	a Text for 'v := RTView new.
shape := RTBox new color: Color blue...etc...
		itsSelectionString: 	'v := RTView new.
shape := RTBox new color: Color blue tran...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	shape := RTBox new color: Color blue trans.
	eleme...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@221)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubCursor(435421184) a RubPrimarySelectionMorph(600834048...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(721420288))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(13107200))(a RubE...etc...
		lastStepTime: 	1668367
		lastStepMessage: 	nil
		lastCycleTime: 	1668387
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1668367
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(13107200))(a RubE...etc...
		lastStepTime: 	1668367
		lastStepMessage: 	nil
		lastCycleTime: 	1668387
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1668367
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(13107200))(a RubE...etc...
		lastStepTime: 	1668367
		lastStepMessage: 	nil
		lastCycleTime: 	1668387
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1668367
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #trans
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
2 November 2015 4:53:08.199645 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(1)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(1)

Array(Object)>>at:
	Receiver: #(1)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(1)

[ :row | 
| v i |
i := self convertFromNameToIndexIfNecessary: index.
v := row at: i.
row at: i put: (blockForConvertion rtValue: v) ] in RTTabTable>>convertColumn:to:
	Receiver: a RTTabTable
	Arguments and temporary variables: 
		index: 	2
		blockForConvertion: 	[ :s | Integer readFrom: s ]
		row: 	#(1)
		v: 	nil
		i: 	2
	Receiver's instance variables: 
		attributes: 	nil
		values: 	#(#(1) #(2) #(3) #(4) #(5))
		firstRow: 	#('id value1 value2 category parent')


Array(SequenceableCollection)>>do:
	Receiver: #(#(1) #(2) #(3) #(4) #(5))
	Arguments and temporary variables: 
		aBlock: 	[ :row | 
| v i |
i := self convertFromNameToIndexIfNecessary: index.
v...etc...
		index: 	1
	Receiver's instance variables: 
#(#(1) #(2) #(3) #(4) #(5))

RTTabTable>>convertColumn:to:
	Receiver: a RTTabTable
	Arguments and temporary variables: 
		index: 	2
		blockForConvertion: 	[ :s | Integer readFrom: s ]
	Receiver's instance variables: 
		attributes: 	nil
		values: 	#(#(1) #(2) #(3) #(4) #(5))
		firstRow: 	#('id value1 value2 category parent')


[ :index | self convertColumn: index to: aBlock ] in RTTabTable>>convertColumns:to:
	Receiver: a RTTabTable
	Arguments and temporary variables: 
		collectionOfIntegers: 	#(1 2 3 5)
		aBlock: 	[ :s | Integer readFrom: s ]
		index: 	2
	Receiver's instance variables: 
		attributes: 	nil
		values: 	#(#(1) #(2) #(3) #(4) #(5))
		firstRow: 	#('id value1 value2 category parent')


Array(SequenceableCollection)>>do:
	Receiver: #(1 2 3 5)
	Arguments and temporary variables: 
		aBlock: 	[ :index | self convertColumn: index to: aBlock ]
		index: 	2
	Receiver's instance variables: 
#(1 2 3 5)

RTTabTable>>convertColumns:to:
	Receiver: a RTTabTable
	Arguments and temporary variables: 
		collectionOfIntegers: 	#(1 2 3 5)
		aBlock: 	[ :s | Integer readFrom: s ]
	Receiver's instance variables: 
		attributes: 	nil
		values: 	#(#(1) #(2) #(3) #(4) #(5))
		firstRow: 	#('id value1 value2 category parent')


RTTabTable>>convertColumnsAsInteger:
	Receiver: a RTTabTable
	Arguments and temporary variables: 
		collectionOfIntegers: 	#(1 2 3 5)
	Receiver's instance variables: 
		attributes: 	nil
		values: 	#(#(1) #(2) #(3) #(4) #(5))
		firstRow: 	#('id value1 value2 category parent')


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'tab := RTTabTable new input:
''id value1 value2 category paren...etc...
		itsSelection: 	a Text for 'tab := RTTabTable new input:
''id value1 value2 categ...etc...
		itsSelectionString: 	'tab := RTTabTable new input:
''id value1 value2 category p...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	tab := RTTabTable new
		input:
			'id value1 value2 category parent
...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@810)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubCursor(435421184) a RubPrimarySelectionMorph(600834048...etc...
		fullBounds: 	(0@0) corner: (272@810)
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(119275520))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(13107200))(a RubE...etc...
		lastStepTime: 	1784187
		lastStepMessage: 	nil
		lastCycleTime: 	1784187
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1784187
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(13107200))(a RubE...etc...
		lastStepTime: 	1784187
		lastStepMessage: 	nil
		lastCycleTime: 	1784187
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1784187
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(13107200))(a RubE...etc...
		lastStepTime: 	1784187
		lastStepMessage: 	nil
		lastCycleTime: 	1784187
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1784187
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
[ :row | 
| v i |
i := self convertFromNameToIndexIfNecessary: index.
v := row at: i.
row at: i put: (blockForConvertion rtValue: v) ] in RTTabTable>>convertColumn:to:
Array(SequenceableCollection)>>do:
RTTabTable>>convertColumn:to:
[ :index | self convertColumn: index to: aBlock ] in RTTabTable>>convertColumns:to:
Array(SequenceableCollection)>>do:
RTTabTable>>convertColumns:to:
RTTabTable>>convertColumnsAsInteger:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Color>>trans
2 November 2015 5:06:56.287647 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Color(Object)>>doesNotUnderstand: #trans
	Receiver: Color blue
	Arguments and temporary variables: 
		aMessage: 	trans
		exception: 	MessageNotUnderstood: Color>>trans
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1023
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
elementShape := RTEllipse new size: 20; color...etc...
		itsSelection: 	a Text for 'v := RTView new.
elementShape := RTEllipse new size: ...etc...
		itsSelectionString: 	'v := RTView new.
elementShape := RTEllipse new size: 20; c...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	elementShape := RTEllipse new
		size: 20;
		color:...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@316)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(165937152) a RubCursor(435421184...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(584843264))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	2612185
		lastStepMessage: 	nil
		lastCycleTime: 	2612205
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	2612185
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	2612185
		lastStepMessage: 	nil
		lastCycleTime: 	2612205
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	2612185
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	2612185
		lastStepMessage: 	nil
		lastCycleTime: 	2612205
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	2612185
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #trans
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTArrowedLine>>color:blue:
2 November 2015 5:08:08.441649 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTArrowedLine(Object)>>doesNotUnderstand: #color:blue:
	Receiver: a RTArrowedLine
	Arguments and temporary variables: 
		aMessage: 	color: Color blue: Color blue
		exception: 	MessageNotUnderstood: RTArrowedLine>>color:blue:
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		width: 	1
		attachPoint: 	a RTCenteredAttachPoint
		line: 	a RTLine
		head: 	a RTSimpleArrowHead


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
elementShape := RTEllipse new size: 20; color...etc...
		itsSelection: 	a Text for 'v := RTView new.
elementShape := RTEllipse new size: ...etc...
		itsSelectionString: 	'v := RTView new.
elementShape := RTEllipse new size: 20; c...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	elementShape := RTEllipse new
		size: 20;
		color:...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@316)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(165937152) a RubCursor(435421184...etc...
		fullBounds: 	(0@0) corner: (442@316)
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(994312192))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	2684389
		lastStepMessage: 	nil
		lastCycleTime: 	2684387
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	2684389
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	2684389
		lastStepMessage: 	nil
		lastCycleTime: 	2684387
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	2684389
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	2684389
		lastStepMessage: 	nil
		lastCycleTime: 	2684387
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	2684389
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTArrowedLine(Object)>>doesNotUnderstand: #color:blue:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Color>>trans
2 November 2015 5:15:02.471649 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Color(Object)>>doesNotUnderstand: #trans
	Receiver: Color blue
	Arguments and temporary variables: 
		aMessage: 	trans
		exception: 	MessageNotUnderstood: Color>>trans
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1023
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'RTNest new
layout: RTGridLayout new;
on: el nest: innerElement...etc...
		itsSelection: 	a Text for 'RTNest new
layout: RTGridLayout new;
on: el nest: inn...etc...
		itsSelectionString: 	'RTNest new
layout: RTGridLayout new;
on: el nest: innerEle...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	RTNest new
		layout: RTGridLayout new;
		on: el nest: innerElements....etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@278)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(800325632) a RubCursor(435421184...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(843055104))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3098347
		lastStepMessage: 	nil
		lastCycleTime: 	3098369
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3098347
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3098347
		lastStepMessage: 	nil
		lastCycleTime: 	3098369
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3098347
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3098347
		lastStepMessage: 	nil
		lastCycleTime: 	3098369
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3098347
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #trans
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTLabelled class>>above
2 November 2015 5:22:03.691651 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTLabelled class(Object)>>doesNotUnderstand: #above
	Receiver: RTLabelled
	Arguments and temporary variables: 
		aMessage: 	above
		exception: 	MessageNotUnderstood: RTLabelled class>>above
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTInteraction
		methodDict: 	a MethodDictionary(#accept:with:->RTLabelled>>#accept:with: #below-...etc...
		format: 	148
		layout: 	a FixedLayout
		instanceVariables: 	#(#canvas #color #highlightable #lbl #lowColor #offsetOnEdge...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTLabelled
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elementsOn...etc...
		itsSelection: 	a Text for 'v := RTView new.
s := (RTBox new size: 30).
es := s e...etc...
		itsSelectionString: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elemen...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	s := RTBox new size: 30.
	es := s elementsOn: (1 t...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@183)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(800325632) a RubCursor(435421184...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(266600448))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3519555
		lastStepMessage: 	nil
		lastCycleTime: 	3519575
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3519555
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3519555
		lastStepMessage: 	nil
		lastCycleTime: 	3519575
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3519555
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3519555
		lastStepMessage: 	nil
		lastCycleTime: 	3519575
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3519555
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTLabelled class(Object)>>doesNotUnderstand: #above
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTLabelled class>>above
2 November 2015 5:22:14.493647 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTLabelled class(Object)>>doesNotUnderstand: #above
	Receiver: RTLabelled
	Arguments and temporary variables: 
		aMessage: 	above
		exception: 	MessageNotUnderstood: RTLabelled class>>above
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTInteraction
		methodDict: 	a MethodDictionary(#accept:with:->RTLabelled>>#accept:with: #below-...etc...
		format: 	148
		layout: 	a FixedLayout
		instanceVariables: 	#(#canvas #color #highlightable #lbl #lowColor #offsetOnEdge...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTLabelled
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elementsOn...etc...
		itsSelection: 	a Text for 'v := RTView new.
s := (RTBox new size: 30).
es := s e...etc...
		itsSelectionString: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elemen...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	s := RTBox new size: 30.
	es := s elementsOn: (1 t...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@183)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(800325632) a RubCursor(435421184...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(756809728))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3530383
		lastStepMessage: 	nil
		lastCycleTime: 	3530405
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3530383
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3530383
		lastStepMessage: 	nil
		lastCycleTime: 	3530405
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3530383
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3530383
		lastStepMessage: 	nil
		lastCycleTime: 	3530405
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3530383
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTLabelled class(Object)>>doesNotUnderstand: #above
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTLabelled class>>top
2 November 2015 5:23:33.317647 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTLabelled class(Object)>>doesNotUnderstand: #top
	Receiver: RTLabelled
	Arguments and temporary variables: 
		aMessage: 	top
		exception: 	MessageNotUnderstood: RTLabelled class>>top
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTInteraction
		methodDict: 	a MethodDictionary(#accept:with:->RTLabelled>>#accept:with: #below-...etc...
		format: 	148
		layout: 	a FixedLayout
		instanceVariables: 	#(#canvas #color #highlightable #lbl #lowColor #offsetOnEdge...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTLabelled
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elementsOn...etc...
		itsSelection: 	a Text for 'v := RTView new.
s := (RTBox new size: 30).
es := s e...etc...
		itsSelectionString: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elemen...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	s := RTBox new size: 30.
	es := s elementsOn: (1 t...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@183)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(800325632) a RubCursor(435421184...etc...
		fullBounds: 	(0@0) corner: (442@183)
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(460849152))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	3609263
		lastStepMessage: 	nil
		lastCycleTime: 	3609263
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3609263
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	3609263
		lastStepMessage: 	nil
		lastCycleTime: 	3609263
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3609263
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	3609263
		lastStepMessage: 	nil
		lastCycleTime: 	3609263
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3609263
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTLabelled class(Object)>>doesNotUnderstand: #top
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTLabel>>initializeElement:
2 November 2015 5:24:11.885648 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTLabel(Object)>>doesNotUnderstand: #initializeElement:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		aMessage: 	initializeElement: a RTElement
		exception: 	MessageNotUnderstood: RTLabel>>initializeElement:
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color black
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		font: 	nil
		height: 	12
		fontName: 	'Source Sans Pro'


RTElement(RTAnnounceableObject)>>addInteraction:
	Receiver: a RTElement
	Arguments and temporary variables: 
		anInteractionClassOrInstance: 	a RTLabel
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		isFixed: 	false
		model: 	1
		shape: 	a RTBox
		trachelShape: 	a TRBoxShape
		view: 	a RTView
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


RTElement(RTAnnounceableObject)>>@
	Receiver: a RTElement
	Arguments and temporary variables: 
		anInteractionClassOrInstance: 	a RTLabel
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		isFixed: 	false
		model: 	1
		shape: 	a RTBox
		trachelShape: 	a TRBoxShape
		view: 	a RTView
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


[ :e | e @ interaction ] in RTGroup>>@
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		interaction: 	a RTLabel
		e: 	a RTElement
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	20
		attributes: 	nil


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | e @ interaction ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	20
		attributes: 	nil


RTGroup>>@
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		interaction: 	a RTLabel
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	20
		attributes: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elementsOn...etc...
		itsSelection: 	a Text for 'v := RTView new.
s := (RTBox new size: 30).
es := s e...etc...
		itsSelectionString: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elemen...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	s := RTBox new size: 30.
	es := s elementsOn: (1 t...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@183)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(800325632) a RubCursor(435421184...etc...
		fullBounds: 	(0@0) corner: (442@183)
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(630194176))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	3647861
		lastStepMessage: 	nil
		lastCycleTime: 	3647859
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3647861
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	3647861
		lastStepMessage: 	nil
		lastCycleTime: 	3647859
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3647861
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	3647861
		lastStepMessage: 	nil
		lastCycleTime: 	3647859
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3647861
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTLabel(Object)>>doesNotUnderstand: #initializeElement:
RTElement(RTAnnounceableObject)>>addInteraction:
RTElement(RTAnnounceableObject)>>@
[ :e | e @ interaction ] in RTGroup>>@
RTGroup(OrderedCollection)>>do:
RTGroup>>@
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTLabelled class>>below
2 November 2015 5:25:34.391649 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTLabelled class(Object)>>doesNotUnderstand: #below
	Receiver: RTLabelled
	Arguments and temporary variables: 
		aMessage: 	below
		exception: 	MessageNotUnderstood: RTLabelled class>>below
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTInteraction
		methodDict: 	a MethodDictionary(#accept:with:->RTLabelled>>#accept:with: #below-...etc...
		format: 	148
		layout: 	a FixedLayout
		instanceVariables: 	#(#canvas #color #highlightable #lbl #lowColor #offsetOnEdge...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTLabelled
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elementsOn...etc...
		itsSelection: 	a Text for 'v := RTView new.
s := (RTBox new size: 30).
es := s e...etc...
		itsSelectionString: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elemen...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	s := RTBox new size: 30.
	es := s elementsOn: (1 t...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@183)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(664272896))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	3730273
		lastStepMessage: 	nil
		lastCycleTime: 	3730295
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3730273
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	3730273
		lastStepMessage: 	nil
		lastCycleTime: 	3730295
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3730273
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	3730273
		lastStepMessage: 	nil
		lastCycleTime: 	3730295
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3730273
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTLabelled class(Object)>>doesNotUnderstand: #below
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTLabelled class>>text:
2 November 2015 5:26:05.227651 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTLabelled class(Object)>>doesNotUnderstand: #text:
	Receiver: RTLabelled
	Arguments and temporary variables: 
		aMessage: 	text: [ :aValue | 'Value = ' , aValue asString ]
		exception: 	MessageNotUnderstood: RTLabelled class>>text:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTInteraction
		methodDict: 	a MethodDictionary(#accept:with:->RTLabelled>>#accept:with: #below-...etc...
		format: 	148
		layout: 	a FixedLayout
		instanceVariables: 	#(#canvas #color #highlightable #lbl #lowColor #offsetOnEdge...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTLabelled
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elementsOn...etc...
		itsSelection: 	a Text for 'v := RTView new.
s := (RTBox new size: 30).
es := s e...etc...
		itsSelectionString: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elemen...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	s := RTBox new size: 30.
	es := s elementsOn: (1 t...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@183)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(734789632))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 562823168))(...etc...
		lastStepTime: 	3761101
		lastStepMessage: 	nil
		lastCycleTime: 	3761123
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3761101
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 562823168))(...etc...
		lastStepTime: 	3761101
		lastStepMessage: 	nil
		lastCycleTime: 	3761123
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3761101
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 562823168))(...etc...
		lastStepTime: 	3761101
		lastStepMessage: 	nil
		lastCycleTime: 	3761123
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3761101
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTLabelled class(Object)>>doesNotUnderstand: #text:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTLabelled class>>text:
2 November 2015 5:28:04.625648 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTLabelled class(Object)>>doesNotUnderstand: #text:
	Receiver: RTLabelled
	Arguments and temporary variables: 
		aMessage: 	text: [ :aValue | 'Value = ' , aValue asString ]
		exception: 	MessageNotUnderstood: RTLabelled class>>text:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTInteraction
		methodDict: 	a MethodDictionary(#accept:with:->RTLabelled>>#accept:with: #below-...etc...
		format: 	148
		layout: 	a FixedLayout
		instanceVariables: 	#(#canvas #color #highlightable #lbl #lowColor #offsetOnEdge...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTLabelled
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elementsOn...etc...
		itsSelection: 	a Text for 'v := RTView new.
s := (RTBox new size: 30).
es := s e...etc...
		itsSelectionString: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elemen...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	s := RTBox new size: 30.
	es := s elementsOn: (1 t...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@183)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	(0@0) corner: (442@183)
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(786694144))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	3880573
		lastStepMessage: 	nil
		lastCycleTime: 	3880571
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3880573
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	3880573
		lastStepMessage: 	nil
		lastCycleTime: 	3880571
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3880573
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	3880573
		lastStepMessage: 	nil
		lastCycleTime: 	3880571
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3880573
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTLabelled class(Object)>>doesNotUnderstand: #text:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTLabelled class>>above
2 November 2015 5:29:02.863647 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTLabelled class(Object)>>doesNotUnderstand: #above
	Receiver: RTLabelled
	Arguments and temporary variables: 
		aMessage: 	above
		exception: 	MessageNotUnderstood: RTLabelled class>>above
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTInteraction
		methodDict: 	a MethodDictionary(#accept:with:->RTLabelled>>#accept:with: #below-...etc...
		format: 	148
		layout: 	a FixedLayout
		instanceVariables: 	#(#canvas #color #highlightable #lbl #lowColor #offsetOnEdge...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTLabelled
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elementsOn...etc...
		itsSelection: 	a Text for 'v := RTView new.
s := (RTBox new size: 30).
es := s e...etc...
		itsSelectionString: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elemen...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	s := RTBox new size: 30.
	es := s elementsOn: (1 t...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@183)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	(0@0) corner: (442@183)
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(211550208))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(462946304))(a DropList...etc...
		lastStepTime: 	3938805
		lastStepMessage: 	nil
		lastCycleTime: 	3938803
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3938805
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(462946304))(a DropList...etc...
		lastStepTime: 	3938805
		lastStepMessage: 	nil
		lastCycleTime: 	3938803
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3938805
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(462946304))(a DropList...etc...
		lastStepTime: 	3938805
		lastStepMessage: 	nil
		lastCycleTime: 	3938803
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3938805
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTLabelled class(Object)>>doesNotUnderstand: #above
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTLabelled class>>top
2 November 2015 5:29:29.647652 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTLabelled class(Object)>>doesNotUnderstand: #top
	Receiver: RTLabelled
	Arguments and temporary variables: 
		aMessage: 	top
		exception: 	MessageNotUnderstood: RTLabelled class>>top
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTInteraction
		methodDict: 	a MethodDictionary(#accept:with:->RTLabelled>>#accept:with: #below-...etc...
		format: 	148
		layout: 	a FixedLayout
		instanceVariables: 	#(#canvas #color #highlightable #lbl #lowColor #offsetOnEdge...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTLabelled
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elementsOn...etc...
		itsSelection: 	a Text for 'v := RTView new.
s := (RTBox new size: 30).
es := s e...etc...
		itsSelectionString: 	'v := RTView new.
s := (RTBox new size: 30).
es := s elemen...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	s := RTBox new size: 30.
	es := s elementsOn: (1 t...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@183)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(193986560))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	3965519
		lastStepMessage: 	nil
		lastCycleTime: 	3965539
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3965519
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	3965519
		lastStepMessage: 	nil
		lastCycleTime: 	3965539
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3965519
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	3965519
		lastStepMessage: 	nil
		lastCycleTime: 	3965539
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	3965519
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTLabelled class(Object)>>doesNotUnderstand: #top
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTMetricNormalizer>>alphaColor
2 November 2015 5:37:52.489645 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTMetricNormalizer(Object)>>doesNotUnderstand: #alphaColor
	Receiver: a RTMetricNormalizer
	Arguments and temporary variables: 
		aMessage: 	alphaColor
		exception: 	MessageNotUnderstood: RTMetricNormalizer>>alphaColor
		resumeValue: 	nil
	Receiver's instance variables: 
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		view: 	nil
		translator: 	a RTDirectLayoutTranslator


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
es := (RTEllipse new color: Color blue) eleme...etc...
		itsSelection: 	a Text for 'v := RTView new.
es := (RTEllipse new color: Color bl...etc...
		itsSelectionString: 	'v := RTView new.
es := (RTEllipse new color: Color blue) e...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	es := (RTEllipse new color: Color blue) elementsOn...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@240)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(33554432))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(13107200))(a RubE...etc...
		lastStepTime: 	4468397
		lastStepMessage: 	nil
		lastCycleTime: 	4468417
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4468397
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(13107200))(a RubE...etc...
		lastStepTime: 	4468397
		lastStepMessage: 	nil
		lastCycleTime: 	4468417
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4468397
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(13107200))(a RubE...etc...
		lastStepTime: 	4468397
		lastStepMessage: 	nil
		lastCycleTime: 	4468417
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4468397
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTMetricNormalizer(Object)>>doesNotUnderstand: #alphaColor
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTMetricNormalizer>>alphaColor
2 November 2015 5:37:58.017651 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTMetricNormalizer(Object)>>doesNotUnderstand: #alphaColor
	Receiver: a RTMetricNormalizer
	Arguments and temporary variables: 
		aMessage: 	alphaColor
		exception: 	MessageNotUnderstood: RTMetricNormalizer>>alphaColor
		resumeValue: 	nil
	Receiver's instance variables: 
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		view: 	nil
		translator: 	a RTDirectLayoutTranslator


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
es := (RTEllipse new color: Color blue) eleme...etc...
		itsSelection: 	a Text for 'v := RTView new.
es := (RTEllipse new color: Color bl...etc...
		itsSelectionString: 	'v := RTView new.
es := (RTEllipse new color: Color blue) e...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	es := (RTEllipse new color: Color blue) elementsOn...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@240)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(833093632))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 562823168))(...etc...
		lastStepTime: 	4473875
		lastStepMessage: 	nil
		lastCycleTime: 	4473897
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4473875
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 562823168))(...etc...
		lastStepTime: 	4473875
		lastStepMessage: 	nil
		lastCycleTime: 	4473897
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4473875
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 562823168))(...etc...
		lastStepTime: 	4473875
		lastStepMessage: 	nil
		lastCycleTime: 	4473897
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4473875
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTMetricNormalizer(Object)>>doesNotUnderstand: #alphaColor
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTMetricNormalizer>>alphaColor
2 November 2015 5:38:24.925649 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTMetricNormalizer(Object)>>doesNotUnderstand: #alphaColor
	Receiver: a RTMetricNormalizer
	Arguments and temporary variables: 
		aMessage: 	alphaColor
		exception: 	MessageNotUnderstood: RTMetricNormalizer>>alphaColor
		resumeValue: 	nil
	Receiver's instance variables: 
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		view: 	nil
		translator: 	a RTDirectLayoutTranslator


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
es := (RTEllipse new color: Color blue) eleme...etc...
		itsSelection: 	a Text for 'v := RTView new.
es := (RTEllipse new color: Color bl...etc...
		itsSelectionString: 	'v := RTView new.
es := (RTEllipse new color: Color blue) e...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	es := (RTEllipse new color: Color blue) elementsOn...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@240)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	(0@0) corner: (442@240)
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(459276288))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(462946304))(a DropList...etc...
		lastStepTime: 	4500873
		lastStepMessage: 	nil
		lastCycleTime: 	4500873
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4500873
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(462946304))(a DropList...etc...
		lastStepTime: 	4500873
		lastStepMessage: 	nil
		lastCycleTime: 	4500873
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4500873
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(462946304))(a DropList...etc...
		lastStepTime: 	4500873
		lastStepMessage: 	nil
		lastCycleTime: 	4500873
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4500873
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTMetricNormalizer(Object)>>doesNotUnderstand: #alphaColor
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Color>>transparent
2 November 2015 5:41:29.845652 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Color(Object)>>doesNotUnderstand: #transparent
	Receiver: Color blue
	Arguments and temporary variables: 
		aMessage: 	transparent
		exception: 	MessageNotUnderstood: Color>>transparent
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1023
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
es := (RTEllipse new color: Color blue transp...etc...
		itsSelection: 	a Text for 'v := RTView new.
es := (RTEllipse new color: Color bl...etc...
		itsSelectionString: 	'v := RTView new.
es := (RTEllipse new color: Color blue tr...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	es := (RTEllipse new color: Color blue transparent...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@240)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(873201664))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 662700032))(3...etc...
		lastStepTime: 	4685713
		lastStepMessage: 	nil
		lastCycleTime: 	4685735
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4685713
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 662700032))(3...etc...
		lastStepTime: 	4685713
		lastStepMessage: 	nil
		lastCycleTime: 	4685735
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4685713
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 662700032))(3...etc...
		lastStepTime: 	4685713
		lastStepMessage: 	nil
		lastCycleTime: 	4685735
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4685713
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #transparent
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTEllipse>>transparent
2 November 2015 5:41:43.607652 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTEllipse(Object)>>doesNotUnderstand: #transparent
	Receiver: a RTEllipse
	Arguments and temporary variables: 
		aMessage: 	transparent
		exception: 	MessageNotUnderstood: RTEllipse>>transparent
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	5
		width: 	5
		borderColor: 	nil
		borderWidth: 	1


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
es := (RTEllipse new color: Color blue; trans...etc...
		itsSelection: 	a Text for 'v := RTView new.
es := (RTEllipse new color: Color bl...etc...
		itsSelectionString: 	'v := RTView new.
es := (RTEllipse new color: Color blue; t...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	es := (RTEllipse new
		color: Color blue;
		transp...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@240)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(965214208))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(462946304))(a DropList...etc...
		lastStepTime: 	4699479
		lastStepMessage: 	nil
		lastCycleTime: 	4699499
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4699479
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(462946304))(a DropList...etc...
		lastStepTime: 	4699479
		lastStepMessage: 	nil
		lastCycleTime: 	4699499
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4699479
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(462946304))(a DropList...etc...
		lastStepTime: 	4699479
		lastStepMessage: 	nil
		lastCycleTime: 	4699499
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4699479
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTEllipse(Object)>>doesNotUnderstand: #transparent
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTMetricNormalizer>>distinctColorUsing:
2 November 2015 5:46:40.401651 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTMetricNormalizer(Object)>>doesNotUnderstand: #distinctColorUsing:
	Receiver: a RTMetricNormalizer
	Arguments and temporary variables: 
		aMessage: 	distinctColorUsing: #package
		exception: 	MessageNotUnderstood: RTMetricNormalizer>>distinctColorUsing:
		resumeValue: 	nil
	Receiver's instance variables: 
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		view: 	nil
		translator: 	a RTDirectLayoutTranslator


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
es := RTBox elementsOn: Collection withAllSub...etc...
		itsSelection: 	a Text for 'v := RTView new.
es := RTBox elementsOn: Collection w...etc...
		itsSelectionString: 	'v := RTView new.
es := RTBox elementsOn: Collection withAl...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	es := RTBox elementsOn: Collection withAllSubclass...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@202)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(281280512))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 662700032))(3...etc...
		lastStepTime: 	4996263
		lastStepMessage: 	nil
		lastCycleTime: 	4996285
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4996263
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 662700032))(3...etc...
		lastStepTime: 	4996263
		lastStepMessage: 	nil
		lastCycleTime: 	4996285
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4996263
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 662700032))(3...etc...
		lastStepTime: 	4996263
		lastStepMessage: 	nil
		lastCycleTime: 	4996285
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	4996263
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTMetricNormalizer(Object)>>doesNotUnderstand: #distinctColorUsing:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTMetricNormalizer>>distinctColorUsing:
2 November 2015 5:46:55.993651 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTMetricNormalizer(Object)>>doesNotUnderstand: #distinctColorUsing:
	Receiver: a RTMetricNormalizer
	Arguments and temporary variables: 
		aMessage: 	distinctColorUsing: #package
		exception: 	MessageNotUnderstood: RTMetricNormalizer>>distinctColorUsing:
		resumeValue: 	nil
	Receiver's instance variables: 
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		view: 	nil
		translator: 	a RTDirectLayoutTranslator


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
es := RTBox elementsOn: Collection withAllSub...etc...
		itsSelection: 	a Text for 'v := RTView new.
es := RTBox elementsOn: Collection w...etc...
		itsSelectionString: 	'v := RTView new.
es := RTBox elementsOn: Collection withAl...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	es := RTBox elementsOn: Collection withAllSubclass...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@202)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(33554432))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	5011863
		lastStepMessage: 	nil
		lastCycleTime: 	5011881
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	5011863
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	5011863
		lastStepMessage: 	nil
		lastCycleTime: 	5011881
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	5011863
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	5011863
		lastStepMessage: 	nil
		lastCycleTime: 	5011881
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	5011863
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTMetricNormalizer(Object)>>doesNotUnderstand: #distinctColorUsing:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTMetricNormalizer>>distinctColor:
2 November 2015 5:48:03.757649 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTMetricNormalizer(Object)>>doesNotUnderstand: #distinctColor:
	Receiver: a RTMetricNormalizer
	Arguments and temporary variables: 
		aMessage: 	distinctColor: #package
		exception: 	MessageNotUnderstood: RTMetricNormalizer>>distinctColor:
		resumeValue: 	nil
	Receiver's instance variables: 
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		view: 	nil
		translator: 	a RTDirectLayoutTranslator


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
es := RTBox elementsOn: Collection withAllSub...etc...
		itsSelection: 	a Text for 'v := RTView new.
es := RTBox elementsOn: Collection w...etc...
		itsSelectionString: 	'v := RTView new.
es := RTBox elementsOn: Collection withAl...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	es := RTBox elementsOn: Collection withAllSubclass...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@202)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(747110400))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	5079637
		lastStepMessage: 	nil
		lastCycleTime: 	5079657
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	5079637
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	5079637
		lastStepMessage: 	nil
		lastCycleTime: 	5079657
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	5079637
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	5079637
		lastStepMessage: 	nil
		lastCycleTime: 	5079657
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	5079637
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTMetricNormalizer(Object)>>doesNotUnderstand: #distinctColor:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTMetricNormalizer>>distinctColor:
2 November 2015 5:48:19.465651 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTMetricNormalizer(Object)>>doesNotUnderstand: #distinctColor:
	Receiver: a RTMetricNormalizer
	Arguments and temporary variables: 
		aMessage: 	distinctColor: #package
		exception: 	MessageNotUnderstood: RTMetricNormalizer>>distinctColor:
		resumeValue: 	nil
	Receiver's instance variables: 
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		view: 	nil
		translator: 	a RTDirectLayoutTranslator


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
es := RTBox elementsOn: Collection withAllSub...etc...
		itsSelection: 	a Text for 'v := RTView new.
es := RTBox elementsOn: Collection w...etc...
		itsSelectionString: 	'v := RTView new.
es := RTBox elementsOn: Collection withAl...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	es := RTBox elementsOn: Collection withAllSubclass...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@202)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(20971520))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	5095325
		lastStepMessage: 	nil
		lastCycleTime: 	5095347
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	5095325
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	5095325
		lastStepMessage: 	nil
		lastCycleTime: 	5095347
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	5095325
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(451936256))(a SearchMorp...etc...
		lastStepTime: 	5095325
		lastStepMessage: 	nil
		lastCycleTime: 	5095347
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	5095325
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTMetricNormalizer(Object)>>doesNotUnderstand: #distinctColor:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTHorizontalLineLayout>>elements:
2 November 2015 5:56:45.64165 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTHorizontalLineLayout(Object)>>doesNotUnderstand: #elements:
	Receiver: a RTHorizontalLineLayout
	Arguments and temporary variables: 
		aMessage: 	elements: a RTGroup(a RTElement a RTElement a RTElement a RTElement a...etc...
		exception: 	MessageNotUnderstood: RTHorizontalLineLayout>>elements:
		resumeValue: 	nil
	Receiver's instance variables: 
		affectedNodes: 	nil
		translator: 	a RTDirectLayoutTranslator
		eventHandler: 	nil
		currentIteraction: 	nil
		gapSize: 	nil
		horizontalGap: 	10
		verticalGap: 	10
		horizontalOutGap: 	nil
		verticalOutGap: 	nil
		alignment: 	#top
		horizontallyStretchable: 	false
		verticallyStretchable: 	false


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'values := #(35 26 5 18 17 60 36 13 16 28 29 3 8 0 3 2 14 12 13...etc...
		itsSelection: 	a Text for 'values := #(35 26 5 18 17 60 36 13 16 28 29 3 8 0 3 2...etc...
		itsSelectionString: 	'values := #(35 26 5 18 17 60 36 13 16 28 29 3 8 0 3 2 14 1...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	values := #(35 26 5 18 17 60 36 13 16 28 29 3 8 0 3 2 14 12 13 17 1 ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@221)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82051072) a RubCursor(435421184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(956563456))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	5601515
		lastStepMessage: 	nil
		lastCycleTime: 	5601537
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	5601515
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	5601515
		lastStepMessage: 	nil
		lastCycleTime: 	5601537
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	5601515
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	5601515
		lastStepMessage: 	nil
		lastCycleTime: 	5601537
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	5601515
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a G...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTHorizontalLineLayout(Object)>>doesNotUnderstand: #elements:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTHorizontalLineLayout class>>alignBottom
2 November 2015 6:05:51.969651 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTHorizontalLineLayout class(Object)>>doesNotUnderstand: #alignBottom
	Receiver: RTHorizontalLineLayout
	Arguments and temporary variables: 
		aMessage: 	alignBottom
		exception: 	MessageNotUnderstood: RTHorizontalLineLayout class>>alignBottom
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTAbstractLineLayout
		methodDict: 	a MethodDictionary(#deltaFor:->RTHorizontalLineLayout>>#deltaFor: #...etc...
		format: 	154
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTHorizontalLineLayout
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Layouts'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'rootClasses := { RTShape . RTLayout }.
groups := rootClasses c...etc...
		itsSelection: 	a Text for 'rootClasses := { RTShape . RTLayout }.
groups := root...etc...
		itsSelectionString: 	'rootClasses := { RTShape . RTLayout }.
groups := rootClass...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	rootClasses := {RTShape.
	RTLayout}.
	groups := rootClasses
		collec...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@354)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(126353408) a RubCursor(435421184...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(240910336))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	6147819
		lastStepMessage: 	nil
		lastCycleTime: 	6147841
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	6147819
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	6147819
		lastStepMessage: 	nil
		lastCycleTime: 	6147841
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	6147819
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	6147819
		lastStepMessage: 	nil
		lastCycleTime: 	6147841
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	6147819
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTHorizontalLineLayout class(Object)>>doesNotUnderstand: #alignBottom
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTHorizontalLineLayout>>bottom
3 November 2015 4:51:52.701465 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTHorizontalLineLayout(Object)>>doesNotUnderstand: #bottom
	Receiver: a RTHorizontalLineLayout
	Arguments and temporary variables: 
		aMessage: 	bottom
		exception: 	MessageNotUnderstood: RTHorizontalLineLayout>>bottom
		resumeValue: 	nil
	Receiver's instance variables: 
		affectedNodes: 	nil
		translator: 	a RTDirectLayoutTranslator
		eventHandler: 	nil
		currentIteraction: 	nil
		gapSize: 	30
		horizontalGap: 	60
		verticalGap: 	60
		horizontalOutGap: 	nil
		verticalOutGap: 	nil
		alignment: 	#top
		horizontallyStretchable: 	false
		verticallyStretchable: 	false


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'rootClasses := { RTShape . RTLayout }.
groups := rootClasses c...etc...
		itsSelection: 	a Text for 'rootClasses := { RTShape . RTLayout }.
groups := root...etc...
		itsSelectionString: 	'rootClasses := { RTShape . RTLayout }.
groups := rootClass...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	rootClasses := {RTShape.
	RTLayout}.
	groups := rootClasses
		collec...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@354)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(54525952) a RubCursor(435421184)...etc...
		fullBounds: 	(0@0) corner: (442@354)
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(22020096))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	92756
		lastStepMessage: 	nil
		lastCycleTime: 	92754
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	92756
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	92756
		lastStepMessage: 	nil
		lastCycleTime: 	92754
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	92756
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(38797312))(a DropListM...etc...
		lastStepTime: 	92756
		lastStepMessage: 	nil
		lastCycleTime: 	92754
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	92756
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTHorizontalLineLayout(Object)>>doesNotUnderstand: #bottom
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TRConstraint>>movable:
3 November 2015 4:54:16.877466 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

TRConstraint(Object)>>doesNotUnderstand: #movable:
	Receiver: a TRConstraint
	Arguments and temporary variables: 
		aMessage: 	movable: a RTElement
		exception: 	MessageNotUnderstood: TRConstraint>>movable:
		resumeValue: 	nil
	Receiver's instance variables: 
a TRConstraint

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
e := (RTBox new size: 50) element.
e @ RTDrag...etc...
		itsSelection: 	a Text for 'v := RTView new.
e := (RTBox new size: 50) element.
e...etc...
		itsSelectionString: 	'v := RTView new.
e := (RTBox new size: 50) element.
e @ RT...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	e := (RTBox new size: 50) element.
	e @ RTDraggabl...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@259)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(54525952) a RubCursor(435421184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(13631488))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	236876
		lastStepMessage: 	nil
		lastCycleTime: 	236896
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	236876
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	236876
		lastStepMessage: 	nil
		lastCycleTime: 	236896
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	236876
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	236876
		lastStepMessage: 	nil
		lastCycleTime: 	236896
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	236876
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TRConstraint(Object)>>doesNotUnderstand: #movable:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTNoShape>>box
3 November 2015 4:55:43.199467 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTNoShape(Object)>>doesNotUnderstand: #box
	Receiver: a RTNoShape
	Arguments and temporary variables: 
		aMessage: 	box
		exception: 	MessageNotUnderstood: RTNoShape>>box
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray


RTShapeBuilder>>doesNotUnderstand: #box
	Receiver: a RTShapeBuilder
	Arguments and temporary variables: 
		aMessage: 	box
	Receiver's instance variables: 
		shape: 	a RTNoShape
		createdElements: 	an OrderedCollection()
		shapeInitializer: 	#yourself


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
sb := RTShapeBuilder new box
height: #numberO...etc...
		itsSelection: 	a Text for 'v := RTView new.
sb := RTShapeBuilder new box
height:...etc...
		itsSelectionString: 	'v := RTView new.
sb := RTShapeBuilder new box
height: #num...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	sb := RTShapeBuilder new box
		height: #numberOfMe...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@183)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(819200000) a RubCursor(435421184...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(262668288))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(740556800))(a SearchMorp...etc...
		lastStepTime: 	323228
		lastStepMessage: 	nil
		lastCycleTime: 	323248
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	323228
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(740556800))(a SearchMorp...etc...
		lastStepTime: 	323228
		lastStepMessage: 	nil
		lastCycleTime: 	323248
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	323228
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(740556800))(a SearchMorp...etc...
		lastStepTime: 	323228
		lastStepMessage: 	nil
		lastCycleTime: 	323248
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	323228
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTNoShape(Object)>>doesNotUnderstand: #box
RTShapeBuilder>>doesNotUnderstand: #box
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTNoShape>>box
3 November 2015 4:55:54.255465 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTNoShape(Object)>>doesNotUnderstand: #box
	Receiver: a RTNoShape
	Arguments and temporary variables: 
		aMessage: 	box
		exception: 	MessageNotUnderstood: RTNoShape>>box
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray


RTShapeBuilder>>doesNotUnderstand: #box
	Receiver: a RTShapeBuilder
	Arguments and temporary variables: 
		aMessage: 	box
	Receiver's instance variables: 
		shape: 	a RTNoShape
		createdElements: 	an OrderedCollection()
		shapeInitializer: 	#yourself


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
sb := RTShapeBuilder new box
height: #numberO...etc...
		itsSelection: 	a Text for 'v := RTView new.
sb := RTShapeBuilder new box
height:...etc...
		itsSelectionString: 	'v := RTView new.
sb := RTShapeBuilder new box
height: #num...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	sb := RTShapeBuilder new box
		height: #numberOfMe...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@183)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(819200000) a RubCursor(435421184...etc...
		fullBounds: 	(0@0) corner: (442@183)
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(532676608))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	334334
		lastStepMessage: 	nil
		lastCycleTime: 	334334
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	334334
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	334334
		lastStepMessage: 	nil
		lastCycleTime: 	334334
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	334334
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	334334
		lastStepMessage: 	nil
		lastCycleTime: 	334334
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	334334
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTNoShape(Object)>>doesNotUnderstand: #box
RTShapeBuilder>>doesNotUnderstand: #box
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Color>>trans
3 November 2015 4:56:54.52147 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Color(Object)>>doesNotUnderstand: #trans
	Receiver: Color red
	Arguments and temporary variables: 
		aMessage: 	trans
		exception: 	MessageNotUnderstood: Color>>trans
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1072693248
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
v addAll: (((RTEllipse new size: 20; color: C...etc...
		itsSelection: 	a Text for 'v := RTView new.
v addAll: (((RTEllipse new size: 20;...etc...
		itsSelectionString: 	'v := RTView new.
v addAll: (((RTEllipse new size: 20; colo...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	v
		addAll:
			((RTEllipse new
				size: 20;
				c...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@259)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(819200000) a RubCursor(435421184...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(629145600))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	394518
		lastStepMessage: 	nil
		lastCycleTime: 	394538
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	394518
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	394518
		lastStepMessage: 	nil
		lastCycleTime: 	394538
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	394518
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	394518
		lastStepMessage: 	nil
		lastCycleTime: 	394538
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	394518
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #trans
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TRMorph>>drawOnMockCanvas
3 November 2015 5:02:00.855463 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

TRMorph(Object)>>doesNotUnderstand: #drawOnMockCanvas
	Receiver: a TRMorph(97255424)
	Arguments and temporary variables: 
		aMessage: 	drawOnMockCanvas
		exception: 	MessageNotUnderstood: TRMorph>>drawOnMockCanvas
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (500@500)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	nil
		shapeBeingPointed: 	nil
		shouldRefresh: 	false
		session: 	a Session


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
es := RTBox elementsOn: (1 to: 10).
v addAll:...etc...
		itsSelection: 	a Text for 'v := RTView new.
es := RTBox elementsOn: (1 to: 10).
...etc...
		itsSelectionString: 	'v := RTView new.
es := RTBox elementsOn: (1 to: 10).
v add...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	es := RTBox elementsOn: (1 to: 10).
	v addAll: es....etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@107)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1004273664) a RubCursor(43542118...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(414973952))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(1057226752))(a TRMorph(10572...etc...
		lastStepTime: 	700930
		lastStepMessage: 	nil
		lastCycleTime: 	700930
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	700930
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(1057226752))(a TRMorph(10572...etc...
		lastStepTime: 	700930
		lastStepMessage: 	nil
		lastCycleTime: 	700930
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	700930
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(1057226752))(a TRMorph(10572...etc...
		lastStepTime: 	700930
		lastStepMessage: 	nil
		lastCycleTime: 	700930
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	700930
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TRMorph(Object)>>doesNotUnderstand: #drawOnMockCanvas
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TRMorph>>drawOnMockCanvas
3 November 2015 5:02:22.195463 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

TRMorph(Object)>>doesNotUnderstand: #drawOnMockCanvas
	Receiver: a TRMorph(1031536640)
	Arguments and temporary variables: 
		aMessage: 	drawOnMockCanvas
		exception: 	MessageNotUnderstood: TRMorph>>drawOnMockCanvas
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (500@500)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	nil
		shapeBeingPointed: 	nil
		shouldRefresh: 	false
		session: 	a Session


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
es := RTBox elementsOn: (1 to: 10).
v addAll:...etc...
		itsSelection: 	a Text for 'v := RTView new.
es := RTBox elementsOn: (1 to: 10).
...etc...
		itsSelectionString: 	'v := RTView new.
es := RTBox elementsOn: (1 to: 10).
v add...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	es := RTBox elementsOn: (1 to: 10).
	v addAll: es....etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@107)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1004273664) a RubCursor(43542118...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(610271232))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(1057226752))(a TRMorph(10572...etc...
		lastStepTime: 	722232
		lastStepMessage: 	nil
		lastCycleTime: 	722252
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	722232
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(1057226752))(a TRMorph(10572...etc...
		lastStepTime: 	722232
		lastStepMessage: 	nil
		lastCycleTime: 	722252
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	722232
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(1057226752))(a TRMorph(10572...etc...
		lastStepTime: 	722232
		lastStepMessage: 	nil
		lastCycleTime: 	722252
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	722232
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) a N...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TRMorph(Object)>>doesNotUnderstand: #drawOnMockCanvas
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTAbstractElementShape class>>subClasses
3 November 2015 5:14:49.987469 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTAbstractElementShape class(Object)>>doesNotUnderstand: #subClasses
	Receiver: RTAbstractElementShape
	Arguments and temporary variables: 
		aMessage: 	subClasses
		exception: 	MessageNotUnderstood: RTAbstractElementShape class>>subClasses
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTShape
		methodDict: 	a MethodDictionary(#borderColor->RTAbstractElementShape>>#borderCol...etc...
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#(#height #width #borderColor #borderWidth)
		organization: 	a ClassOrganization
		subclasses: 	{RTBitmap. RTBox. RTEllipse. RTOSM. RTPolygon. RTSparkline}
		name: 	#RTAbstractElementShape
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


ByteSymbol(Symbol)>>rtValue:
	Receiver: #subClasses
	Arguments and temporary variables: 
		anObject: 	RTAbstractElementShape
	Receiver's instance variables: 
#subClasses

[ :e | 
fromElement := self elements elementFromModel: (aFromBlock rtValue: e model).
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: fromElement to: toE) ] ] ] in RTEdgeBuilder>>connectFrom:toAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aFromBlock: 	#yourself
		aBlockOrASymbol: 	#subClasses
		edges: 	a RTGroup()
		fromElement: 	a RTElement
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
fromElement := self elements elementFromModel: (aFromBlock rtVa...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	30
		attributes: 	nil


RTEdgeBuilder>>connectFrom:toAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		fromElement: 	a RTElement
		toElements: 	nil
		aFromBlock: 	#yourself
		aBlockOrASymbol: 	#subClasses
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
v @ RTDraggableView @ RTZoomableView.
classes...etc...
		itsSelection: 	a Text for 'v := RTView new.
v @ RTDraggableView @ RTZoomableView...etc...
		itsSelectionString: 	'v := RTView new.
v @ RTDraggableView @ RTZoomableView.
cla...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	v @ RTDraggableView @ RTZoomableView.
	classes := ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@316)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(489947136) a RubCursor(435421184...etc...
		fullBounds: 	(0@0) corner: (442@316)
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(215744512))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1465040
		lastStepMessage: 	nil
		lastCycleTime: 	1470086
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1470086
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) an ...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1465040
		lastStepMessage: 	nil
		lastCycleTime: 	1470086
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1470086
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1465040
		lastStepMessage: 	nil
		lastCycleTime: 	1470086
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1470086
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) an ...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTAbstractElementShape class(Object)>>doesNotUnderstand: #subClasses
ByteSymbol(Symbol)>>rtValue:
[ :e | 
fromElement := self elements elementFromModel: (aFromBlock rtValue: e model).
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: fromElement to: toE) ] ] ] in RTEdgeBuilder>>connectFrom:toAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectFrom:toAll:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTAbstractElementShape class>>superClasses
3 November 2015 5:14:55.069465 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTAbstractElementShape class(Object)>>doesNotUnderstand: #superClasses
	Receiver: RTAbstractElementShape
	Arguments and temporary variables: 
		aMessage: 	superClasses
		exception: 	MessageNotUnderstood: RTAbstractElementShape class>>superClasses
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTShape
		methodDict: 	a MethodDictionary(#borderColor->RTAbstractElementShape>>#borderCol...etc...
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#(#height #width #borderColor #borderWidth)
		organization: 	a ClassOrganization
		subclasses: 	{RTBitmap. RTBox. RTEllipse. RTOSM. RTPolygon. RTSparkline}
		name: 	#RTAbstractElementShape
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


ByteSymbol(Symbol)>>rtValue:
	Receiver: #superClasses
	Arguments and temporary variables: 
		anObject: 	RTAbstractElementShape
	Receiver's instance variables: 
#superClasses

[ :e | 
fromElement := self elements elementFromModel: (aFromBlock rtValue: e model).
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: fromElement to: toE) ] ] ] in RTEdgeBuilder>>connectFrom:toAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aFromBlock: 	#yourself
		aBlockOrASymbol: 	#superClasses
		edges: 	a RTGroup()
		fromElement: 	a RTElement
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
fromElement := self elements elementFromModel: (aFromBlock rtVa...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	30
		attributes: 	nil


RTEdgeBuilder>>connectFrom:toAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		fromElement: 	a RTElement
		toElements: 	nil
		aFromBlock: 	#yourself
		aBlockOrASymbol: 	#superClasses
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
v @ RTDraggableView @ RTZoomableView.
classes...etc...
		itsSelection: 	a Text for 'v := RTView new.
v @ RTDraggableView @ RTZoomableView...etc...
		itsSelectionString: 	'v := RTView new.
v @ RTDraggableView @ RTZoomableView.
cla...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	v @ RTDraggableView @ RTZoomableView.
	classes := ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@316)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(489947136) a RubCursor(435421184...etc...
		fullBounds: 	(0@0) corner: (442@316)
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(183762944))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1465040
		lastStepMessage: 	nil
		lastCycleTime: 	1475140
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1475140
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) an ...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1465040
		lastStepMessage: 	nil
		lastCycleTime: 	1475140
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1475140
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1465040
		lastStepMessage: 	nil
		lastCycleTime: 	1475140
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1475140
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) an ...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTAbstractElementShape class(Object)>>doesNotUnderstand: #superClasses
ByteSymbol(Symbol)>>rtValue:
[ :e | 
fromElement := self elements elementFromModel: (aFromBlock rtValue: e model).
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: fromElement to: toE) ] ] ] in RTEdgeBuilder>>connectFrom:toAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectFrom:toAll:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
AssertionFailure: Provide a set of elements instead of one single element
3 November 2015 5:21:19.255463 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTGroup(Object)>>assert:description:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		aBlock: 	[ objects isCollection ]
		aStringOrBlock: 	'Provide a set of elements instead of one single element'
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	30
		attributes: 	nil


RTGroup>>elementsFromModels:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		t: 	nil
		objects: 	RTShape
		answer: 	nil
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	30
		attributes: 	nil


[ :e | 
fromElement := self elements elementFromModel: (aFromBlock rtValue: e model).
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: fromElement to: toE) ] ] ] in RTEdgeBuilder>>connectFrom:toAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aFromBlock: 	#yourself
		aBlockOrASymbol: 	#superclass
		edges: 	a RTGroup()
		fromElement: 	a RTElement
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
fromElement := self elements elementFromModel: (aFromBlock rtVa...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	30
		attributes: 	nil


RTEdgeBuilder>>connectFrom:toAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		fromElement: 	a RTElement
		toElements: 	nil
		aFromBlock: 	#yourself
		aBlockOrASymbol: 	#superclass
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
v @ RTDraggableView @ RTZoomableView.
classes...etc...
		itsSelection: 	a Text for 'v := RTView new.
v @ RTDraggableView @ RTZoomableView...etc...
		itsSelectionString: 	'v := RTView new.
v @ RTDraggableView @ RTZoomableView.
cla...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	v @ RTDraggableView @ RTZoomableView.
	classes := ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@316)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(489947136) a RubCursor(435421184...etc...
		fullBounds: 	(0@0) corner: (442@316)
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(818937856))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1465040
		lastStepMessage: 	nil
		lastCycleTime: 	1859346
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1859346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) an ...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1465040
		lastStepMessage: 	nil
		lastCycleTime: 	1859346
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1859346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1465040
		lastStepMessage: 	nil
		lastCycleTime: 	1859346
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1859346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) an ...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTGroup(Object)>>assert:description:
RTGroup>>elementsFromModels:
[ :e | 
fromElement := self elements elementFromModel: (aFromBlock rtValue: e model).
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: fromElement to: toE) ] ] ] in RTEdgeBuilder>>connectFrom:toAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectFrom:toAll:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTAbstractElementShape class>>subclass
3 November 2015 5:21:35.919467 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTAbstractElementShape class(Object)>>doesNotUnderstand: #subclass
	Receiver: RTAbstractElementShape
	Arguments and temporary variables: 
		aMessage: 	subclass
		exception: 	MessageNotUnderstood: RTAbstractElementShape class>>subclass
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTShape
		methodDict: 	a MethodDictionary(#borderColor->RTAbstractElementShape>>#borderCol...etc...
		format: 	140
		layout: 	a FixedLayout
		instanceVariables: 	#(#height #width #borderColor #borderWidth)
		organization: 	a ClassOrganization
		subclasses: 	{RTBitmap. RTBox. RTEllipse. RTOSM. RTPolygon. RTSparkline}
		name: 	#RTAbstractElementShape
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


ByteSymbol(Symbol)>>rtValue:
	Receiver: #subclass
	Arguments and temporary variables: 
		anObject: 	RTAbstractElementShape
	Receiver's instance variables: 
#subclass

[ :e | 
fromElement := self elements elementFromModel: (aFromBlock rtValue: e model).
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: fromElement to: toE) ] ] ] in RTEdgeBuilder>>connectFrom:toAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aFromBlock: 	#yourself
		aBlockOrASymbol: 	#subclass
		edges: 	a RTGroup()
		fromElement: 	a RTElement
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
fromElement := self elements elementFromModel: (aFromBlock rtVa...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	30
		attributes: 	nil


RTEdgeBuilder>>connectFrom:toAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		fromElement: 	a RTElement
		toElements: 	nil
		aFromBlock: 	#yourself
		aBlockOrASymbol: 	#subclass
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
v @ RTDraggableView @ RTZoomableView.
classes...etc...
		itsSelection: 	a Text for 'v := RTView new.
v @ RTDraggableView @ RTZoomableView...etc...
		itsSelectionString: 	'v := RTView new.
v @ RTDraggableView @ RTZoomableView.
cla...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	v @ RTDraggableView @ RTZoomableView.
	classes := ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(13107200)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(13107200)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (442@316)
		owner: 	a TransformWithLayoutMorph(581435392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(489947136) a RubCursor(435421184...etc...
		fullBounds: 	(0@0) corner: (442@316)
		color: 	Color transparent
		extension: 	a MorphExtension (479199232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(543162368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(435421184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(389283840))
		getMenuPolicy: 	a RubEditingArea(13107200)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(459538432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1865374
		lastStepMessage: 	nil
		lastCycleTime: 	1875998
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1876002
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) an ...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1865374
		lastStepMessage: 	nil
		lastCycleTime: 	1875998
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1876002
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1865374
		lastStepMessage: 	nil
		lastCycleTime: 	1875998
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(435421184)))
		lastAlarmTime: 	1876002
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(1046740992) an ...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTAbstractElementShape class(Object)>>doesNotUnderstand: #subclass
ByteSymbol(Symbol)>>rtValue:
[ :e | 
fromElement := self elements elementFromModel: (aFromBlock rtValue: e model).
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: fromElement to: toE) ] ] ] in RTEdgeBuilder>>connectFrom:toAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectFrom:toAll:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTHTML5Exporter class>>export:
3 November 2015 5:28:56.663463 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTHTML5Exporter class(Object)>>doesNotUnderstand: #export:
	Receiver: RTHTML5Exporter
	Arguments and temporary variables: 
		aMessage: 	export: a RTView
		exception: 	MessageNotUnderstood: RTHTML5Exporter class>>export:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTObject
		methodDict: 	a MethodDictionary(#addEnd->RTHTML5Exporter>>#addEnd #addStart:->RT...etc...
		format: 	146
		layout: 	a FixedLayout
		instanceVariables: 	#(#stream #directory #fileName #title #exportFixedShapes #ro...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTHTML5Exporter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Exporter-HTML5'
		traitComposition: 	{}
		localSelectors: 	nil


[ RTHTML5Exporter export: self ] in RTView>>setDefaultMenu
	Receiver: a RTView
	Arguments and temporary variables: 
		b: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		elements: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement ...etc...
		edges: 	an OrderedCollection(a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEd...etc...
		trCanvas: 	a TRCanvas


RTMenuItem>>execute:
	Receiver: a RTMenuItem
	Arguments and temporary variables: 
		m: 	a TRLabelShape
	Receiver's instance variables: 
		name: 	'HTML'
		callback: 	[ RTHTML5Exporter export: self ]
		selected: 	false
		after: 	nil
		rawmenu: 	a TRLabelShape
		color: 	(Color r: 0.0 g: 0.0 b: 1.0 alpha: 0.498)
		background: 	nil


[ item execute: m ] in [ :item | 
| m |
m := nil.
m := self menu: item label background: (Color white alpha: 0) callback: [ item execute: m ].
item menu: m.
m ] in RTMenuBuilder>>enterSubmenuOf:
	Receiver: a RTMenuBuilder
	Arguments and temporary variables: 
		lbl: 	a TRLabelShape
		menu: 	nil
		labels: 	nil
		item: 	a RTMenuItem
		m: 	a TRLabelShape
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		parentMenus: 	an OrderedCollection(a RTMenu a RTMenu)
		closingSubmenuFlag: 	false


[ :event | callback value ] in RTMenuBuilder>>menu:background:highlightColor:callback:
	Receiver: a RTMenuBuilder
	Arguments and temporary variables: 
		aTitle: 	'HTML'
		aColor: 	(Color transparent)
		aColor2: 	(Color r: 1.0 g: 1.0 b: 1.0 alpha: 0.2)
		callback: 	[ item execute: m ]
		lbl: 	nil
		index: 	nil
		event: 	a TRMouseLeftClick
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		parentMenus: 	an OrderedCollection(a RTMenu a RTMenu)
		closingSubmenuFlag: 	false


BlockClosure>>cull:
	Receiver: [ :event | callback value ]
	Arguments and temporary variables: 
		anArg: 	a TRMouseLeftClick
	Receiver's instance variables: 
		outerContext: 	RTMenuBuilder>>menu:background:highlightColor:callback:
		startpc: 	222
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :event | callback value ]
	Arguments and temporary variables: 
		firstArg: 	a TRMouseLeftClick
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	RTMenuBuilder>>menu:background:highlightColor:callback:
		startpc: 	222
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseLeftClick
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a RTMenuBuilder
		action: 	[ :event | callback value ]


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	nil
		ex: 	UnhandledError
		copy: 	nil
		onDoCtx: 	nil
		process: 	nil
		handler: 	nil
		bottom: 	nil
		thisCtx: 	nil
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0



--- The full stack ---
RTHTML5Exporter class(Object)>>doesNotUnderstand: #export:
[ RTHTML5Exporter export: self ] in RTView>>setDefaultMenu
RTMenuItem>>execute:
[ item execute: m ] in [ :item | 
| m |
m := nil.
m := self menu: item label background: (Color white alpha: 0) callback: [ item execute: m ].
item menu: m.
m ] in RTMenuBuilder>>enterSubmenuOf:
[ :event | callback value ] in RTMenuBuilder>>menu:background:highlightColor:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ 
		onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ 
				"Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler."
				^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RQTMainWindow>>label:
3 November 2015 6:04:00.511464 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RQTMainWindow(Object)>>doesNotUnderstand: #label:
	Receiver: a RQTMainWindow
	Arguments and temporary variables: 
		aMessage: 	label: 'RQT-Graph'
		exception: 	MessageNotUnderstood: RQTMainWindow>>label:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	nil


RQTMainWindow>>initialize
	Receiver: a RQTMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	nil


RQTMainWindow class(Behavior)>>new
	Receiver: RQTMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#graphExample:->RQTMainWindow>>#graphExample: #i...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#(#bounds)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RQTMainWindow
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RQT-interface'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodes:= Dictionary new.
nodes at: ''France'' put: (Array with:...etc...
		itsSelection: 	a Text for 'nodes:= Dictionary new.
nodes at: ''France'' put: (Ar...etc...
		itsSelectionString: 	'nodes:= Dictionary new.
nodes at: ''France'' put: (Array w...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodes := Dictionary new.
	nodes at: 'France' put: (Array with: Color...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(546308096)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(546308096)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1022885888)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(546308096)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@126)
		owner: 	a TransformWithLayoutMorph(71041024)
		submorphs: 	an Array(a RubPrimarySelectionMorph(900988928) a RubCursor(950534144...etc...
		fullBounds: 	(0@0) corner: (580@126)
		color: 	Color transparent
		extension: 	a MorphExtension (1024458752) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(32768000)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950534144)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1007419392))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1022885888)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(962854912))(a DropList...etc...
		lastStepTime: 	4420659
		lastStepMessage: 	nil
		lastCycleTime: 	4420659
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950534144)))
		lastAlarmTime: 	4420659
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(718012416) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(962854912))(a DropList...etc...
		lastStepTime: 	4420659
		lastStepMessage: 	nil
		lastCycleTime: 	4420659
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950534144)))
		lastAlarmTime: 	4420659
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(962854912))(a DropList...etc...
		lastStepTime: 	4420659
		lastStepMessage: 	nil
		lastCycleTime: 	4420659
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950534144)))
		lastAlarmTime: 	4420659
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(718012416) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RQTMainWindow(Object)>>doesNotUnderstand: #label:
RQTMainWindow>>initialize
RQTMainWindow class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RQTMainWindow>>label:
3 November 2015 6:04:23.153469 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RQTMainWindow(Object)>>doesNotUnderstand: #label:
	Receiver: a RQTMainWindow
	Arguments and temporary variables: 
		aMessage: 	label: ''
		exception: 	MessageNotUnderstood: RQTMainWindow>>label:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	nil


RQTMainWindow>>initialize
	Receiver: a RQTMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	nil


RQTMainWindow class(Behavior)>>new
	Receiver: RQTMainWindow
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#graphExample:->RQTMainWindow>>#graphExample: #i...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#(#bounds)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RQTMainWindow
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RQT-interface'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ RQTMainWindow
		new;
		graphExample: nodes
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(546308096)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(546308096)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1022885888)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(546308096)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@126)
		owner: 	a TransformWithLayoutMorph(71041024)
		submorphs: 	an Array(a RubPrimarySelectionMorph(900988928) a RubCursor(950534144...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1024458752) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(32768000)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950534144)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(695205888))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1022885888)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(962854912))(a DropList...etc...
		lastStepTime: 	4443162
		lastStepMessage: 	nil
		lastCycleTime: 	4443184
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950534144)))
		lastAlarmTime: 	4443162
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(718012416) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(962854912))(a DropList...etc...
		lastStepTime: 	4443162
		lastStepMessage: 	nil
		lastCycleTime: 	4443184
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950534144)))
		lastAlarmTime: 	4443162
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(962854912))(a DropList...etc...
		lastStepTime: 	4443162
		lastStepMessage: 	nil
		lastCycleTime: 	4443184
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950534144)))
		lastAlarmTime: 	4443162
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(718012416) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RQTMainWindow(Object)>>doesNotUnderstand: #label:
RQTMainWindow>>initialize
RQTMainWindow class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RQTMainWindow class>>graphExample:
3 November 2015 6:04:37.977466 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RQTMainWindow class(Object)>>doesNotUnderstand: #graphExample:
	Receiver: RQTMainWindow
	Arguments and temporary variables: 
		aMessage: 	graphExample: a Dictionary('Belgium'->{Color black. Color yellow. Col...etc...
		exception: 	MessageNotUnderstood: RQTMainWindow class>>graphExample:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#graphExample:->RQTMainWindow>>#graphExample: #i...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#(#bounds)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RQTMainWindow
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RQT-interface'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodes:= Dictionary new.
nodes at: ''France'' put: (Array with:...etc...
		itsSelection: 	a Text for 'nodes:= Dictionary new.
nodes at: ''France'' put: (Ar...etc...
		itsSelectionString: 	'nodes:= Dictionary new.
nodes at: ''France'' put: (Array w...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodes := Dictionary new.
	nodes at: 'France' put: (Array with: Color...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(546308096)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(546308096)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1022885888)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(546308096)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@126)
		owner: 	a TransformWithLayoutMorph(71041024)
		submorphs: 	an Array(a RubPrimarySelectionMorph(900988928) a RubCursor(950534144...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1024458752) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(32768000)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(950534144)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(622854144))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1022885888)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(962854912))(a DropList...etc...
		lastStepTime: 	4458010
		lastStepMessage: 	nil
		lastCycleTime: 	4458032
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950534144)))
		lastAlarmTime: 	4458010
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(718012416) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(962854912))(a DropList...etc...
		lastStepTime: 	4458010
		lastStepMessage: 	nil
		lastCycleTime: 	4458032
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950534144)))
		lastAlarmTime: 	4458010
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(962854912))(a DropList...etc...
		lastStepTime: 	4458010
		lastStepMessage: 	nil
		lastCycleTime: 	4458032
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950534144)))
		lastAlarmTime: 	4458010
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(718012416) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RQTMainWindow class(Object)>>doesNotUnderstand: #graphExample:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RQTMainWindow class>>graphExample:
3 November 2015 6:09:36.463466 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RQTMainWindow class(Object)>>doesNotUnderstand: #graphExample:
	Receiver: RQTMainWindow
	Arguments and temporary variables: 
		aMessage: 	graphExample: #(1 2 3 4)
		exception: 	MessageNotUnderstood: RQTMainWindow class>>graphExample:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#graphExample:->RQTMainWindow>>#graphExample: #i...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#(#bounds)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RQTMainWindow
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RQT-interface'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodes := #(1 2 3 4).
RQTMainWindow new; graphExample: nodes.'
		itsSelection: 	a Text for 'nodes := #(1 2 3 4).
RQTMainWindow new; graphExample:...etc...
		itsSelectionString: 	'nodes := #(1 2 3 4).
RQTMainWindow new; graphExample: node...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodes := #(1 2 3 4).
	^ RQTMainWindow
		new;
		graphExample: nodes
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(468713472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(468713472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(200278016)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(468713472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(322174976)
		submorphs: 	an Array(a RubPrimarySelectionMorph(724041728) a RubCursor(933232640...etc...
		fullBounds: 	(0@0) corner: (580@50)
		color: 	Color transparent
		extension: 	a MorphExtension (1019215872) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(283901952)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(933232640)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(764936192))
		getMenuPolicy: 	a RubEditingArea(468713472)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(200278016)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(15728640))(a SearchMorph...etc...
		lastStepTime: 	4756540
		lastStepMessage: 	nil
		lastCycleTime: 	4756536
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(933232640)))
		lastAlarmTime: 	4756540
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(209715200) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(15728640))(a SearchMorph...etc...
		lastStepTime: 	4756540
		lastStepMessage: 	nil
		lastCycleTime: 	4756536
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(933232640)))
		lastAlarmTime: 	4756540
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(15728640))(a SearchMorph...etc...
		lastStepTime: 	4756540
		lastStepMessage: 	nil
		lastCycleTime: 	4756536
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(933232640)))
		lastAlarmTime: 	4756540
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(209715200) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RQTMainWindow class(Object)>>doesNotUnderstand: #graphExample:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RQTMainWindow class>>graphExample:
3 November 2015 6:10:50.467471 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RQTMainWindow class(Object)>>doesNotUnderstand: #graphExample:
	Receiver: RQTMainWindow
	Arguments and temporary variables: 
		aMessage: 	graphExample: #(1 2 3 4)
		exception: 	MessageNotUnderstood: RQTMainWindow class>>graphExample:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#graphExample:->RQTMainWindow>>#graphExample: #i...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#(#bounds)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RQTMainWindow
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RQT-interface'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodes := #(1 2 3 4).
RQTMainWindow new; graphExample: nodes.'
		itsSelection: 	a Text for 'nodes := #(1 2 3 4).
RQTMainWindow new; graphExample:...etc...
		itsSelectionString: 	'nodes := #(1 2 3 4).
RQTMainWindow new; graphExample: node...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodes := #(1 2 3 4).
	^ RQTMainWindow
		new;
		graphExample: nodes
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(468713472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(468713472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(200278016)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(468713472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(322174976)
		submorphs: 	an Array(a RubPrimarySelectionMorph(724041728) a RubCursor(933232640...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1019215872) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(283901952)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(933232640)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(888406016))
		getMenuPolicy: 	a RubEditingArea(468713472)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(200278016)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(15728640))(a SearchMorph...etc...
		lastStepTime: 	4830466
		lastStepMessage: 	nil
		lastCycleTime: 	4830488
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(933232640)))
		lastAlarmTime: 	4830466
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(209715200) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(15728640))(a SearchMorph...etc...
		lastStepTime: 	4830466
		lastStepMessage: 	nil
		lastCycleTime: 	4830488
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(933232640)))
		lastAlarmTime: 	4830466
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(15728640))(a SearchMorph...etc...
		lastStepTime: 	4830466
		lastStepMessage: 	nil
		lastCycleTime: 	4830488
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(933232640)))
		lastAlarmTime: 	4830466
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(209715200) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RQTMainWindow class(Object)>>doesNotUnderstand: #graphExample:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Array>>values
3 November 2015 6:11:27.797466 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Array(Object)>>doesNotUnderstand: #values
	Receiver: #(1 2 3 4)
	Arguments and temporary variables: 
		aMessage: 	values
		exception: 	MessageNotUnderstood: Array>>values
		resumeValue: 	nil
	Receiver's instance variables: 
#(1 2 3 4)

RQTMainWindow>>graphExample:
	Receiver: a RQTMainWindow
	Arguments and temporary variables: 
		nodes: 	#(1 2 3 4)
		v: 	a RTView
		elementShape: 	a RTEllipse
		e1: 	nil
	Receiver's instance variables: 
		bounds: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodes := #(1 2 3 4).
RQTMainWindow new graphExample: nodes.'
		itsSelection: 	a Text for 'nodes := #(1 2 3 4).
RQTMainWindow new graphExample: ...etc...
		itsSelectionString: 	'nodes := #(1 2 3 4).
RQTMainWindow new graphExample: nodes...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodes := #(1 2 3 4).
	^ RQTMainWindow new graphExample: nodes
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(468713472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(468713472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(200278016)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(468713472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(322174976)
		submorphs: 	an Array(a RubPrimarySelectionMorph(724041728) a RubCursor(933232640...etc...
		fullBounds: 	(0@0) corner: (580@50)
		color: 	Color transparent
		extension: 	a MorphExtension (1019215872) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(283901952)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(933232640)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(922484736))
		getMenuPolicy: 	a RubEditingArea(468713472)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(200278016)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(15728640))(a SearchMorph...etc...
		lastStepTime: 	4867852
		lastStepMessage: 	nil
		lastCycleTime: 	4867850
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(933232640)))
		lastAlarmTime: 	4867852
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(209715200) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(15728640))(a SearchMorph...etc...
		lastStepTime: 	4867852
		lastStepMessage: 	nil
		lastCycleTime: 	4867850
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(933232640)))
		lastAlarmTime: 	4867852
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(15728640))(a SearchMorph...etc...
		lastStepTime: 	4867852
		lastStepMessage: 	nil
		lastCycleTime: 	4867850
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(933232640)))
		lastAlarmTime: 	4867852
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(209715200) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #values
RQTMainWindow>>graphExample:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Array>>elements
3 November 2015 6:16:54.127468 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Array(Object)>>doesNotUnderstand: #elements
	Receiver: #(1 2 3 4)
	Arguments and temporary variables: 
		aMessage: 	elements
		exception: 	MessageNotUnderstood: Array>>elements
		resumeValue: 	nil
	Receiver's instance variables: 
#(1 2 3 4)

RQTMainWindow>>graphExample:
	Receiver: a RQTMainWindow
	Arguments and temporary variables: 
		nodes: 	#(1 2 3 4)
		v: 	a RTView
		elementShape: 	a RTEllipse
		e1: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		edge: 	nil
	Receiver's instance variables: 
		bounds: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodes := #(1 2 3 4).
RQTMainWindow new graphExample: nodes.'
		itsSelection: 	a Text for 'nodes := #(1 2 3 4).
RQTMainWindow new graphExample: ...etc...
		itsSelectionString: 	'nodes := #(1 2 3 4).
RQTMainWindow new graphExample: nodes...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodes := #(1 2 3 4).
	^ RQTMainWindow new graphExample: nodes
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(468713472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(468713472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(200278016)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(468713472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@69)
		owner: 	a TransformWithLayoutMorph(322174976)
		submorphs: 	an Array(a RubPrimarySelectionMorph(724041728) a RubCursor(933232640...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1019215872) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(283901952)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(933232640)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(401866752))
		getMenuPolicy: 	a RubEditingArea(468713472)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(200278016)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(962854912))(a DropList...etc...
		lastStepTime: 	5194134
		lastStepMessage: 	nil
		lastCycleTime: 	5194156
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(933232640)))
		lastAlarmTime: 	5194134
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(209715200) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(962854912))(a DropList...etc...
		lastStepTime: 	5194134
		lastStepMessage: 	nil
		lastCycleTime: 	5194156
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(933232640)))
		lastAlarmTime: 	5194134
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(962854912))(a DropList...etc...
		lastStepTime: 	5194134
		lastStepMessage: 	nil
		lastCycleTime: 	5194156
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(933232640)))
		lastAlarmTime: 	5194134
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(209715200) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #elements
RQTMainWindow>>graphExample:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
InvalidGlobalName: node: Class name does not start with a valid Global Var Initial
5 November 2015 4:32:57.100189 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

SlotClassBuilder>>validateClassName
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	Object
		name: 	#node
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


SlotClassBuilder>>name:
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 
		aName: 	#node
	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	Object
		name: 	#node
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClass: (self layoutForType: type);
	slots: instanceVariablesString asSlotCollection;
	sharedVariablesFromString: classVariablesString;
	sharedPools: sharedPoolsString;
	category: category;
	environment: environment;
	copyTraitCompositionFromExistingClass;
	copyClassSlotsFromExistingClass ] in OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		name: 	#node
		environment: 	a SystemDictionary(lots of globals)
		superClass: 	Object
		type: 	#normal
		instanceVariablesString: 	''
		classVariablesString: 	''
		sharedPoolsString: 	''
		category: 	'RQT-Pharo'
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
an OldClassBuilderAdapter

PharoClassInstaller class(AbstractClassInstaller class)>>make:
	Receiver: PharoClassInstaller
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClas...etc...
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
		superclass: 	AbstractClassInstaller
		methodDict: 	a MethodDictionary(#basicClassDefinitionChangedFrom:to:using:->Phar...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#('environment' 'instanceModification' 'methodUpdateStrategy...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoClassInstaller
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-ClassBuilder'
		traitComposition: 	{}
		localSelectors: 	nil


OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		name: 	#node
		environment: 	a SystemDictionary(lots of globals)
		superClass: 	Object
		type: 	#normal
		instanceVariablesString: 	''
		classVariablesString: 	''
		sharedPoolsString: 	''
		category: 	'RQT-Pharo'
	Receiver's instance variables: 
an OldClassBuilderAdapter

OldClassBuilderAdapter>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		newSuper: 	Object
		t: 	#node
		f: 	''
		d: 	''
		s: 	''
		cat: 	'RQT-Pharo'
	Receiver's instance variables: 
an OldClassBuilderAdapter

Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: Object
	Arguments and temporary variables: 
		t: 	#node
		f: 	''
		d: 	''
		s: 	''
		cat: 	'RQT-Pharo'
		class: 	nil
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 383)
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 110...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Class)>>subclass:instanceVariableNames:classVariableNames:category:
	Receiver: Object
	Arguments and temporary variables: 
		aSubclassSymbol: 	#node
		instVarNames: 	''
		classVarNames: 	''
		aCategorySymbol: 	'RQT-Pharo'
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 383)
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(size 110...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ Object
		subclass: #node
		instanceVariableNames: ''
		classVariab...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


PackageTreeNautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: #node
	instanceVariableNames: ''''
	classVariableNam...etc...
		aController: 	a PluggableTextMorphWithLimits(210501632)
		aClass: 	Graph
		oldClass: 	Object
		class: 	nil
		newClassName: 	'node'
		defTokens: 	an OrderedCollection('Object' 'subclass:' '#node' 'instanceVariableN...etc...
		keywdIx: 	2
		envt: 	a SystemDictionary(lots of globals)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(933232640)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(210501632)
		sourceCodePanel: 	a PanelMorph(76808192)
		commentTextArea: 	a PluggableTextMorph(393216000)
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(1043333120)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(210501632)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(750780416)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(451936256)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: #node
	instanceVariableNames: ''''
	classVariableNam...etc...
		aController: 	a PluggableTextMorphWithLimits(210501632)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(933232640)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(210501632)
		sourceCodePanel: 	a PanelMorph(76808192)
		commentTextArea: 	a PluggableTextMorph(393216000)
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(1043333120)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(210501632)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(750780416)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(451936256)
		packagePatternString: 	nil


ClassOrMethodDefinitionAcceptor>>acceptInstanceSide:notifying:
	Receiver: a ClassOrMethodDefinitionAcceptor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		model: 	a PackageTreeNautilusUI


ClassOrMethodDefinitionAcceptor>>accept:notifying:
	Receiver: a ClassOrMethodDefinitionAcceptor
	Arguments and temporary variables: 
		source: 	'Object subclass: #node
	instanceVariableNames: ''''
	classVariableName...etc...
		aController: 	a PluggableTextMorphWithLimits(210501632)
	Receiver's instance variables: 
		model: 	a PackageTreeNautilusUI


PackageTreeNautilusUI(NautilusUI)>>compileSource:notifying:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aText: 	a Text for 'Object subclass: #node
	instanceVariableNames: ''''
	classVa...etc...
		aController: 	a PluggableTextMorphWithLimits(210501632)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(933232640)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(210501632)
		sourceCodePanel: 	a PanelMorph(76808192)
		commentTextArea: 	a PluggableTextMorph(393216000)
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(1043333120)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(210501632)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(750780416)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(451936256)
		packagePatternString: 	nil


[ 
^ setTextSelector isNil
	or: [ 
		setTextSelector numArgs = 2
			ifTrue: [ model perform: setTextSelector with: acceptedText with: self ]
			ifFalse: [ model perform: setTextSelector with: acceptedText ] ] ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
	Receiver: a PluggableTextMorphWithLimits(210501632)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'Object subclass: #node
	instanceVariableNames: ''''
	...etc...
	Receiver's instance variables: 
		bounds: 	(24.0@556.0) corner: (444.0@1008.0)
		owner: 	a MultipleMethodsEditor(750780416)
		submorphs: 	an Array(an AlphaImageMorph(251396096) a TransformMorph(794820608))
		fullBounds: 	(24@556) corner: (444@1008)
		color: 	Color white
		extension: 	a MorphExtension (727449600) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(253231104)
		scroller: 	a TransformMorph(794820608)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(23855104)
		textMorph: 	a TextMorphForEditView(3670016)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 22)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(251396096)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


BlockClosure>>ensure:
	Receiver: [ 
^ setTextSelector isNil
	or: [ 
		setTextSelector numArgs = 2
			ifTrue: [ model perfor...etc...
	Arguments and temporary variables: 
		aBlock: 	[ unstyledAcceptText := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInMod...etc...
		startpc: 	64
		numArgs: 	0


PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
	Receiver: a PluggableTextMorphWithLimits(210501632)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'Object subclass: #node
	instanceVariableNames: ''''
	...etc...
	Receiver's instance variables: 
		bounds: 	(24.0@556.0) corner: (444.0@1008.0)
		owner: 	a MultipleMethodsEditor(750780416)
		submorphs: 	an Array(an AlphaImageMorph(251396096) a TransformMorph(794820608))
		fullBounds: 	(24@556) corner: (444@1008)
		color: 	Color white
		extension: 	a MorphExtension (727449600) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(253231104)
		scroller: 	a TransformMorph(794820608)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(23855104)
		textMorph: 	a TextMorphForEditView(3670016)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 22)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(251396096)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptBasic
	Receiver: a PluggableTextMorphWithLimits(210501632)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(23 to: 22)
		saveScrollerOffset: 	(-3.0@0.0)
	Receiver's instance variables: 
		bounds: 	(24.0@556.0) corner: (444.0@1008.0)
		owner: 	a MultipleMethodsEditor(750780416)
		submorphs: 	an Array(an AlphaImageMorph(251396096) a TransformMorph(794820608))
		fullBounds: 	(24@556) corner: (444@1008)
		color: 	Color white
		extension: 	a MorphExtension (727449600) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(253231104)
		scroller: 	a TransformMorph(794820608)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(23855104)
		textMorph: 	a TextMorphForEditView(3670016)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 22)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(251396096)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits>>acceptBasic
	Receiver: a PluggableTextMorphWithLimits(210501632)
	Arguments and temporary variables: 
		saveSelection: 	nil
		saveScrollerOffset: 	nil
	Receiver's instance variables: 
		bounds: 	(24.0@556.0) corner: (444.0@1008.0)
		owner: 	a MultipleMethodsEditor(750780416)
		submorphs: 	an Array(an AlphaImageMorph(251396096) a TransformMorph(794820608))
		fullBounds: 	(24@556) corner: (444@1008)
		color: 	Color white
		extension: 	a MorphExtension (727449600) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(253231104)
		scroller: 	a TransformMorph(794820608)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(23855104)
		textMorph: 	a TextMorphForEditView(3670016)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 22)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(251396096)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>accept
	Receiver: a PluggableTextMorphWithLimits(210501632)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(24.0@556.0) corner: (444.0@1008.0)
		owner: 	a MultipleMethodsEditor(750780416)
		submorphs: 	an Array(an AlphaImageMorph(251396096) a TransformMorph(794820608))
		fullBounds: 	(24@556) corner: (444@1008)
		color: 	Color white
		extension: 	a MorphExtension (727449600) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(253231104)
		scroller: 	a TransformMorph(794820608)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(23855104)
		textMorph: 	a TextMorphForEditView(3670016)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 22)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(251396096)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView>>acceptContents
	Receiver: a TextMorphForEditView(3670016)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (412@78)
		owner: 	a TransformMorph(794820608)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (412@78)
		color: 	Color black
		extension: 	a MorphExtension (67633152) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'Object subclass: #node
	instanceVariableNames: ''''
	classVar...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0)
		editView: 	a PluggableTextMorphWithLimits(210501632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ :morph | morph acceptContents ] in TextMorph class>>buildTextEditorKeymapsOn:
	Receiver: TextMorph
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a TextMorphForEditView(3670016)
	Receiver's instance variables: 
		superclass: 	BorderedMorph
		methodDict: 	a MethodDictionary(size 206)
		format: 	168
		layout: 	a FixedLayout
		instanceVariables: 	#(#textStyle #text #wrapFlag #paragraph #editor #container #...etc...
		organization: 	a ClassOrganization
		subclasses: 	{StringMorphEditor. TextMorphForEditView. GrowlMorph}
		name: 	#TextMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Base-Basic'
		traitComposition: 	TAbleToRotate
		localSelectors: 	a Set(#editorClass #setTextStyle: #setFirstCharacter: #margins:...etc...
		announcer: 	nil


BlockClosure>>cull:
	Receiver: [ :morph | morph acceptContents ]
	Arguments and temporary variables: 
		anArg: 	a TextMorphForEditView(3670016)
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	56
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph acceptContents ]
	Arguments and temporary variables: 
		firstArg: 	a TextMorphForEditView(3670016)
		secondArg: 	a TextMorphForEditView(3670016)
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	56
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph acceptContents ]
	Arguments and temporary variables: 
		firstArg: 	a TextMorphForEditView(3670016)
		secondArg: 	a TextMorphForEditView(3670016)
		thirdArg: 	[keystroke '<Ctrl-s>']
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	56
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#TextMorph)
	Arguments and temporary variables: 
		aKeymap: 	#accept on Ctrl + S do [ :morph | morph acceptContents ]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
	Receiver's instance variables: 
		target: 	a TextMorphForEditView(3670016)
		category: 	a KMCategory
		morph: 	a TextMorphForEditView(3670016)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #accept on Ctrl + S do [ :morph | morph acceptContents ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		listeners: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		l: 	aKMCategoryTarget(#TextMorph)
	Receiver's instance variables: 
		action: 	[ :morph | morph acceptContents ]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #accept on Ctrl + S do [ :morph | morph acceptContents ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		listeners: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph acceptContents ]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #accept on Ctrl + S do [ :morph | morph acceptContents ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph acceptContents ]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#accept on Ctrl + S do [ :morph | morph acceptContents ]

	Receiver's instance variables: 
		name: 	#TextMorph
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#accept on Ctrl + S do [ :morph | morph acceptContents ]
)
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	4
		each: 	#accept on Ctrl + S do [ :morph | morph acceptContents ]

	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil #accept on Ctrl + S do [ :morph | morph acceptConte...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#TextMorph
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#TextMorph)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a TextMorphForEditView(3670016)
		category: 	a KMCategory
		morph: 	a TextMorphForEditView(3670016)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#TextMorph)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(3670016)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	3


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(3670016)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(3670016)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil



--- The full stack ---
SlotClassBuilder>>validateClassName
SlotClassBuilder>>name:
[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClass: (self layoutForType: type);
	slots: instanceVariablesString asSlotCollection;
	sharedVariablesFromString: classVariablesString;
	sharedPools: sharedPoolsString;
	category: category;
	environment: environment;
	copyTraitCompositionFromExistingClass;
	copyClassSlotsFromExistingClass ] in OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
PharoClassInstaller class(AbstractClassInstaller class)>>make:
OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
OldClassBuilderAdapter>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
Object class(Class)>>subclass:instanceVariableNames:classVariableNames:category:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
PackageTreeNautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
PackageTreeNautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
ClassOrMethodDefinitionAcceptor>>acceptInstanceSide:notifying:
ClassOrMethodDefinitionAcceptor>>accept:notifying:
PackageTreeNautilusUI(NautilusUI)>>compileSource:notifying:
[ 
^ setTextSelector isNil
	or: [ 
		setTextSelector numArgs = 2
			ifTrue: [ model perform: setTextSelector with: acceptedText with: self ]
			ifFalse: [ model perform: setTextSelector with: acceptedText ] ] ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
BlockClosure>>ensure:
PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptBasic
PluggableTextMorphWithLimits>>acceptBasic
PluggableTextMorphWithLimits(PluggableTextMorph)>>accept
TextMorphForEditView>>acceptContents
[ :morph | morph acceptContents ] in TextMorph class>>buildTextEditorKeymapsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Array>>b
5 November 2015 4:53:19.26819 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Array(Object)>>doesNotUnderstand: #b
	Receiver: #()
	Arguments and temporary variables: 
		aMessage: 	b
		exception: 	MessageNotUnderstood: Array>>b
		resumeValue: 	nil
	Receiver's instance variables: 
#()

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'b:={}
b add: 1.'
		itsSelection: 	a Text for 'b:={}
b add: 1.'
		itsSelectionString: 	'b:={}
b add: 1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ b := {} b add: 1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(859308032)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(859308032)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(376700928)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	1522208
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 
		anArgument: 	1522218
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	1522208
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1522218
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	1522248
		lastStepMessage: 	nil
		lastCycleTime: 	1522248
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	1522248
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		now: 	1522218
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	1522248
		lastStepMessage: 	nil
		lastCycleTime: 	1522248
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	1522248
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	1522248
		lastStepMessage: 	nil
		lastCycleTime: 	1522248
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	1522248
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(409731072) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	1522248
		lastStepMessage: 	nil
		lastCycleTime: 	1522248
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	1522248
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	1522248
		lastStepMessage: 	nil
		lastCycleTime: 	1522248
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	1522248
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(409731072) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #b
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Array>>b
5 November 2015 4:56:36.626194 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Array(Object)>>doesNotUnderstand: #b
	Receiver: #()
	Arguments and temporary variables: 
		aMessage: 	b
		exception: 	MessageNotUnderstood: Array>>b
		resumeValue: 	nil
	Receiver's instance variables: 
#()

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'b:={}
b nextPut: 1.'
		itsSelection: 	a Text for 'b:={}
b nextPut: 1.'
		itsSelectionString: 	'b:={}
b nextPut: 1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ b := {} b nextPut: 1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(859308032)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(859308032)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(376700928)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	1719532
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 
		anArgument: 	1719536
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	1719532
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1719536
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	1719560
		lastStepMessage: 	nil
		lastCycleTime: 	1719558
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	1719560
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		now: 	1719536
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	1719560
		lastStepMessage: 	nil
		lastCycleTime: 	1719558
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	1719560
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	1719560
		lastStepMessage: 	nil
		lastCycleTime: 	1719558
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	1719560
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(409731072) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	1719598
		lastStepMessage: 	nil
		lastCycleTime: 	1719596
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	1719598
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	1719598
		lastStepMessage: 	nil
		lastCycleTime: 	1719596
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	1719598
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(409731072) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #b
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Color>>trans
5 November 2015 5:05:34.746197 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Color(Object)>>doesNotUnderstand: #trans
	Receiver: Color red
	Arguments and temporary variables: 
		aMessage: 	trans
		exception: 	MessageNotUnderstood: Color>>trans
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1072693248
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
v addAll: (((RTEllipse new size: 20; color: C...etc...
		itsSelection: 	a Text for 'v := RTView new.
v addAll: (((RTEllipse new size: 20;...etc...
		itsSelectionString: 	'v := RTView new.
v addAll: (((RTEllipse new size: 20; colo...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	v
		addAll:
			((RTEllipse new
				size: 20;
				c...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(859308032)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(859308032)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(376700928)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(859308032)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (381@259)
		owner: 	a TransformWithLayoutMorph(498597888)
		submorphs: 	an Array(a RubPrimarySelectionMorph(165937152) a RubCursor(177733632...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (251658240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(460324864)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(177733632)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(852230144))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(376700928)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(196083712))(a Spec...etc...
		lastStepTime: 	2257634
		lastStepMessage: 	nil
		lastCycleTime: 	2257654
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	2257634
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(409731072) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(196083712))(a Spec...etc...
		lastStepTime: 	2257634
		lastStepMessage: 	nil
		lastCycleTime: 	2257654
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	2257634
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(196083712))(a Spec...etc...
		lastStepTime: 	2257634
		lastStepMessage: 	nil
		lastCycleTime: 	2257654
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	2257634
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(409731072) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #trans
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Color>>transparent
5 November 2015 5:05:46.370194 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Color(Object)>>doesNotUnderstand: #transparent
	Receiver: Color red
	Arguments and temporary variables: 
		aMessage: 	transparent
		exception: 	MessageNotUnderstood: Color>>transparent
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1072693248
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'v := RTView new.
v addAll: (((RTEllipse new size: 20; color: C...etc...
		itsSelection: 	a Text for 'v := RTView new.
v addAll: (((RTEllipse new size: 20;...etc...
		itsSelectionString: 	'v := RTView new.
v addAll: (((RTEllipse new size: 20; colo...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	v
		addAll:
			((RTEllipse new
				size: 20;
				c...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(859308032)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(859308032)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(376700928)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(859308032)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (381@259)
		owner: 	a TransformWithLayoutMorph(498597888)
		submorphs: 	an Array(a RubPrimarySelectionMorph(165937152) a RubCursor(177733632...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (251658240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(460324864)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(177733632)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(820248576))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(376700928)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	2269268
		lastStepMessage: 	nil
		lastCycleTime: 	2269288
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	2269268
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(409731072) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	2269268
		lastStepMessage: 	nil
		lastCycleTime: 	2269288
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	2269268
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	2269268
		lastStepMessage: 	nil
		lastCycleTime: 	2269288
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	2269268
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(409731072) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #transparent
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Object>>initalize
5 November 2015 5:22:09.06019 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Node(Object)>>doesNotUnderstand: #initalize
	Receiver: a Node
	Arguments and temporary variables: 
		aMessage: 	initalize
		exception: 	MessageNotUnderstood: Object>>initalize
		resumeValue: 	nil
	Receiver's instance variables: 
		name: 	nil
		sub: 	nil
		publ: 	nil


Node>>initialize
	Receiver: a Node
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		sub: 	nil
		publ: 	nil


Node class(Behavior)>>new
	Receiver: Node
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#initialize->Node>>#initialize #name->Node>>#nam...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#name #sub #publ)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Node
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RQT-Pharo'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeA name: ''A''.
nodeB name: ''B''.
nodeB...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeA name: ''A''.
nodeB name: ''B...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeA name: ''A''.
nodeB name: ''B''.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeA name: 'A'.
	nodeB name: 'B'.
	nodeB := Nod...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(859308032)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(859308032)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(376700928)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	3252000
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 
		anArgument: 	3252010
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	3252000
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	3252010
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	3251990
		lastStepMessage: 	nil
		lastCycleTime: 	3252010
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	3251990
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		now: 	3252010
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	3251990
		lastStepMessage: 	nil
		lastCycleTime: 	3252010
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	3251990
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	3251990
		lastStepMessage: 	nil
		lastCycleTime: 	3252010
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	3251990
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(409731072) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	3251990
		lastStepMessage: 	nil
		lastCycleTime: 	3252010
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	3251990
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(607911936))(a SearchMorp...etc...
		lastStepTime: 	3251990
		lastStepMessage: 	nil
		lastCycleTime: 	3252010
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	3251990
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(409731072) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Node(Object)>>doesNotUnderstand: #initalize
Node>>initialize
Node class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Object>>initalize
5 November 2015 5:22:25.620189 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Node(Object)>>doesNotUnderstand: #initalize
	Receiver: a Node
	Arguments and temporary variables: 
		aMessage: 	initalize
		exception: 	MessageNotUnderstood: Object>>initalize
		resumeValue: 	nil
	Receiver's instance variables: 
		name: 	nil
		sub: 	nil
		publ: 	nil


Node>>initialize
	Receiver: a Node
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		sub: 	nil
		publ: 	nil


Node class(Behavior)>>new
	Receiver: Node
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#initialize->Node>>#initialize #name->Node>>#nam...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#name #sub #publ)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Node
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RQT-Pharo'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeA name: ''A''.
nodeB...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeA name: ''A...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeA name: ''A''.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeA name: 'A'.
	nodeB name...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(859308032)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(859308032)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(376700928)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	3268558
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 
		anArgument: 	3268570
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	3268558
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	3268570
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3268548
		lastStepMessage: 	nil
		lastCycleTime: 	3268570
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	3268548
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		now: 	3268570
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3268548
		lastStepMessage: 	nil
		lastCycleTime: 	3268570
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	3268548
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3268548
		lastStepMessage: 	nil
		lastCycleTime: 	3268570
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	3268548
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(409731072) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3268548
		lastStepMessage: 	nil
		lastCycleTime: 	3268570
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	3268548
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3268548
		lastStepMessage: 	nil
		lastCycleTime: 	3268570
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	3268548
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(409731072) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Node(Object)>>doesNotUnderstand: #initalize
Node>>initialize
Node class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Object>>initalize
5 November 2015 5:22:30.536189 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Node(Object)>>doesNotUnderstand: #initalize
	Receiver: a Node
	Arguments and temporary variables: 
		aMessage: 	initalize
		exception: 	MessageNotUnderstood: Object>>initalize
		resumeValue: 	nil
	Receiver's instance variables: 
		name: 	nil
		sub: 	nil
		publ: 	nil


Node>>initialize
	Receiver: a Node
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		sub: 	nil
		publ: 	nil


Node class(Behavior)>>new
	Receiver: Node
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#initialize->Node>>#initialize #name->Node>>#nam...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#name #sub #publ)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Node
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RQT-Pharo'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ nodeA := Node new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(859308032)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(859308032)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(376700928)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(859308032)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (381@183)
		owner: 	a TransformWithLayoutMorph(498597888)
		submorphs: 	an Array(a RubPrimarySelectionMorph(743178240) a RubCursor(177733632...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (251658240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(460324864)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(177733632)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(918290432))
		getMenuPolicy: 	a RubEditingArea(859308032)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(376700928)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3273464
		lastStepMessage: 	nil
		lastCycleTime: 	3273484
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	3273464
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(409731072) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3273464
		lastStepMessage: 	nil
		lastCycleTime: 	3273484
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	3273464
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(298582016))(a DropList...etc...
		lastStepTime: 	3273464
		lastStepMessage: 	nil
		lastCycleTime: 	3273484
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(177733632)))
		lastAlarmTime: 	3273464
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(409731072) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Node(Object)>>doesNotUnderstand: #initalize
Node>>initialize
Node class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: OrderedCollection>>nameNode
5 November 2015 5:35:34.829528 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

OrderedCollection(Object)>>doesNotUnderstand: #nameNode
	Receiver: an OrderedCollection(a Node a Node)
	Arguments and temporary variables: 
		aMessage: 	nameNode
		exception: 	MessageNotUnderstood: OrderedCollection>>nameNode
		resumeValue: 	nil
	Receiver's instance variables: 
		array: 	an Array(a Node a Node nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node)
		v: 	a RTView
		eb: 	nil
	Receiver's instance variables: 
a Graph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeA nameNode: ''A''.
n...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeA nameNode:...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeA nameNode: ''A'...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeA nameNode: 'A'.
	nodeB ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@202)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(324272128))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(638320640))(a Rub...etc...
		lastStepTime: 	691396
		lastStepMessage: 	nil
		lastCycleTime: 	691416
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	691396
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(638320640))(a Rub...etc...
		lastStepTime: 	691396
		lastStepMessage: 	nil
		lastCycleTime: 	691416
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	691396
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(638320640))(a Rub...etc...
		lastStepTime: 	691396
		lastStepMessage: 	nil
		lastCycleTime: 	691416
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	691396
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
OrderedCollection(Object)>>doesNotUnderstand: #nameNode
Graph>>createGraph:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: OrderedCollection>>nameNode
5 November 2015 5:35:44.909527 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

OrderedCollection(Object)>>doesNotUnderstand: #nameNode
	Receiver: an OrderedCollection(a Node a Node)
	Arguments and temporary variables: 
		aMessage: 	nameNode
		exception: 	MessageNotUnderstood: OrderedCollection>>nameNode
		resumeValue: 	nil
	Receiver's instance variables: 
		array: 	an Array(a Node a Node nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node)
		v: 	a RTView
		eb: 	nil
	Receiver's instance variables: 
a Graph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeA nameNode: ''A''.
n...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeA nameNode:...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeA nameNode: ''A'...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeA nameNode: 'A'.
	nodeB ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@202)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	(0@0) corner: (580@202)
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(189267968))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	701538
		lastStepMessage: 	nil
		lastCycleTime: 	701538
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	701538
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	701538
		lastStepMessage: 	nil
		lastCycleTime: 	701538
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	701538
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	701538
		lastStepMessage: 	nil
		lastCycleTime: 	701538
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	701538
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
OrderedCollection(Object)>>doesNotUnderstand: #nameNode
Graph>>createGraph:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTEllipse>>do:
5 November 2015 5:36:14.253531 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTEllipse(Object)>>doesNotUnderstand: #do:
	Receiver: a RTEllipse
	Arguments and temporary variables: 
		aMessage: 	do: [ :el | self add: el ]
		exception: 	MessageNotUnderstood: RTEllipse>>do:
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		width: 	[ :anElement | aValueOrASymbolOrAOneArgBlock rtValue: anElement model ]
		borderColor: 	nil
		borderWidth: 	1


RTView>>addAll:
	Receiver: a RTView
	Arguments and temporary variables: 
		someElements: 	a RTEllipse
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		elements: 	an OrderedCollection()
		edges: 	an OrderedCollection()
		trCanvas: 	a TRCanvas


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node)
		v: 	a RTView
		eb: 	nil
	Receiver's instance variables: 
a Graph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeA nameNode: ''A''.
n...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeA nameNode:...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeA nameNode: ''A'...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeA nameNode: 'A'.
	nodeB ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@202)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	(0@0) corner: (580@202)
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(189267968))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(643301376))(a Spec...etc...
		lastStepTime: 	730822
		lastStepMessage: 	nil
		lastCycleTime: 	730844
		alarms: 	a Heap()
		lastAlarmTime: 	730822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(49545216) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(643301376))(a Spec...etc...
		lastStepTime: 	730822
		lastStepMessage: 	nil
		lastCycleTime: 	730844
		alarms: 	a Heap()
		lastAlarmTime: 	730822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(643301376))(a Spec...etc...
		lastStepTime: 	730822
		lastStepMessage: 	nil
		lastCycleTime: 	730844
		alarms: 	a Heap()
		lastAlarmTime: 	730822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(49545216) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTEllipse(Object)>>doesNotUnderstand: #do:
RTView>>addAll:
Graph>>createGraph:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SystemNavigation>>browseClassRefsOf:
5 November 2015 5:41:54.62553 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

SystemNavigation(Object)>>doesNotUnderstand: #browseClassRefsOf:
	Receiver: a SystemNavigation
	Arguments and temporary variables: 
		aMessage: 	browseClassRefsOf: RTLabel
		exception: 	MessageNotUnderstood: SystemNavigation>>browseClassRefsOf:
		resumeValue: 	nil
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)


SugsBrowseClassReferences>>execute
	Receiver: aSugsSuggestion (Browse references)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		blockCommand: 	nil
		context: 	a SugsNautilusContext
		label: 	nil
		icon: 	ColorForm(16x16x4)
		position: 	10
		keyText: 	nil
		isValidBlock: 	nil


SugsBrowseClassReferences(Object)>>perform:orSendTo:
	Receiver: aSugsSuggestion (Browse references)
	Arguments and temporary variables: 
		selector: 	#execute
		otherTarget: 	SugsMenuBuilder
	Receiver's instance variables: 
		blockCommand: 	nil
		context: 	a SugsNautilusContext
		label: 	nil
		icon: 	ColorForm(16x16x4)
		position: 	10
		keyText: 	nil
		isValidBlock: 	nil


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(692322304)'Browse references'
	Arguments and temporary variables: 
		evt: 	[(341@765) mouseUp 1071166 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(288.0@755.0) corner: (419.0@773.0)
		owner: 	a MenuMorph(91750400)
		submorphs: 	#()
		fullBounds: 	(288.0@755.0) corner: (419.0@773.0)
		color: 	Color black
		extension: 	a MorphExtension (711458816)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Browse references'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	aSugsSuggestion (Browse references)
		selector: 	#perform:orSendTo:
		arguments: 	{#execute. SugsMenuBuilder}
		icon: 	ColorForm(16x16x4)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(692322304)'Browse references'
	Arguments and temporary variables: 
		evt: 	[(341@765) mouseUp 1071166 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(288.0@755.0) corner: (419.0@773.0)
		owner: 	a MenuMorph(91750400)
		submorphs: 	#()
		fullBounds: 	(288.0@755.0) corner: (419.0@773.0)
		color: 	Color black
		extension: 	a MorphExtension (711458816)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Browse references'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	aSugsSuggestion (Browse references)
		selector: 	#perform:orSendTo:
		arguments: 	{#execute. SugsMenuBuilder}
		icon: 	ColorForm(16x16x4)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(692322304)'Browse references'
	Arguments and temporary variables: 
		evt: 	[(341@765) mouseUp 1071166 nil]
	Receiver's instance variables: 
		bounds: 	(288.0@755.0) corner: (419.0@773.0)
		owner: 	a MenuMorph(91750400)
		submorphs: 	#()
		fullBounds: 	(288.0@755.0) corner: (419.0@773.0)
		color: 	Color black
		extension: 	a MorphExtension (711458816)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Browse references'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	aSugsSuggestion (Browse references)
		selector: 	#perform:orSendTo:
		arguments: 	{#execute. SugsMenuBuilder}
		icon: 	ColorForm(16x16x4)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(692322304)'Browse references'
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
	Receiver's instance variables: 
		bounds: 	(288.0@755.0) corner: (419.0@773.0)
		owner: 	a MenuMorph(91750400)
		submorphs: 	#()
		fullBounds: 	(288.0@755.0) corner: (419.0@773.0)
		color: 	Color black
		extension: 	a MorphExtension (711458816)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Browse references'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	aSugsSuggestion (Browse references)
		selector: 	#perform:orSendTo:
		arguments: 	{#execute. SugsMenuBuilder}
		icon: 	ColorForm(16x16x4)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(341@765) mouseUp 1071166 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(692322304)'Browse references'
	Receiver's instance variables: 
		timeStamp: 	1071166
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(341@765)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(692322304)'Browse references'
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
	Receiver's instance variables: 
		bounds: 	(288.0@755.0) corner: (419.0@773.0)
		owner: 	a MenuMorph(91750400)
		submorphs: 	#()
		fullBounds: 	(288.0@755.0) corner: (419.0@773.0)
		color: 	Color black
		extension: 	a MorphExtension (711458816)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Browse references'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	aSugsSuggestion (Browse references)
		selector: 	#perform:orSendTo:
		arguments: 	{#execute. SugsMenuBuilder}
		icon: 	ColorForm(16x16x4)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
		aMorph: 	a ToggleMenuItemMorph(692322304)'Browse references'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(341@765) mouseUp 1071166 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1071166
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(341@765)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
		aMorph: 	a ToggleMenuItemMorph(692322304)'Browse references'
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
		aMorph: 	a ToggleMenuItemMorph(692322304)'Browse references'
	Receiver's instance variables: 
		morph: 	nil


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(692322304)'Browse references'
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(288.0@755.0) corner: (419.0@773.0)
		owner: 	a MenuMorph(91750400)
		submorphs: 	#()
		fullBounds: 	(288.0@755.0) corner: (419.0@773.0)
		color: 	Color black
		extension: 	a MorphExtension (711458816)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Browse references'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	aSugsSuggestion (Browse references)
		selector: 	#perform:orSendTo:
		arguments: 	{#execute. SugsMenuBuilder}
		icon: 	ColorForm(16x16x4)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
		aMorph: 	a MenuMorph(91750400)
		localEvt: 	[(341@765) mouseUp 1071166 nil]
		index: 	2
		child: 	a ToggleMenuItemMorph(692322304)'Browse references'
		morphs: 	an Array(an AlignmentMorph(437518336) a ToggleMenuItemMorph(692322304)'...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(341@765) mouseUp 1071166 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1071166
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(341@765)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
		aMorph: 	a MenuMorph(91750400)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
		aMorph: 	a MenuMorph(91750400)
	Receiver's instance variables: 
		morph: 	nil


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(91750400)
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(283.0@732.0) corner: (424.0@797.0)
		owner: 	nil
		submorphs: 	an Array(an AlignmentMorph(437518336) a ToggleMenuItemMorph(69232230...etc...
		fullBounds: 	(283.0@732.0) corner: (424.0@797.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (140771328) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a SmalltalkEditor
		selectedItem: 	a ToggleMenuItemMorph(692322304)'Browse references'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(692322304)'Browse referen...etc...
		basicColor: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(91750400)
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
	Receiver's instance variables: 
		bounds: 	(283.0@732.0) corner: (424.0@797.0)
		owner: 	nil
		submorphs: 	an Array(an AlignmentMorph(437518336) a ToggleMenuItemMorph(69232230...etc...
		fullBounds: 	(283.0@732.0) corner: (424.0@797.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (140771328) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a SmalltalkEditor
		selectedItem: 	a ToggleMenuItemMorph(692322304)'Browse references'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(692322304)'Browse referen...etc...
		basicColor: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(91750400)
	Arguments and temporary variables: 
		evt: 	[(341@765) mouseUp 1071166 nil]
	Receiver's instance variables: 
		bounds: 	(283.0@732.0) corner: (424.0@797.0)
		owner: 	nil
		submorphs: 	an Array(an AlignmentMorph(437518336) a ToggleMenuItemMorph(69232230...etc...
		fullBounds: 	(283.0@732.0) corner: (424.0@797.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (140771328) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a SmalltalkEditor
		selectedItem: 	a ToggleMenuItemMorph(692322304)'Browse references'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(692322304)'Browse referen...etc...
		basicColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
		focusHolder: 	a MenuMorph(91750400)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(341@765.0) corner: (357@781.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(341@765.0) corner: (357@781.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(341@765) mouseOver nil nil]
		targetOffset: 	(53.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1071166 341 765 0 0 0 1)
		lastKeyScanCode: 	20
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(341@765) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1043595264) a GL...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(341@765) mouseUp 1071166 nil]
		focusHolder: 	a MenuMorph(91750400)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(341@765.0) corner: (357@781.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(341@765.0) corner: (357@781.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(341@765) mouseOver nil nil]
		targetOffset: 	(53.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1071166 341 765 0 0 0 1)
		lastKeyScanCode: 	20
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
		focusHolder: 	a MenuMorph(91750400)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(341@765.0) corner: (357@781.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(341@765.0) corner: (357@781.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(341@765) mouseOver nil nil]
		targetOffset: 	(53.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1071166 341 765 0 0 0 1)
		lastKeyScanCode: 	20
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
	Receiver's instance variables: 
		bounds: 	(341@765.0) corner: (357@781.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(341@765.0) corner: (357@781.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(341@765) mouseOver nil nil]
		targetOffset: 	(53.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1071166 341 765 0 0 0 1)
		lastKeyScanCode: 	20
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(341@765) mouseUp 1071166 nil]
		evt: 	[(341@765) mouseUp 1071166 nil]
	Receiver's instance variables: 
		bounds: 	(341@765.0) corner: (357@781.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(341@765.0) corner: (357@781.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(341@765) mouseOver nil nil]
		targetOffset: 	(53.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1071166 341 765 0 0 0 1)
		lastKeyScanCode: 	20
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(341@765) mouseUp 1071166 nil]
		evtBuf: 	#(1 1071166 341 765 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(341@765.0) corner: (357@781.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(341@765.0) corner: (357@781.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(341@765) mouseOver nil nil]
		targetOffset: 	(53.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1071166 341 765 0 0 0 1)
		lastKeyScanCode: 	20
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(467664896))(a SearchMorp...etc...
		lastStepTime: 	1071214
		lastStepMessage: 	nil
		lastCycleTime: 	1071212
		alarms: 	a Heap()
		lastAlarmTime: 	1071214
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(467664896))(a SearchMorp...etc...
		lastStepTime: 	1071214
		lastStepMessage: 	nil
		lastCycleTime: 	1071212
		alarms: 	a Heap()
		lastAlarmTime: 	1071214
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(467664896))(a SearchMorp...etc...
		lastStepTime: 	1071214
		lastStepMessage: 	nil
		lastCycleTime: 	1071212
		alarms: 	a Heap()
		lastAlarmTime: 	1071214
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
SystemNavigation(Object)>>doesNotUnderstand: #browseClassRefsOf:
SugsBrowseClassReferences>>execute
SugsBrowseClassReferences(Object)>>perform:orSendTo:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
SugsMenuBuilder class>>showMenuFor:
SmalltalkEditor>>smartSuggestions
[ textMorph editor smartSuggestions ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>smartSuggestions
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>smartSuggestions
[ :morph | morph smartSuggestions ] in SugsMenuBuilder class>>buildSmartActionsShortcuts:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTCompositeShape>>text:
5 November 2015 5:42:51.439527 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTCompositeShape(Object)>>doesNotUnderstand: #text:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		aMessage: 	text: [ :val | self halt ]
		exception: 	MessageNotUnderstood: RTCompositeShape>>text:
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node)
		v: 	a RTView
		eb: 	nil
	Receiver's instance variables: 
a Graph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeA nameNode: ''A''.
n...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeA nameNode:...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeA nameNode: ''A'...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeA nameNode: 'A'.
	nodeB ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@221)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(905969664))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 289144832))(...etc...
		lastStepTime: 	1127978
		lastStepMessage: 	nil
		lastCycleTime: 	1127998
		alarms: 	a Heap()
		lastAlarmTime: 	1127978
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 289144832))(...etc...
		lastStepTime: 	1127978
		lastStepMessage: 	nil
		lastCycleTime: 	1127998
		alarms: 	a Heap()
		lastAlarmTime: 	1127978
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 289144832))(...etc...
		lastStepTime: 	1127978
		lastStepMessage: 	nil
		lastCycleTime: 	1127998
		alarms: 	a Heap()
		lastAlarmTime: 	1127978
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		currentHand: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 289144832))(...etc...
		lastStepTime: 	1127978
		lastStepMessage: 	nil
		lastCycleTime: 	1127998
		alarms: 	a Heap()
		lastAlarmTime: 	1127978
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(516161536)
	Arguments and temporary variables: 
		aPoint: 	(358@183.0)
		aWorld: 	a WorldMorph(511705088) [world]
		aBoolean: 	true
		w: 	a WorldMorph(511705088) [world]
		originalFocusHolder: 	a RubEditingArea(638320640)
	Receiver's instance variables: 
		bounds: 	(356.0@175.0) corner: (551.0@409.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(304611328)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(356.0@175.0) corner: (551.0@409.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (553123840) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(304611328)'Do it and go'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(304611328)'Do it and go' ...etc...
		basicColor: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(516161536)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(356.0@175.0) corner: (551.0@409.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(304611328)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(356.0@175.0) corner: (551.0@409.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (553123840) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(304611328)'Do it and go'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(304611328)'Do it and go' ...etc...
		basicColor: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(516161536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(356.0@175.0) corner: (551.0@409.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(304611328)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(356.0@175.0) corner: (551.0@409.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (553123840) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(304611328)'Do it and go'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(304611328)'Do it and go' ...etc...
		basicColor: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(516161536)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@221)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(905969664))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(516161536)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(356.0@175.0) corner: (551.0@409.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(304611328)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(356.0@175.0) corner: (551.0@409.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (553123840) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(304611328)'Do it and go'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(304611328)'Do it and go' ...etc...
		basicColor: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@221)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(905969664))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		evt: 	[(115.0@113.0) mouseDown yellow 1122550 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@221)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(905969664))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		anEvent: 	[(115.0@113.0) mouseDown yellow 1122550 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@221)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(905969664))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(115.0@113.0) mouseDown yellow 1122550 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(638320640)
	Receiver's instance variables: 
		timeStamp: 	1122550
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(115.0@113.0)
		handler: 	a RubEditingArea(638320640)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		anEvent: 	[(115.0@113.0) mouseDown yellow 1122550 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@221)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(905969664))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(115.0@113.0) mouseDown yellow 1122550 nil]
		aMorph: 	a RubEditingArea(638320640)
		globalPt: 	(115.0@113.0)
		localEvt: 	[(115.0@113.0) mouseDown yellow 1122550 nil]
		index: 	3
		child: 	a RubPrimarySelectionMorph(938213376)
		morphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(1069547520))...etc...
		handler: 	a RubEditingArea(638320640)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(1029439488)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(115.0@113.0) mouseDown yellow 1122550 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(115.0@113.0) mouseDown yellow 1122550 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1122550
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(115.0@113.0)
		handler: 	a RubEditingArea(638320640)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(115.0@113.0) mouseDown yellow 1122550 nil]
		aMorph: 	a RubEditingArea(638320640)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(115.0@113.0) mouseDown yellow 1122550 nil]
		aMorph: 	a RubEditingArea(638320640)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		anEvent: 	[(115.0@113.0) mouseDown yellow 1122550 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@221)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(905969664))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(358@183) mouseDown yellow 1122550 nil]
		aMorph: 	a TransformWithLayoutMorph(77594624)
		globalPt: 	(358@183)
		localEvt: 	[(115.0@113.0) mouseDown yellow 1122550 nil]
		index: 	1
		child: 	a RubEditingArea(638320640)
		morphs: 	an Array(a RubEditingArea(638320640))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(1029439488)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(358@183) mouseDown yellow 1122550 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(358@183) mouseDown yellow 1122550 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1122550
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(358@183)
		handler: 	a RubScrolledTextMorph(1029439488)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(358@183) mouseDown yellow 1122550 nil]
		aMorph: 	a TransformWithLayoutMorph(77594624)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(358@183) mouseDown yellow 1122550 nil]
		aMorph: 	a TransformWithLayoutMorph(77594624)
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(77594624)
	Arguments and temporary variables: 
		anEvent: 	[(358@183) mouseDown yellow 1122550 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(243.0@70.0) corner: (528.0@386.0)
		owner: 	a RubTextScrollPane(39321600)
		submorphs: 	an Array(a RubEditingArea(638320640))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (113246208) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-243.0@ -70.0...etc...
		smoothing: 	1
		localBounds: 	nil



--- The full stack ---
RTCompositeShape(Object)>>doesNotUnderstand: #text:
Graph>>createGraph:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
5 November 2015 5:43:18.501525 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :val | self halt ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node)
		v: 	a RTView
		eb: 	nil
		val: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :val | self halt ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	119
		numArgs: 	1


[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTLabel>>text:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		aValueOrAOneArgBlock: 	[ :val | self halt ]
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	Color black
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		font: 	nil
		height: 	12
		fontName: 	'Source Sans Pro'


BlockClosure>>rtValue:
	Receiver: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
	Arguments and temporary variables: 
		valueOrArray: 	a RTElement
	Receiver's instance variables: 
		outerContext: 	RTLabel>>text:
		startpc: 	31
		numArgs: 	1


RTLabel>>textFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		element: 	a RTElement
	Receiver's instance variables: 
		color: 	Color black
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		font: 	nil
		height: 	12
		fontName: 	'Source Sans Pro'


RTLabel>>trachelShapeFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		anElement: 	a RTElement
		c: 	Color black
		txt: 	nil
		lines: 	nil
	Receiver's instance variables: 
		color: 	Color black
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		font: 	nil
		height: 	12
		fontName: 	'Source Sans Pro'


[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
		tupple: 	an Array(a RTLabel (0@0))
		shapeIndex: 	2
		s: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>withIndexCollect:
	Receiver: an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)))
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
		newCollection: 	an OrderedCollection(an Array(a TREllipseShape (0@0)))
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)) nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(SequenceableCollection)>>collectWithIndex:
	Receiver: an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)))
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)) nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	2


RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


RTElement(RTShapedObject)>>addShape:
	Receiver: a RTElement
	Arguments and temporary variables: 
		aRTShape: 	a RTCompositeShape
	Receiver's instance variables: 
		announcer: 	nil
		attributes: 	nil
		isFixed: 	false
		model: 	a Node
		shape: 	a RTCompositeShape
		trachelShape: 	a TRNoShape
		view: 	nil
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


RTCompositeShape(RTShape)>>elementOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		aModel: 	a Node
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


[ :m | group add: (self elementOn: m) ] in RTCompositeShape(RTShape)>>elementsOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		models: 	an OrderedCollection(a Node a Node)
		group: 	a RTGroup()
		m: 	a Node
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Node a Node)
	Arguments and temporary variables: 
		aBlock: 	[ :m | group add: (self elementOn: m) ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Node a Node nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


RTCompositeShape(RTShape)>>elementsOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		models: 	an OrderedCollection(a Node a Node)
		group: 	a RTGroup()
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node)
		v: 	a RTView
		eb: 	nil
	Receiver's instance variables: 
a Graph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeA nameNode: ''A''.
n...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeA nameNode:...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeA nameNode: ''A'...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeA nameNode: 'A'.
	nodeB ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@221)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	(0@0) corner: (285@221)
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(905969664))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1155134
		lastStepMessage: 	nil
		lastCycleTime: 	1155134
		alarms: 	a Heap()
		lastAlarmTime: 	1155134
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1155134
		lastStepMessage: 	nil
		lastCycleTime: 	1155134
		alarms: 	a Heap()
		lastAlarmTime: 	1155134
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1155134
		lastStepMessage: 	nil
		lastCycleTime: 	1155134
		alarms: 	a Heap()
		lastAlarmTime: 	1155134
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		currentHand: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1155134
		lastStepMessage: 	nil
		lastCycleTime: 	1155134
		alarms: 	a Heap()
		lastAlarmTime: 	1155134
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(516161536)
	Arguments and temporary variables: 
		aPoint: 	(358@183.0)
		aWorld: 	a WorldMorph(511705088) [world]
		aBoolean: 	true
		w: 	a WorldMorph(511705088) [world]
		originalFocusHolder: 	a RubEditingArea(638320640)
	Receiver's instance variables: 
		bounds: 	(356.0@175.0) corner: (551.0@409.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(304611328)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(356.0@175.0) corner: (551.0@409.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (553123840) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(304611328)'Do it and go'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(304611328)'Do it and go' ...etc...
		basicColor: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(516161536)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(356.0@175.0) corner: (551.0@409.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(304611328)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(356.0@175.0) corner: (551.0@409.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (553123840) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(304611328)'Do it and go'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(304611328)'Do it and go' ...etc...
		basicColor: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(516161536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(356.0@175.0) corner: (551.0@409.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(304611328)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(356.0@175.0) corner: (551.0@409.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (553123840) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(304611328)'Do it and go'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(304611328)'Do it and go' ...etc...
		basicColor: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(516161536)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@221)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	(0@0) corner: (285@221)
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(905969664))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(516161536)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(356.0@175.0) corner: (551.0@409.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(304611328)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(356.0@175.0) corner: (551.0@409.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (553123840) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(304611328)'Do it and go'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(304611328)'Do it and go' ...etc...
		basicColor: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@221)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	(0@0) corner: (285@221)
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(905969664))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		evt: 	[(115.0@113.0) mouseDown yellow 1122550 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@221)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	(0@0) corner: (285@221)
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(905969664))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		anEvent: 	[(115.0@113.0) mouseDown yellow 1122550 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@221)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	(0@0) corner: (285@221)
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(905969664))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(115.0@113.0) mouseDown yellow 1122550 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(638320640)
	Receiver's instance variables: 
		timeStamp: 	1122550
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(115.0@113.0)
		handler: 	a RubEditingArea(638320640)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		anEvent: 	[(115.0@113.0) mouseDown yellow 1122550 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@221)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	(0@0) corner: (285@221)
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(905969664))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor



--- The full stack ---
[ :val | self halt ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTLabel>>text:
BlockClosure>>rtValue:
RTLabel>>textFor:
RTLabel>>trachelShapeFor:
[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
OrderedCollection>>withIndexCollect:
OrderedCollection(SequenceableCollection)>>collectWithIndex:
RTCompositeShape>>trachelShapeFor:
RTElement(RTShapedObject)>>addShape:
RTCompositeShape(RTShape)>>elementOn:
[ :m | group add: (self elementOn: m) ] in RTCompositeShape(RTShape)>>elementsOn:
OrderedCollection>>do:
RTCompositeShape(RTShape)>>elementsOn:
Graph>>createGraph:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
5 November 2015 5:45:33.891524 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :val | self halt ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node)
		v: 	a RTView
		eb: 	nil
		val: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :val | self halt ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	119
		numArgs: 	1


[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTLabel>>text:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		aValueOrAOneArgBlock: 	[ :val | self halt ]
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	Color black
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		font: 	nil
		height: 	12
		fontName: 	'Source Sans Pro'


BlockClosure>>rtValue:
	Receiver: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
	Arguments and temporary variables: 
		valueOrArray: 	a RTElement
	Receiver's instance variables: 
		outerContext: 	RTLabel>>text:
		startpc: 	31
		numArgs: 	1


RTLabel>>textFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		element: 	a RTElement
	Receiver's instance variables: 
		color: 	Color black
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		font: 	nil
		height: 	12
		fontName: 	'Source Sans Pro'


RTLabel>>trachelShapeFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		anElement: 	a RTElement
		c: 	Color black
		txt: 	nil
		lines: 	nil
	Receiver's instance variables: 
		color: 	Color black
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		font: 	nil
		height: 	12
		fontName: 	'Source Sans Pro'


[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
		tupple: 	an Array(a RTLabel (0@0))
		shapeIndex: 	2
		s: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>withIndexCollect:
	Receiver: an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)))
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
		newCollection: 	an OrderedCollection(an Array(a TREllipseShape (0@0)))
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)) nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(SequenceableCollection)>>collectWithIndex:
	Receiver: an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)))
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)) nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	2


RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


RTElement(RTShapedObject)>>addShape:
	Receiver: a RTElement
	Arguments and temporary variables: 
		aRTShape: 	a RTCompositeShape
	Receiver's instance variables: 
		announcer: 	nil
		attributes: 	nil
		isFixed: 	false
		model: 	a Node
		shape: 	a RTCompositeShape
		trachelShape: 	a TRNoShape
		view: 	nil
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


RTCompositeShape(RTShape)>>elementOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		aModel: 	a Node
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


[ :m | group add: (self elementOn: m) ] in RTCompositeShape(RTShape)>>elementsOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		models: 	an OrderedCollection(a Node a Node)
		group: 	a RTGroup()
		m: 	a Node
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Node a Node)
	Arguments and temporary variables: 
		aBlock: 	[ :m | group add: (self elementOn: m) ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Node a Node nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


RTCompositeShape(RTShape)>>elementsOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		models: 	an OrderedCollection(a Node a Node)
		group: 	a RTGroup()
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node)
		v: 	a RTView
		eb: 	nil
	Receiver's instance variables: 
a Graph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeA nameNode: ''A''.
n...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeA nameNode:...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeA nameNode: ''A'...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeA nameNode: 'A'.
	nodeB ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@221)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	(0@0) corner: (285@221)
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1052770304))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	1290540
		lastStepMessage: 	nil
		lastCycleTime: 	1290540
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1290540
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	1290540
		lastStepMessage: 	nil
		lastCycleTime: 	1290540
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1290540
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	1290540
		lastStepMessage: 	nil
		lastCycleTime: 	1290540
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1290540
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :val | self halt ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTLabel>>text:
BlockClosure>>rtValue:
RTLabel>>textFor:
RTLabel>>trachelShapeFor:
[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
OrderedCollection>>withIndexCollect:
OrderedCollection(SequenceableCollection)>>collectWithIndex:
RTCompositeShape>>trachelShapeFor:
RTElement(RTShapedObject)>>addShape:
RTCompositeShape(RTShape)>>elementOn:
[ :m | group add: (self elementOn: m) ] in RTCompositeShape(RTShape)>>elementsOn:
OrderedCollection>>do:
RTCompositeShape(RTShape)>>elementsOn:
Graph>>createGraph:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of Node are not indexable
5 November 2015 5:50:44.909529 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Node(Object)>>error:
	Receiver: a Node
	Arguments and temporary variables: 
		aString: 	'Instances of Node are not indexable'
	Receiver's instance variables: 
		nameNode: 	'C'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection()


Node(Object)>>errorNotIndexable
	Receiver: a Node
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nameNode: 	'C'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection()


Node(Object)>>size
	Receiver: a Node
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nameNode: 	'C'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
nodeD...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeC := Node n...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeC := Node new.
	nodeD :=...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	1601468
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#value -> [ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
...etc...
	Arguments and temporary variables: 
		anArgument: 	1601478
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		...etc...
		selector: 	#value
		arguments: 	#()
		scheduledTime: 	1601468
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1601478
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1601582
		lastStepMessage: 	nil
		lastCycleTime: 	1601582
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1601582
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		now: 	1601478
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1601582
		lastStepMessage: 	nil
		lastCycleTime: 	1601582
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1601582
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1601582
		lastStepMessage: 	nil
		lastCycleTime: 	1601582
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1601582
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1601582
		lastStepMessage: 	nil
		lastCycleTime: 	1601582
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1601582
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1601582
		lastStepMessage: 	nil
		lastCycleTime: 	1601582
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1601582
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Node(Object)>>error:
Node(Object)>>errorNotIndexable
Node(Object)>>size
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor
	highlightEvaluateAndDo: [ :result | 
		textMorph shoutStyler style: textMorph text.
		GLMPrintPopper new openFromRubric: textMorph textArea withResult: result ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>evaluateAndPopPrintHighlight
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
5 November 2015 5:52:52.061525 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Node>>pub
	Receiver: a Node
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nameNode: 	'A'
		sub: 	an OrderedCollection()
		pub: 	a Node


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
nodeD...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeC := Node n...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeC := Node new.
	nodeD :=...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@392)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(875560960))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(467664896))(a SearchMorp...etc...
		lastStepTime: 	1728622
		lastStepMessage: 	nil
		lastCycleTime: 	1728644
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1728622
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(467664896))(a SearchMorp...etc...
		lastStepTime: 	1728622
		lastStepMessage: 	nil
		lastCycleTime: 	1728644
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1728622
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(467664896))(a SearchMorp...etc...
		lastStepTime: 	1728622
		lastStepMessage: 	nil
		lastCycleTime: 	1728644
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1728622
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Node>>pub
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
5 November 2015 5:55:36.239525 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :val | self halt ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		val: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :val | self halt ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	144
		numArgs: 	1


[ :e | 
aModel := aBlockOrASymbol rtValue: e model.
fromElement := self elementsToLookup elementFromModel: aModel.
fromElement ifNotNil: [ edges add: (self edgeFrom: fromElement to: e) ] ] in RTEdgeBuilder>>connectFrom:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :val | self halt ]
		edges: 	a RTGroup()
		fromElement: 	nil
		aModel: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
aModel := aBlockOrASymbol rtValue: e model.
fromElement := self...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectFrom:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		fromElement: 	nil
		aModel: 	nil
		aBlockOrASymbol: 	[ :val | self halt ]
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
nodeD...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeC := Node n...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeC := Node new.
	nodeD :=...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@373)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	(0@0) corner: (272@373)
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(847249408))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1892866
		lastStepMessage: 	nil
		lastCycleTime: 	1892866
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1892866
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1892866
		lastStepMessage: 	nil
		lastCycleTime: 	1892866
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1892866
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1892866
		lastStepMessage: 	nil
		lastCycleTime: 	1892866
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1892866
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :val | self halt ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
aModel := aBlockOrASymbol rtValue: e model.
fromElement := self elementsToLookup elementFromModel: aModel.
fromElement ifNotNil: [ edges add: (self edgeFrom: fromElement to: e) ] ] in RTEdgeBuilder>>connectFrom:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectFrom:
Graph>>createGraph:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
5 November 2015 5:56:59.701533 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :val | self halt ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		val: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :val | self halt ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	144
		numArgs: 	1


[ :e | 
aModel := aBlockOrASymbol rtValue: e model.
fromElement := self elementsToLookup elementFromModel: aModel.
fromElement ifNotNil: [ edges add: (self edgeFrom: fromElement to: e) ] ] in RTEdgeBuilder>>connectFrom:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :val | self halt ]
		edges: 	a RTGroup()
		fromElement: 	nil
		aModel: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
aModel := aBlockOrASymbol rtValue: e model.
fromElement := self...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectFrom:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		fromElement: 	nil
		aModel: 	nil
		aBlockOrASymbol: 	[ :val | self halt ]
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
nodeD...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeC := Node n...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeC := Node new.
	nodeD :=...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@373)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	(0@0) corner: (272@373)
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(354680832))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1976298
		lastStepMessage: 	nil
		lastCycleTime: 	1976294
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1976298
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1976298
		lastStepMessage: 	nil
		lastCycleTime: 	1976294
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1976298
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	1976298
		lastStepMessage: 	nil
		lastCycleTime: 	1976294
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	1976298
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :val | self halt ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
aModel := aBlockOrASymbol rtValue: e model.
fromElement := self elementsToLookup elementFromModel: aModel.
fromElement ifNotNil: [ edges add: (self edgeFrom: fromElement to: e) ] ] in RTEdgeBuilder>>connectFrom:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectFrom:
Graph>>createGraph:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Color>>eb
5 November 2015 6:01:00.139526 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Color(Object)>>doesNotUnderstand: #eb
	Receiver: Color blue
	Arguments and temporary variables: 
		aMessage: 	eb
		exception: 	MessageNotUnderstood: Color>>eb
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1023
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
	Receiver's instance variables: 
a Graph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
nodeD...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeC := Node n...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeC := Node new.
	nodeD :=...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@373)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	(0@0) corner: (272@373)
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(118489088))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	2216764
		lastStepMessage: 	nil
		lastCycleTime: 	2216762
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2216764
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	2216764
		lastStepMessage: 	nil
		lastCycleTime: 	2216762
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2216764
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	2216764
		lastStepMessage: 	nil
		lastCycleTime: 	2216762
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2216764
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #eb
Graph>>createGraph:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Color>>eb
5 November 2015 6:01:05.801527 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Color(Object)>>doesNotUnderstand: #eb
	Receiver: Color blue
	Arguments and temporary variables: 
		aMessage: 	eb
		exception: 	MessageNotUnderstood: Color>>eb
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1023
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
	Receiver's instance variables: 
a Graph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
nodeD...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeC := Node n...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeC := Node new.
	nodeD :=...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@373)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(954466304))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	2222314
		lastStepMessage: 	nil
		lastCycleTime: 	2222382
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2222314
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	2222314
		lastStepMessage: 	nil
		lastCycleTime: 	2222382
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2222314
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	2222314
		lastStepMessage: 	nil
		lastCycleTime: 	2222382
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2222314
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #eb
Graph>>createGraph:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTArrowedLine>>view:
5 November 2015 6:02:10.25353 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTArrowedLine(Object)>>doesNotUnderstand: #view:
	Receiver: a RTArrowedLine
	Arguments and temporary variables: 
		aMessage: 	view: a RTView
		exception: 	MessageNotUnderstood: RTArrowedLine>>view:
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		width: 	1
		attachPoint: 	a RTCenteredAttachPoint
		line: 	a RTLine
		head: 	a RTSimpleArrowHead


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTArrowedLine
	Receiver's instance variables: 
a Graph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
nodeD...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeC := Node n...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeC := Node new.
	nodeD :=...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@373)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(236716032))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	2286786
		lastStepMessage: 	nil
		lastCycleTime: 	2286806
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2286786
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	2286786
		lastStepMessage: 	nil
		lastCycleTime: 	2286806
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2286786
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	2286786
		lastStepMessage: 	nil
		lastCycleTime: 	2286806
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2286786
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTArrowedLine(Object)>>doesNotUnderstand: #view:
Graph>>createGraph:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTArrowedLine>>view:
5 November 2015 6:02:21.103524 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTArrowedLine(Object)>>doesNotUnderstand: #view:
	Receiver: a RTArrowedLine
	Arguments and temporary variables: 
		aMessage: 	view: a RTView
		exception: 	MessageNotUnderstood: RTArrowedLine>>view:
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		width: 	1
		attachPoint: 	a RTCenteredAttachPoint
		line: 	a RTLine
		head: 	a RTSimpleArrowHead


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTArrowedLine
	Receiver's instance variables: 
a Graph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
nodeD...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeC := Node n...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeC := Node new.
	nodeD :=...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@373)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(697040896))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	2297658
		lastStepMessage: 	nil
		lastCycleTime: 	2297702
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2297658
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	2297658
		lastStepMessage: 	nil
		lastCycleTime: 	2297702
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2297658
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	2297658
		lastStepMessage: 	nil
		lastCycleTime: 	2297702
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2297658
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTArrowedLine(Object)>>doesNotUnderstand: #view:
Graph>>createGraph:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTArrowedLine>>objects:
5 November 2015 6:02:25.841526 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTArrowedLine(Object)>>doesNotUnderstand: #objects:
	Receiver: a RTArrowedLine
	Arguments and temporary variables: 
		aMessage: 	objects: an OrderedCollection(a Node a Node a Node a Node)
		exception: 	MessageNotUnderstood: RTArrowedLine>>objects:
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		width: 	1
		attachPoint: 	a RTCenteredAttachPoint
		line: 	a RTLine
		head: 	a RTSimpleArrowHead


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTArrowedLine
	Receiver's instance variables: 
a Graph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
nodeD...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeC := Node n...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeC := Node new.
	nodeD :=...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@373)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(325844992))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	2302356
		lastStepMessage: 	nil
		lastCycleTime: 	2302418
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2302356
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	2302356
		lastStepMessage: 	nil
		lastCycleTime: 	2302418
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2302356
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	2302356
		lastStepMessage: 	nil
		lastCycleTime: 	2302418
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2302356
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTArrowedLine(Object)>>doesNotUnderstand: #objects:
Graph>>createGraph:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTArrowedLine>>objects:
5 November 2015 6:03:45.051524 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTArrowedLine(Object)>>doesNotUnderstand: #objects:
	Receiver: a RTArrowedLine
	Arguments and temporary variables: 
		aMessage: 	objects: an OrderedCollection(a Node a Node a Node a Node)
		exception: 	MessageNotUnderstood: RTArrowedLine>>objects:
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		width: 	1
		attachPoint: 	a RTCenteredAttachPoint
		line: 	a RTLine
		head: 	a RTSimpleArrowHead


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTArrowedLine
	Receiver's instance variables: 
a Graph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
nodeD...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeC := Node n...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeC := Node new.
	nodeD :=...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@373)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(224395264))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	2381612
		lastStepMessage: 	nil
		lastCycleTime: 	2381634
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2381612
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	2381612
		lastStepMessage: 	nil
		lastCycleTime: 	2381634
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2381612
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	2381612
		lastStepMessage: 	nil
		lastCycleTime: 	2381634
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	2381612
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTArrowedLine(Object)>>doesNotUnderstand: #objects:
Graph>>createGraph:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Node>>anObject
5 November 2015 6:20:01.799531 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Node(Object)>>doesNotUnderstand: #anObject
	Receiver: a Node
	Arguments and temporary variables: 
		aMessage: 	anObject
		exception: 	MessageNotUnderstood: Node>>anObject
		resumeValue: 	nil
	Receiver's instance variables: 
		nameNode: 	'B'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection()


Node>>pub:
	Receiver: a Node
	Arguments and temporary variables: 
		anObject: 	a Node
	Receiver's instance variables: 
		nameNode: 	'A'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
nodeD...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeC := Node n...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeC := Node new.
	nodeD :=...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@373)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(991428608))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	3358344
		lastStepMessage: 	nil
		lastCycleTime: 	3358364
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3358344
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	3358344
		lastStepMessage: 	nil
		lastCycleTime: 	3358364
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3358344
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	3358344
		lastStepMessage: 	nil
		lastCycleTime: 	3358364
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3358344
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Node(Object)>>doesNotUnderstand: #anObject
Node>>pub:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Node>>anObject
5 November 2015 6:20:36.769524 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Node(Object)>>doesNotUnderstand: #anObject
	Receiver: a Node
	Arguments and temporary variables: 
		aMessage: 	anObject
		exception: 	MessageNotUnderstood: Node>>anObject
		resumeValue: 	nil
	Receiver's instance variables: 
		nameNode: 	'B'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection()


Node>>pub:
	Receiver: a Node
	Arguments and temporary variables: 
		anObject: 	a Node
	Receiver's instance variables: 
		nameNode: 	'A'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
nodeD...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeC := Node n...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeC := Node new.
	nodeD :=...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@373)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(576454656))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	3393298
		lastStepMessage: 	nil
		lastCycleTime: 	3393356
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3393298
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	3393298
		lastStepMessage: 	nil
		lastCycleTime: 	3393356
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3393298
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	3393298
		lastStepMessage: 	nil
		lastCycleTime: 	3393356
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3393298
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Node(Object)>>doesNotUnderstand: #anObject
Node>>pub:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Node>>anObject
5 November 2015 6:21:49.495527 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Node(Object)>>doesNotUnderstand: #anObject
	Receiver: a Node
	Arguments and temporary variables: 
		aMessage: 	anObject
		exception: 	MessageNotUnderstood: Node>>anObject
		resumeValue: 	nil
	Receiver's instance variables: 
		nameNode: 	'B'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection()


Node>>pub:
	Receiver: a Node
	Arguments and temporary variables: 
		anObject: 	a Node
	Receiver's instance variables: 
		nameNode: 	'A'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
nodeD...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeC := Node n...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeC := Node new.
	nodeD :=...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@373)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(578551808))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	3466040
		lastStepMessage: 	nil
		lastCycleTime: 	3466060
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3466040
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	3466040
		lastStepMessage: 	nil
		lastCycleTime: 	3466060
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3466040
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	3466040
		lastStepMessage: 	nil
		lastCycleTime: 	3466060
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3466040
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Node(Object)>>doesNotUnderstand: #anObject
Node>>pub:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Node>>anObject
5 November 2015 6:22:01.825524 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Node(Object)>>doesNotUnderstand: #anObject
	Receiver: a Node
	Arguments and temporary variables: 
		aMessage: 	anObject
		exception: 	MessageNotUnderstood: Node>>anObject
		resumeValue: 	nil
	Receiver's instance variables: 
		nameNode: 	'B'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection()


Node>>pub:
	Receiver: a Node
	Arguments and temporary variables: 
		anObject: 	a Node
	Receiver's instance variables: 
		nameNode: 	'A'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
nodeD...etc...
		itsSelection: 	a Text for 'nodeA := Node new.
nodeB := Node new.
nodeC := Node n...etc...
		itsSelectionString: 	'nodeA := Node new.
nodeB := Node new.
nodeC := Node new.
n...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	nodeA := Node new.
	nodeB := Node new.
	nodeC := Node new.
	nodeD :=...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(638320640)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(638320640)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (272@373)
		owner: 	a TransformWithLayoutMorph(77594624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(938213376) a RubCursor(106954752...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (42729472) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(39321600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1069547520)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(559153152))
		getMenuPolicy: 	a RubEditingArea(638320640)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1029439488)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	3478406
		lastStepMessage: 	nil
		lastCycleTime: 	3478426
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3478406
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	3478406
		lastStepMessage: 	nil
		lastCycleTime: 	3478426
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3478406
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(670564352))(a SearchMorp...etc...
		lastStepTime: 	3478406
		lastStepMessage: 	nil
		lastCycleTime: 	3478426
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3478406
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Node(Object)>>doesNotUnderstand: #anObject
Node>>pub:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTView>>translateBy:
5 November 2015 6:24:16.069524 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTView(Object)>>doesNotUnderstand: #translateBy:
	Receiver: a RTView
	Arguments and temporary variables: 
		aMessage: 	translateBy: (-8.999100089991002@ -5.9994000599940005)
		exception: 	MessageNotUnderstood: RTView>>translateBy:
		resumeValue: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		elements: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement)...etc...
		edges: 	an OrderedCollection(a RTEdge a RTEdge a RTEdge)
		trCanvas: 	a TRCanvas


[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-8.999100089991002@ -5.9994000599940005)
		e: 	a RTView
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aBlock: 	[ :e | e translateBy: aPoint ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-8.999100089991002@ -5.9994000599940005)
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
	Receiver: a RTDraggable
	Arguments and temporary variables: 
		element: 	a RTView
		e: 	a TRMouseDragging
		d: 	(-8.999100089991002@ -5.9994000599940005)
		t: 	a RTGroup(a RTView)
	Receiver's instance variables: 
		groupToDrag: 	#()


BlockClosure>>cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		anArg: 	a TRMouseDragging
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		firstArg: 	a TRMouseDragging
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		announcement: 	a TRMouseDragging
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


TRCanvas>>announce:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
		anEvent: 	a TRMouseDragging
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TRLabelShape a TREllipseShape a...etc...
		fixedShapes: 	an OrderedCollection()
		extent: 	(275.0@283.0)
		animations: 	an OrderedCollection()
		morph: 	a TRMorph(1046216704)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color white
		session: 	a Session


TRMorph>>rtMouseDragging:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(669@269.0) (660@263) mouseMove red 3612648 nil]
		step: 	(-9@ -6)
		relativePosition: 	(97.0@166.0)
		event: 	a TRMouseDragging
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>mouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(669@269.0) (660@263) mouseMove red 3612648 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(669@269.0) (660@263) mouseMove red 3612648 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(669@269.0) (660@263) mouseMove red 3612648 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


MouseMoveEvent>>sentTo:
	Receiver: [(669@269.0) (660@263) mouseMove red 3612648 nil]
	Arguments and temporary variables: 
		anObject: 	a TRMorph(1046216704)
	Receiver's instance variables: 
		timeStamp: 	3612648
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseMove
		buttons: 	4
		position: 	(660@263)
		handler: 	nil
		wasHandled: 	true
		startPoint: 	(669@269.0)
		trail: 	{(665@264). (662@264). (660@263)}


TRMorph(Morph)>>handleEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(669@269.0) (660@263) mouseMove red 3612648 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleFocusEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(669@269.0) (660@263) mouseMove red 3612648 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(669@269.0) (660@263) mouseMove red 3612648 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ edError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		announcement: 	a TRMouseDragging
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


TRCanvas>>announce:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
		anEvent: 	a TRMouseDragging
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TRLabelShape a TREllipseShape a...etc...
		fixedShapes: 	an OrderedCollection()
		extent: 	(275.0@283.0)
		animations: 	an OrderedCollection()
		morph: 	a TRMorph(1046216704)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color white
		session: 	a Session


TRMorph>>rtMouseDragging:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(656@262.0) (597@249) mouseMove red 3612700 nil]
		step: 	(-72@ -20)
		relativePosition: 	(34.0@152.0)
		event: 	a TRMouseDragging
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>mouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(656@262.0) (597@249) mouseMove red 3612700 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(656@262.0) (597@249) mouseMove red 3612700 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(656@262.0) (597@249) mouseMove red 3612700 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


MouseMoveEvent>>sentTo:
	Receiver: [(656@262.0) (597@249) mouseMove red 3612700 nil]
	Arguments and temporary variables: 
		anObject: 	a TRMorph(1046216704)
	Receiver's instance variables: 
		timeStamp: 	3612700
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseMove
		buttons: 	4
		position: 	(597@249)
		handler: 	nil
		wasHandled: 	true
		startPoint: 	(656@262.0)
		trail: 	{(649@260). (638@258). (627@256). (615@253). (605@251). (597@249)}


TRMorph(Morph)>>handleEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(656@262.0) (597@249) mouseMove red 3612700 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleFocusEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(656@262.0) (597@249) mouseMove red 3612700 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(656@262.0) (597@249) mouseMove red 3612700 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(588@244.0) corner: (604@260.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(588@244.0) corner: (604@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mou
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(660@263.0) (656@262) mouseMove red 3612678 nil]
	Receiver's instance variables: 
		bounds: 	(597@249.0) corner: (613@265.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(597@249.0) corner: (613@265.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(656@262.0) (597@249) mouseMove red 3612700 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612700 649 260 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(660@263.0) (656@262) mouseMove red 3612678 nil]
		evt: 	[(660@263.0) (656@262) mouseMove red 3612678 nil]
		pos: 	(656@262)
	Receiver's instance variables: 
		bounds: 	(597@249.0) corner: (613@265.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(597@249.0) corner: (613@265.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(656@262.0) (597@249) mouseMove red 3612700 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612700 649 260 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(660@263.0) (656@262) mouseMove red 3612678 nil]
		evtBuf: 	#(1 3612678 656 262 4 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(597@249.0) corner: (613@265.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(597@249.0) corner: (613@265.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(656@262.0) (597@249) mouseMove red 3612700 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612700 649 260 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612758
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612758
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612758
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612758
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil



--- The full stack ---
RTView(Object)>>doesNotUnderstand: #translateBy:
[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
RTGroup(OrderedCollection)>>do:
RTGroup>>translateBy:
[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
AnnouepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612758
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612758
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612758
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612758
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil



--- The full stack ---
RTView(Object)>>doesNotUnderstand: #translateBy:
[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
RTGroup(OrderedCollection)>>do:
RTGroup>>translateBy:
[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
TRCanvas>>announce:
TRMorph>>rtMouseDragging:
TRMorph>>mouseMove:
TRMorph(Morph)>>handleMouseMove:
TRMorph>>handleMouseMove:
MouseMoveEvent>>sentTo:
TRMorph(Morph)>>handleEvent:
TRMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>mouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(597@249.0) (588@244) mouseMove red 3612750 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(597@249.0) (588@244) mouseMove red 3612750 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(597@249.0) (588@244) mouseMove red 3612750 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


MouseMoveEvent>>sentTo:
	Receiver: [(597@249.0) (588@244) mouseMove red 3612750 nil]
	Arguments and temporary variables: 
		anObject: 	a TRMorph(1046216704)
	Receiver's instance variables: 
		timeStamp: 	3612750
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseMove
		buttons: 	4
		position: 	(588@244)
		handler: 	nil
		wasHandled: 	true
		startPoint: 	(597@249.0)
		trail: 	{(591@247). (589@245). (588@244)}


TRMorph(Morph)>>handleEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(597@249.0) (588@244) mouseMove red 3612750 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleFocusEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(597@249.0) (588@244) mouseMove red 3612750 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(597@249.0) (588@244) mouseMove red 3612750 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(588@244.0) corner: (604@260.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(588@244.0) corner: (604@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(597@249.0) (588@244) mouseMove red 3612750 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612750 591 247 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(597@249) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(597@249.0) (588@244) mouseMove red 3612750 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(588@244.0) corner: (604@260.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(588@244.0) corner: (604@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTView>>translateBy:
5 November 2015 6:24:16.163524 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTView(Object)>>doesNotUnderstand: #translateBy:
	Receiver: a RTView
	Arguments and temporary variables: 
		aMessage: 	translateBy: (-81.99180081991801@ -25.997400259974004)
		exception: 	MessageNotUnderstood: RTView>>translateBy:
		resumeValue: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		elements: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement)...etc...
		edges: 	an OrderedCollection(a RTEdge a RTEdge a RTEdge)
		trCanvas: 	a TRCanvas


[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-81.99180081991801@ -25.997400259974004)
		e: 	a RTView
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aBlock: 	[ :e | e translateBy: aPoint ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-81.99180081991801@ -25.997400259974004)
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
	Receiver: a RTDraggable
	Arguments and temporary variables: 
		element: 	a RTView
		e: 	a TRMouseDragging
		d: 	(-81.99180081991801@ -25.997400259974004)
		t: 	a RTGroup(a RTView)
	Receiver's instance variables: 
		groupToDrag: 	#()


BlockClosure>>cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		anArg: 	a TRMouseDragging
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		firstArg: 	a TRMouseDragging
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		announcement: 	a TRMouseDragging
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


TRCanvas>>announce:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
		anEvent: 	a TRMouseDragging
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TRLabelShape a TREllipseShape a...etc...
		fixedShapes: 	an OrderedCollection()
		extent: 	(275.0@283.0)
		animations: 	an OrderedCollection()
		morph: 	a TRMorph(1046216704)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color white
		session: 	a Session


TRMorph>>rtMouseDragging:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
		step: 	(-82@ -26)
		relativePosition: 	(24.0@146.0)
		event: 	a TRMouseDragging
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>mouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


MouseMoveEvent>>sentTo:
	Receiver: [(588@244.0) (587@243) mouseMove red 3612770 nil]
	Arguments and temporary variables: 
		anObject: 	a TRMorph(1046216704)
	Receiver's instance variables: 
		timeStamp: 	3612770
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseMove
		buttons: 	4
		position: 	(587@243)
		handler: 	nil
		wasHandled: 	true
		startPoint: 	(588@244.0)
		trail: 	{(587@243)}


TRMorph(Morph)>>handleEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleFocusEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(587@243.0) corner: (603@259.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(587@243.0) corner: (603@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612770 587 243 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(588@244) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(587@243.0) corner: (603@259.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(587@243.0) corner: (603@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612770 587 243 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(587@243.0) corner: (603@259.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(587@243.0) corner: (603@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612770 587 243 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
	Receiver's instance variables: 
		bounds: 	(587@243.0) corner: (603@259.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(587@243.0) corner: (603@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612770 587 243 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
		evt: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
		pos: 	(587@243)
	Receiver's instance variables: 
		bounds: 	(587@243.0) corner: (603@259.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(587@243.0) corner: (603@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612770 587 243 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
		evtBuf: 	#(1 3612770 587 243 4 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(587@243.0) corner: (603@259.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(587@243.0) corner: (603@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@244.0) (587@243) mouseMove red 3612770 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612770 587 243 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612778
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612778
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612778
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612778
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil



--- The full stack ---
RTView(Object)>>doesNotUnderstand: #translateBy:
[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
RTGroup(OrderedCollection)>>do:
RTGroup>>translateBy:
[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
TRCanvas>>announce:
TRMorph>>rtMouseDragging:
TRMorph>>mouseMove:
TRMorph(Morph)>>handleMouseMove:
TRMorph>>handleMouseMove:
MouseMoveEvent>>sentTo:
TRMorph(Morph)>>handleEvent:
TRMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTView>>translateBy:
5 November 2015 6:24:16.181524 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTView(Object)>>doesNotUnderstand: #translateBy:
	Receiver: a RTView
	Arguments and temporary variables: 
		aMessage: 	translateBy: (-80.991900809919@ -26.997300269973003)
		exception: 	MessageNotUnderstood: RTView>>translateBy:
		resumeValue: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		elements: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement)...etc...
		edges: 	an OrderedCollection(a RTEdge a RTEdge a RTEdge)
		trCanvas: 	a TRCanvas


[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-80.991900809919@ -26.997300269973003)
		e: 	a RTView
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aBlock: 	[ :e | e translateBy: aPoint ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-80.991900809919@ -26.997300269973003)
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
	Receiver: a RTDraggable
	Arguments and temporary variables: 
		element: 	a RTView
		e: 	a TRMouseDragging
		d: 	(-80.991900809919@ -26.997300269973003)
		t: 	a RTGroup(a RTView)
	Receiver's instance variables: 
		groupToDrag: 	#()


BlockClosure>>cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		anArg: 	a TRMouseDragging
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		firstArg: 	a TRMouseDragging
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		announcement: 	a TRMouseDragging
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


TRCanvas>>announce:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
		anEvent: 	a TRMouseDragging
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TRLabelShape a TREllipseShape a...etc...
		fixedShapes: 	an OrderedCollection()
		extent: 	(275.0@283.0)
		animations: 	an OrderedCollection()
		morph: 	a TRMorph(1046216704)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color white
		session: 	a Session


TRMorph>>rtMouseDragging:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
		step: 	(-81@ -27)
		relativePosition: 	(25.0@145.0)
		event: 	a TRMouseDragging
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>mouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


MouseMoveEvent>>sentTo:
	Receiver: [(587@243.0) (588@242) mouseMove red 3612790 nil]
	Arguments and temporary variables: 
		anObject: 	a TRMorph(1046216704)
	Receiver's instance variables: 
		timeStamp: 	3612790
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseMove
		buttons: 	4
		position: 	(588@242)
		handler: 	nil
		wasHandled: 	true
		startPoint: 	(587@243.0)
		trail: 	{(588@242)}


TRMorph(Morph)>>handleEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleFocusEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(588@242.0) corner: (604@258.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(588@242.0) corner: (604@258.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612790 588 242 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(587@243) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(588@242.0) corner: (604@258.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(588@242.0) corner: (604@258.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612790 588 242 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(588@242.0) corner: (604@258.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(588@242.0) corner: (604@258.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612790 588 242 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
	Receiver's instance variables: 
		bounds: 	(588@242.0) corner: (604@258.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(588@242.0) corner: (604@258.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612790 588 242 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
		evt: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
		pos: 	(588@242)
	Receiver's instance variables: 
		bounds: 	(588@242.0) corner: (604@258.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(588@242.0) corner: (604@258.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612790 588 242 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
		evtBuf: 	#(1 3612790 588 242 4 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(588@242.0) corner: (604@258.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(588@242.0) corner: (604@258.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(587@243.0) (588@242) mouseMove red 3612790 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612790 588 242 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612798
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612798
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612798
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612798
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil



--- The full stack ---
RTView(Object)>>doesNotUnderstand: #translateBy:
[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
RTGroup(OrderedCollection)>>do:
RTGroup>>translateBy:
[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
TRCanvas>>announce:
TRMorph>>rtMouseDragging:
TRMorph>>mouseMove:
TRMorph(Morph)>>handleMouseMove:
TRMorph>>handleMouseMove:
MouseMoveEvent>>sentTo:
TRMorph(Morph)>>handleEvent:
TRMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTView>>translateBy:
5 November 2015 6:24:16.201524 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTView(Object)>>doesNotUnderstand: #translateBy:
	Receiver: a RTView
	Arguments and temporary variables: 
		aMessage: 	translateBy: (-77.99220077992202@ -29.997000299970004)
		exception: 	MessageNotUnderstood: RTView>>translateBy:
		resumeValue: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		elements: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement)...etc...
		edges: 	an OrderedCollection(a RTEdge a RTEdge a RTEdge)
		trCanvas: 	a TRCanvas


[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-77.99220077992202@ -29.997000299970004)
		e: 	a RTView
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aBlock: 	[ :e | e translateBy: aPoint ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-77.99220077992202@ -29.997000299970004)
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
	Receiver: a RTDraggable
	Arguments and temporary variables: 
		element: 	a RTView
		e: 	a TRMouseDragging
		d: 	(-77.99220077992202@ -29.997000299970004)
		t: 	a RTGroup(a RTView)
	Receiver's instance variables: 
		groupToDrag: 	#()


BlockClosure>>cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		anArg: 	a TRMouseDragging
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		firstArg: 	a TRMouseDragging
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		announcement: 	a TRMouseDragging
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


TRCanvas>>announce:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
		anEvent: 	a TRMouseDragging
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TRLabelShape a TREllipseShape a...etc...
		fixedShapes: 	an OrderedCollection()
		extent: 	(275.0@283.0)
		animations: 	an OrderedCollection()
		morph: 	a TRMorph(1046216704)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color white
		session: 	a Session


TRMorph>>rtMouseDragging:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
		step: 	(-78@ -30)
		relativePosition: 	(28.0@142.0)
		event: 	a TRMouseDragging
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>mouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


MouseMoveEvent>>sentTo:
	Receiver: [(588@242.0) (591@239) mouseMove red 3612810 nil]
	Arguments and temporary variables: 
		anObject: 	a TRMorph(1046216704)
	Receiver's instance variables: 
		timeStamp: 	3612810
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseMove
		buttons: 	4
		position: 	(591@239)
		handler: 	nil
		wasHandled: 	true
		startPoint: 	(588@242.0)
		trail: 	{(589@241). (590@240). (591@239)}


TRMorph(Morph)>>handleEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleFocusEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(591@239.0) corner: (607@255.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(591@239.0) corner: (607@255.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612810 589 241 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(588@242) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(591@239.0) corner: (607@255.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(591@239.0) corner: (607@255.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612810 589 241 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(591@239.0) corner: (607@255.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(591@239.0) corner: (607@255.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612810 589 241 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
	Receiver's instance variables: 
		bounds: 	(591@239.0) corner: (607@255.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(591@239.0) corner: (607@255.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612810 589 241 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
		evt: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
		pos: 	(591@239)
	Receiver's instance variables: 
		bounds: 	(591@239.0) corner: (607@255.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(591@239.0) corner: (607@255.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612810 589 241 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
		evtBuf: 	#(1 3612810 589 241 4 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(591@239.0) corner: (607@255.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(591@239.0) corner: (607@255.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@242.0) (591@239) mouseMove red 3612810 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612810 589 241 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612818
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612818
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612818
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612818
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil



--- The full stack ---
RTView(Object)>>doesNotUnderstand: #translateBy:
[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
RTGroup(OrderedCollection)>>do:
RTGroup>>translateBy:
[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
TRCanvas>>announce:
TRMorph>>rtMouseDragging:
TRMorph>>mouseMove:
TRMorph(Morph)>>handleMouseMove:
TRMorph>>handleMouseMove:
MouseMoveEvent>>sentTo:
TRMorph(Morph)>>handleEvent:
TRMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTView>>translateBy:
5 November 2015 6:24:16.221524 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTView(Object)>>doesNotUnderstand: #translateBy:
	Receiver: a RTView
	Arguments and temporary variables: 
		aMessage: 	translateBy: (-72.99270072992701@ -30.996900309969003)
		exception: 	MessageNotUnderstood: RTView>>translateBy:
		resumeValue: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		elements: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement)...etc...
		edges: 	an OrderedCollection(a RTEdge a RTEdge a RTEdge)
		trCanvas: 	a TRCanvas


[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-72.99270072992701@ -30.996900309969003)
		e: 	a RTView
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aBlock: 	[ :e | e translateBy: aPoint ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-72.99270072992701@ -30.996900309969003)
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
	Receiver: a RTDraggable
	Arguments and temporary variables: 
		element: 	a RTView
		e: 	a TRMouseDragging
		d: 	(-72.99270072992701@ -30.996900309969003)
		t: 	a RTGroup(a RTView)
	Receiver's instance variables: 
		groupToDrag: 	#()


BlockClosure>>cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		anArg: 	a TRMouseDragging
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		firstArg: 	a TRMouseDragging
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		announcement: 	a TRMouseDragging
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


TRCanvas>>announce:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
		anEvent: 	a TRMouseDragging
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TRLabelShape a TREllipseShape a...etc...
		fixedShapes: 	an OrderedCollection()
		extent: 	(275.0@283.0)
		animations: 	an OrderedCollection()
		morph: 	a TRMorph(1046216704)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color white
		session: 	a Session


TRMorph>>rtMouseDragging:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
		step: 	(-73@ -31)
		relativePosition: 	(33.0@141.0)
		event: 	a TRMouseDragging
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>mouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


MouseMoveEvent>>sentTo:
	Receiver: [(591@239.0) (596@238) mouseMove red 3612830 nil]
	Arguments and temporary variables: 
		anObject: 	a TRMorph(1046216704)
	Receiver's instance variables: 
		timeStamp: 	3612830
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseMove
		buttons: 	4
		position: 	(596@238)
		handler: 	nil
		wasHandled: 	true
		startPoint: 	(591@239.0)
		trail: 	{(593@239). (596@238)}


TRMorph(Morph)>>handleEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleFocusEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(596@238.0) corner: (612@254.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(596@238.0) corner: (612@254.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612830 593 239 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(591@239) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(596@238.0) corner: (612@254.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(596@238.0) corner: (612@254.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612830 593 239 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(596@238.0) corner: (612@254.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(596@238.0) corner: (612@254.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612830 593 239 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
	Receiver's instance variables: 
		bounds: 	(596@238.0) corner: (612@254.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(596@238.0) corner: (612@254.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612830 593 239 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
		evt: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
		pos: 	(596@238)
	Receiver's instance variables: 
		bounds: 	(596@238.0) corner: (612@254.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(596@238.0) corner: (612@254.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612830 593 239 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
		evtBuf: 	#(1 3612830 593 239 4 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(596@238.0) corner: (612@254.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(596@238.0) corner: (612@254.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(591@239.0) (596@238) mouseMove red 3612830 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612830 593 239 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612838
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612838
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612838
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612838
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil



--- The full stack ---
RTView(Object)>>doesNotUnderstand: #translateBy:
[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
RTGroup(OrderedCollection)>>do:
RTGroup>>translateBy:
[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
TRCanvas>>announce:
TRMorph>>rtMouseDragging:
TRMorph>>mouseMove:
TRMorph(Morph)>>handleMouseMove:
TRMorph>>handleMouseMove:
MouseMoveEvent>>sentTo:
TRMorph(Morph)>>handleEvent:
TRMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTView>>translateBy:
5 November 2015 6:24:16.241524 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTView(Object)>>doesNotUnderstand: #translateBy:
	Receiver: a RTView
	Arguments and temporary variables: 
		aMessage: 	translateBy: (-63.993600639936005@ -32.996700329967005)
		exception: 	MessageNotUnderstood: RTView>>translateBy:
		resumeValue: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		elements: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement)...etc...
		edges: 	an OrderedCollection(a RTEdge a RTEdge a RTEdge)
		trCanvas: 	a TRCanvas


[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-63.993600639936005@ -32.996700329967005)
		e: 	a RTView
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aBlock: 	[ :e | e translateBy: aPoint ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-63.993600639936005@ -32.996700329967005)
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
	Receiver: a RTDraggable
	Arguments and temporary variables: 
		element: 	a RTView
		e: 	a TRMouseDragging
		d: 	(-63.993600639936005@ -32.996700329967005)
		t: 	a RTGroup(a RTView)
	Receiver's instance variables: 
		groupToDrag: 	#()


BlockClosure>>cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		anArg: 	a TRMouseDragging
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		firstArg: 	a TRMouseDragging
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		announcement: 	a TRMouseDragging
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


TRCanvas>>announce:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
		anEvent: 	a TRMouseDragging
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TRLabelShape a TREllipseShape a...etc...
		fixedShapes: 	an OrderedCollection()
		extent: 	(275.0@283.0)
		animations: 	an OrderedCollection()
		morph: 	a TRMorph(1046216704)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color white
		session: 	a Session


TRMorph>>rtMouseDragging:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
		step: 	(-64@ -33)
		relativePosition: 	(42.0@139.0)
		event: 	a TRMouseDragging
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>mouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


MouseMoveEvent>>sentTo:
	Receiver: [(596@238.0) (605@236) mouseMove red 3612850 nil]
	Arguments and temporary variables: 
		anObject: 	a TRMorph(1046216704)
	Receiver's instance variables: 
		timeStamp: 	3612850
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseMove
		buttons: 	4
		position: 	(605@236)
		handler: 	nil
		wasHandled: 	true
		startPoint: 	(596@238.0)
		trail: 	{(599@237). (603@236). (605@236)}


TRMorph(Morph)>>handleEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleFocusEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(605@236.0) corner: (621@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(605@236.0) corner: (621@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612850 599 237 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(596@238) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(605@236.0) corner: (621@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(605@236.0) corner: (621@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612850 599 237 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(605@236.0) corner: (621@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(605@236.0) corner: (621@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612850 599 237 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
	Receiver's instance variables: 
		bounds: 	(605@236.0) corner: (621@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(605@236.0) corner: (621@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612850 599 237 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
		evt: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
		pos: 	(605@236)
	Receiver's instance variables: 
		bounds: 	(605@236.0) corner: (621@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(605@236.0) corner: (621@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612850 599 237 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
		evtBuf: 	#(1 3612850 599 237 4 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(605@236.0) corner: (621@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(605@236.0) corner: (621@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(596@238.0) (605@236) mouseMove red 3612850 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612850 599 237 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612858
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612858
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612858
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612858
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil



--- The full stack ---
RTView(Object)>>doesNotUnderstand: #translateBy:
[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
RTGroup(OrderedCollection)>>do:
RTGroup>>translateBy:
[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
TRCanvas>>announce:
TRMorph>>rtMouseDragging:
TRMorph>>mouseMove:
TRMorph(Morph)>>handleMouseMove:
TRMorph>>handleMouseMove:
MouseMoveEvent>>sentTo:
TRMorph(Morph)>>handleEvent:
TRMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTView>>translateBy:
5 November 2015 6:24:16.261524 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTView(Object)>>doesNotUnderstand: #translateBy:
	Receiver: a RTView
	Arguments and temporary variables: 
		aMessage: 	translateBy: (-55.994400559944005@ -32.996700329967005)
		exception: 	MessageNotUnderstood: RTView>>translateBy:
		resumeValue: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		elements: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement)...etc...
		edges: 	an OrderedCollection(a RTEdge a RTEdge a RTEdge)
		trCanvas: 	a TRCanvas


[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-55.994400559944005@ -32.996700329967005)
		e: 	a RTView
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aBlock: 	[ :e | e translateBy: aPoint ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-55.994400559944005@ -32.996700329967005)
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
	Receiver: a RTDraggable
	Arguments and temporary variables: 
		element: 	a RTView
		e: 	a TRMouseDragging
		d: 	(-55.994400559944005@ -32.996700329967005)
		t: 	a RTGroup(a RTView)
	Receiver's instance variables: 
		groupToDrag: 	#()


BlockClosure>>cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		anArg: 	a TRMouseDragging
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		firstArg: 	a TRMouseDragging
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		announcement: 	a TRMouseDragging
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


TRCanvas>>announce:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
		anEvent: 	a TRMouseDragging
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TRLabelShape a TREllipseShape a...etc...
		fixedShapes: 	an OrderedCollection()
		extent: 	(275.0@283.0)
		animations: 	an OrderedCollection()
		morph: 	a TRMorph(1046216704)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color white
		session: 	a Session


TRMorph>>rtMouseDragging:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
		step: 	(-56@ -33)
		relativePosition: 	(50.0@139.0)
		event: 	a TRMouseDragging
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>mouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


MouseMoveEvent>>sentTo:
	Receiver: [(605@236.0) (613@236) mouseMove red 3612870 nil]
	Arguments and temporary variables: 
		anObject: 	a TRMorph(1046216704)
	Receiver's instance variables: 
		timeStamp: 	3612870
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseMove
		buttons: 	4
		position: 	(613@236)
		handler: 	nil
		wasHandled: 	true
		startPoint: 	(605@236.0)
		trail: 	{(608@236). (613@236)}


TRMorph(Morph)>>handleEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleFocusEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(613@236.0) corner: (629@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(613@236.0) corner: (629@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612870 608 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(605@236) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(613@236.0) corner: (629@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(613@236.0) corner: (629@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612870 608 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(613@236.0) corner: (629@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(613@236.0) corner: (629@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612870 608 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
	Receiver's instance variables: 
		bounds: 	(613@236.0) corner: (629@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(613@236.0) corner: (629@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612870 608 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
		evt: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
		pos: 	(613@236)
	Receiver's instance variables: 
		bounds: 	(613@236.0) corner: (629@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(613@236.0) corner: (629@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612870 608 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
		evtBuf: 	#(1 3612870 608 236 4 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(613@236.0) corner: (629@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(613@236.0) corner: (629@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(605@236.0) (613@236) mouseMove red 3612870 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612870 608 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612878
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612878
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612878
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612878
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil



--- The full stack ---
RTView(Object)>>doesNotUnderstand: #translateBy:
[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
RTGroup(OrderedCollection)>>do:
RTGroup>>translateBy:
[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
TRCanvas>>announce:
TRMorph>>rtMouseDragging:
TRMorph>>mouseMove:
TRMorph(Morph)>>handleMouseMove:
TRMorph>>handleMouseMove:
MouseMoveEvent>>sentTo:
TRMorph(Morph)>>handleEvent:
TRMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTView>>translateBy:
5 November 2015 6:24:16.281524 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTView(Object)>>doesNotUnderstand: #translateBy:
	Receiver: a RTView
	Arguments and temporary variables: 
		aMessage: 	translateBy: (-39.99600039996@ -32.996700329967005)
		exception: 	MessageNotUnderstood: RTView>>translateBy:
		resumeValue: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		elements: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement)...etc...
		edges: 	an OrderedCollection(a RTEdge a RTEdge a RTEdge)
		trCanvas: 	a TRCanvas


[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-39.99600039996@ -32.996700329967005)
		e: 	a RTView
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aBlock: 	[ :e | e translateBy: aPoint ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-39.99600039996@ -32.996700329967005)
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
	Receiver: a RTDraggable
	Arguments and temporary variables: 
		element: 	a RTView
		e: 	a TRMouseDragging
		d: 	(-39.99600039996@ -32.996700329967005)
		t: 	a RTGroup(a RTView)
	Receiver's instance variables: 
		groupToDrag: 	#()


BlockClosure>>cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		anArg: 	a TRMouseDragging
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		firstArg: 	a TRMouseDragging
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		announcement: 	a TRMouseDragging
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


TRCanvas>>announce:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
		anEvent: 	a TRMouseDragging
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TRLabelShape a TREllipseShape a...etc...
		fixedShapes: 	an OrderedCollection()
		extent: 	(275.0@283.0)
		animations: 	an OrderedCollection()
		morph: 	a TRMorph(1046216704)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color white
		session: 	a Session


TRMorph>>rtMouseDragging:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
		step: 	(-40@ -33)
		relativePosition: 	(66.0@139.0)
		event: 	a TRMouseDragging
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>mouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


MouseMoveEvent>>sentTo:
	Receiver: [(613@236.0) (629@236) mouseMove red 3612890 nil]
	Arguments and temporary variables: 
		anObject: 	a TRMorph(1046216704)
	Receiver's instance variables: 
		timeStamp: 	3612890
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseMove
		buttons: 	4
		position: 	(629@236)
		handler: 	nil
		wasHandled: 	true
		startPoint: 	(613@236.0)
		trail: 	{(617@236). (622@236). (629@236)}


TRMorph(Morph)>>handleEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleFocusEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(629@236.0) corner: (645@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(629@236.0) corner: (645@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612890 617 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(613@236) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(629@236.0) corner: (645@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(629@236.0) corner: (645@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612890 617 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(629@236.0) corner: (645@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(629@236.0) corner: (645@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612890 617 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
	Receiver's instance variables: 
		bounds: 	(629@236.0) corner: (645@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(629@236.0) corner: (645@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612890 617 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
		evt: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
		pos: 	(629@236)
	Receiver's instance variables: 
		bounds: 	(629@236.0) corner: (645@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(629@236.0) corner: (645@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612890 617 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
		evtBuf: 	#(1 3612890 617 236 4 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(629@236.0) corner: (645@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(629@236.0) corner: (645@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(613@236.0) (629@236) mouseMove red 3612890 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612890 617 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612898
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612898
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612898
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612898
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil



--- The full stack ---
RTView(Object)>>doesNotUnderstand: #translateBy:
[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
RTGroup(OrderedCollection)>>do:
RTGroup>>translateBy:
[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
TRCanvas>>announce:
TRMorph>>rtMouseDragging:
TRMorph>>mouseMove:
TRMorph(Morph)>>handleMouseMove:
TRMorph>>handleMouseMove:
MouseMoveEvent>>sentTo:
TRMorph(Morph)>>handleEvent:
TRMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTView>>translateBy:
5 November 2015 6:24:16.301524 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTView(Object)>>doesNotUnderstand: #translateBy:
	Receiver: a RTView
	Arguments and temporary variables: 
		aMessage: 	translateBy: (-32.996700329967005@ -32.996700329967005)
		exception: 	MessageNotUnderstood: RTView>>translateBy:
		resumeValue: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		elements: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement)...etc...
		edges: 	an OrderedCollection(a RTEdge a RTEdge a RTEdge)
		trCanvas: 	a TRCanvas


[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-32.996700329967005@ -32.996700329967005)
		e: 	a RTView
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aBlock: 	[ :e | e translateBy: aPoint ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


RTGroup>>translateBy:
	Receiver: a RTGroup(a RTView)
	Arguments and temporary variables: 
		aPoint: 	(-32.996700329967005@ -32.996700329967005)
	Receiver's instance variables: 
		array: 	an Array(a RTView)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil


[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
	Receiver: a RTDraggable
	Arguments and temporary variables: 
		element: 	a RTView
		e: 	a TRMouseDragging
		d: 	(-32.996700329967005@ -32.996700329967005)
		t: 	a RTGroup(a RTView)
	Receiver's instance variables: 
		groupToDrag: 	#()


BlockClosure>>cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		anArg: 	a TRMouseDragging
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add...etc...
	Arguments and temporary variables: 
		firstArg: 	a TRMouseDragging
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	RTDraggable(RTAbstractDraggable)>>initializeElement:
		startpc: 	84
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseDragging
		subscriber: 	a RTDraggable
		action: 	[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element...etc...


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a TRMouseDragging
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseDragging
		announcement: 	a TRMouseDragging
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


TRCanvas>>announce:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
		anEvent: 	a TRMouseDragging
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TRLabelShape a TREllipseShape a...etc...
		fixedShapes: 	an OrderedCollection()
		extent: 	(275.0@283.0)
		animations: 	an OrderedCollection()
		morph: 	a TRMorph(1046216704)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color white
		session: 	a Session


TRMorph>>rtMouseDragging:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
		step: 	(-33@ -33)
		relativePosition: 	(73.0@139.0)
		event: 	a TRMouseDragging
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>mouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		evt: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph>>handleMouseMove:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


MouseMoveEvent>>sentTo:
	Receiver: [(629@236.0) (636@236) mouseMove red 3612910 nil]
	Arguments and temporary variables: 
		anObject: 	a TRMorph(1046216704)
	Receiver's instance variables: 
		timeStamp: 	3612910
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseMove
		buttons: 	4
		position: 	(636@236)
		handler: 	nil
		wasHandled: 	true
		startPoint: 	(629@236.0)
		trail: 	{(636@236)}


TRMorph(Morph)>>handleEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


TRMorph(Morph)>>handleFocusEvent:
	Receiver: a TRMorph(1046216704)
	Arguments and temporary variables: 
		anEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@97.0) corner: (838.0@380.0)
		owner: 	a PanelMorph(419954688)
		submorphs: 	#()
		fullBounds: 	(563.0@97.0) corner: (838.0@380.0)
		color: 	Color blue
		extension: 	a MorphExtension (152305664)
		trachelCanvas: 	a TRCanvas
		surface: 	an AthensCairoSurface
		eventBeginingDragging: 	[(669@269) mouseDown red 3612584 nil]
		shapeBeingPointed: 	a TRCanvas
		shouldRefresh: 	false
		session: 	a Session


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(636@236.0) corner: (652@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(636@236.0) corner: (652@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612910 636 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(629@236) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(636@236.0) corner: (652@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(636@236.0) corner: (652@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612910 636 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
		focusHolder: 	a TRMorph(1046216704)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(636@236.0) corner: (652@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(636@236.0) corner: (652@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612910 636 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
	Receiver's instance variables: 
		bounds: 	(636@236.0) corner: (652@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(636@236.0) corner: (652@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612910 636 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
		evt: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
		pos: 	(636@236)
	Receiver's instance variables: 
		bounds: 	(636@236.0) corner: (652@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(636@236.0) corner: (652@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612910 636 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
		evtBuf: 	#(1 3612910 636 236 4 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(636@236.0) corner: (652@252.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(636@236.0) corner: (652@252.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	a TRMorph(1046216704)
		keyboardFocus: 	a RubEditingArea(638320640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(629@236.0) (636@236) mouseMove red 3612910 nil]
		targetOffset: 	(106.0@172.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3612910 636 236 4 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612918
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612918
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612918
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(691273728))(a DropList...etc...
		lastStepTime: 	3612648
		lastStepMessage: 	nil
		lastCycleTime: 	3612918
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1069547520)))
		lastAlarmTime: 	3612648
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(753139712) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil



--- The full stack ---
RTView(Object)>>doesNotUnderstand: #translateBy:
[ :e | e translateBy: aPoint ] in RTGroup>>translateBy:
RTGroup(OrderedCollection)>>do:
RTGroup>>translateBy:
[ :e | 
| d t |
t := RTGroup withAll: groupToDrag.
(t includes: element)
	ifFalse: [ t add: element ].
d := element view canvas camera distanceFromPixelToSpace: e step.
t translateBy: (self transformDistance: d forElement: element).
self constraintIfNecessary: element.
e signalUpdate ] in RTDraggable(RTAbstractDraggable)>>initializeElement:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
TRCanvas>>announce:
TRMorph>>rtMouseDragging:
TRMorph>>mouseMove:
TRMorph(Morph)>>handleMouseMove:
TRMorph>>handleMouseMove:
MouseMoveEvent>>sentTo:
TRMorph(Morph)>>handleEvent:
TRMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Testing class>>test1
9 November 2015 4:36:03.040472 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Testing class(Object)>>doesNotUnderstand: #test1
	Receiver: Testing
	Arguments and temporary variables: 
		aMessage: 	test1
		exception: 	MessageNotUnderstood: Testing class>>test1
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#test1->Testing>>#test1 )
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Testing
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RQT-Pharo'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Testing new; test1.'
		itsSelection: 	a Text for 'Testing new; test1.'
		itsSelectionString: 	'Testing new; test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Testing
		new;
		test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(285212672)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(285212672)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(707526656)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(285212672)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(829423616)
		submorphs: 	an Array(a RubPrimarySelectionMorph(315097088) a RubCursor(725614592...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (757334016) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(791150592)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(725614592)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(303300608))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(707526656)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(997982208))(a DropList...etc...
		lastStepTime: 	582668
		lastStepMessage: 	nil
		lastCycleTime: 	582688
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(725614592)))
		lastAlarmTime: 	582668
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(954204160) a GL...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(997982208))(a DropList...etc...
		lastStepTime: 	582668
		lastStepMessage: 	nil
		lastCycleTime: 	582688
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(725614592)))
		lastAlarmTime: 	582668
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(997982208))(a DropList...etc...
		lastStepTime: 	582668
		lastStepMessage: 	nil
		lastCycleTime: 	582688
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(725614592)))
		lastAlarmTime: 	582668
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(954204160) a GL...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Testing class(Object)>>doesNotUnderstand: #test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TestingGraph class>>test1
9 November 2015 4:36:35.790424 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

TestingGraph class(Object)>>doesNotUnderstand: #test1
	Receiver: TestingGraph
	Arguments and temporary variables: 
		aMessage: 	test1
		exception: 	MessageNotUnderstood: TestingGraph class>>test1
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#test1->TestingGraph>>#test1 )
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TestingGraph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RQT-Pharo'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new; test1.'
		itsSelection: 	a Text for 'TestingGraph new; test1.'
		itsSelectionString: 	'TestingGraph new; test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph
		new;
		test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(285212672)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(285212672)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(707526656)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(285212672)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(829423616)
		submorphs: 	an Array(a RubPrimarySelectionMorph(315097088) a RubCursor(725614592...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (757334016) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(791150592)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(725614592)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(357302272))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(707526656)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	615484
		lastStepMessage: 	nil
		lastCycleTime: 	615504
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(725614592)))
		lastAlarmTime: 	615484
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(954204160) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	615484
		lastStepMessage: 	nil
		lastCycleTime: 	615504
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(725614592)))
		lastAlarmTime: 	615484
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	615484
		lastStepMessage: 	nil
		lastCycleTime: 	615504
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(725614592)))
		lastAlarmTime: 	615484
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(954204160) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TestingGraph class(Object)>>doesNotUnderstand: #test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: BlockClosure>>nodeArray
9 November 2015 4:51:44.648421 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

BlockClosure(Object)>>doesNotUnderstand: #nodeArray
	Receiver: [ :node | self halt ]
	Arguments and temporary variables: 
		aMessage: 	nodeArray
		exception: 	MessageNotUnderstood: BlockClosure>>nodeArray
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	229
		numArgs: 	1


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
		arrow: 	a RTArrowedLine
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(862191616))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(997982208))(a DropList...etc...
		lastStepTime: 	1524320
		lastStepMessage: 	nil
		lastCycleTime: 	1524368
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	1524320
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(997982208))(a DropList...etc...
		lastStepTime: 	1524320
		lastStepMessage: 	nil
		lastCycleTime: 	1524368
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	1524320
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(997982208))(a DropList...etc...
		lastStepTime: 	1524320
		lastStepMessage: 	nil
		lastCycleTime: 	1524368
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	1524320
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #nodeArray
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: BlockClosure>>nodeArray
9 November 2015 4:52:02.166422 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

BlockClosure(Object)>>doesNotUnderstand: #nodeArray
	Receiver: [ :node | self halt ]
	Arguments and temporary variables: 
		aMessage: 	nodeArray
		exception: 	MessageNotUnderstood: BlockClosure>>nodeArray
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	229
		numArgs: 	1


Message>>sentTo:
	Receiver: nodeArray
	Arguments and temporary variables: 
		receiver: 	[ :node | self halt ]
	Receiver's instance variables: 
		selector: 	#nodeArray
		args: 	#()
		lookupClass: 	BlockClosure


BlockClosure(Object)>>doesNotUnderstand: #nodeArray
	Receiver: [ :node | self halt ]
	Arguments and temporary variables: 
		aMessage: 	nodeArray
		exception: 	MessageNotUnderstood: BlockClosure>>nodeArray
		resumeValue: 	MessageNotUnderstood: BlockClosure>>nodeArray
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	229
		numArgs: 	1


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
		arrow: 	a RTArrowedLine
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(862191616))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	1541898
		lastStepMessage: 	nil
		lastCycleTime: 	1541918
		alarms: 	a Heap()
		lastAlarmTime: 	1541898
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(228589568) a Nautilu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	1541898
		lastStepMessage: 	nil
		lastCycleTime: 	1541918
		alarms: 	a Heap()
		lastAlarmTime: 	1541898
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	1541898
		lastStepMessage: 	nil
		lastCycleTime: 	1541918
		alarms: 	a Heap()
		lastAlarmTime: 	1541898
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(228589568) a Nautilu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #nodeArray
Message>>sentTo:
BlockClosure(Object)>>doesNotUnderstand: #nodeArray
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
9 November 2015 4:52:18.634426 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :node | self halt ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
		arrow: 	a RTArrowedLine
		node: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :node | self halt ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	225
		numArgs: 	1


[ :object | 
fromElement := aGroup elementFromModel: (fromBlock rtValue: object).
toElement := aGroup elementFromModel: (toBlock rtValue: object).
(fromElement notNil and: [ toElement notNil ])
	ifTrue: [ 
		| edge |
		edge := RTEdge from: fromElement to: toElement.
		edge model: object.
		edge + aLineShape.
		edges add: edge ] ] in RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
	Receiver: RTEdge
	Arguments and temporary variables: 
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :node | self halt ]
		toBlock: 	#pub
		aLineShape: 	a RTArrowedLine
		aGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		edges: 	a RTGroup()
		toElement: 	nil
		fromElement: 	nil
		object: 	a Node
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Node a Node a Node a Node)
	Arguments and temporary variables: 
		aBlock: 	[ :object | 
fromElement := aGroup elementFromModel: (fromBlock rtValue...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Node a Node a Node a Node nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	4


RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
	Receiver: RTEdge
	Arguments and temporary variables: 
		toElement: 	nil
		fromElement: 	nil
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :node | self halt ]
		toBlock: 	#pub
		aLineShape: 	a RTArrowedLine
		aGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		edges: 	a RTGroup()
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTEdge class>>buildEdgesFromObjects:from:to:using:inView:scope:
	Receiver: RTEdge
	Arguments and temporary variables: 
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :node | self halt ]
		toBlock: 	#pub
		aLineShape: 	a RTArrowedLine
		view: 	a RTView
		aGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		es: 	nil
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTEdge class>>buildEdgesFromObjects:from:to:using:inView:
	Receiver: RTEdge
	Arguments and temporary variables: 
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :node | self halt ]
		toBlock: 	#pub
		aLineShape: 	a RTArrowedLine
		view: 	a RTView
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
		arrow: 	a RTArrowedLine
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(862191616))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316407808))(a SearchMorp...etc...
		lastStepTime: 	1558438
		lastStepMessage: 	nil
		lastCycleTime: 	1558428
		alarms: 	a Heap()
		lastAlarmTime: 	1558438
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(60555264) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316407808))(a SearchMorp...etc...
		lastStepTime: 	1558438
		lastStepMessage: 	nil
		lastCycleTime: 	1558428
		alarms: 	a Heap()
		lastAlarmTime: 	1558438
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316407808))(a SearchMorp...etc...
		lastStepTime: 	1558438
		lastStepMessage: 	nil
		lastCycleTime: 	1558428
		alarms: 	a Heap()
		lastAlarmTime: 	1558438
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(60555264) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :node | self halt ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :object | 
fromElement := aGroup elementFromModel: (fromBlock rtValue: object).
toElement := aGroup elementFromModel: (toBlock rtValue: object).
(fromElement notNil and: [ toElement notNil ])
	ifTrue: [ 
		| edge |
		edge := RTEdge from: fromElement to: toElement.
		edge model: object.
		edge + aLineShape.
		edges add: edge ] ] in RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
OrderedCollection>>do:
RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
RTEdge class>>buildEdgesFromObjects:from:to:using:inView:scope:
RTEdge class>>buildEdgesFromObjects:from:to:using:inView:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
9 November 2015 4:53:58.150421 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :node | self halt ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
		arrow: 	a RTArrowedLine
		node: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :node | self halt ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	231
		numArgs: 	1


[ :object | 
fromElement := aGroup elementFromModel: (fromBlock rtValue: object).
toElement := aGroup elementFromModel: (toBlock rtValue: object).
(fromElement notNil and: [ toElement notNil ])
	ifTrue: [ 
		| edge |
		edge := RTEdge from: fromElement to: toElement.
		edge model: object.
		edge + aLineShape.
		edges add: edge ] ] in RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
	Receiver: RTEdge
	Arguments and temporary variables: 
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :node | node ]
		toBlock: 	[ :node | self halt ]
		aLineShape: 	a RTArrowedLine
		aGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		edges: 	a RTGroup()
		toElement: 	nil
		fromElement: 	a RTElement
		object: 	a Node
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Node a Node a Node a Node)
	Arguments and temporary variables: 
		aBlock: 	[ :object | 
fromElement := aGroup elementFromModel: (fromBlock rtValue...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Node a Node a Node a Node nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	4


RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
	Receiver: RTEdge
	Arguments and temporary variables: 
		toElement: 	nil
		fromElement: 	a RTElement
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :node | node ]
		toBlock: 	[ :node | self halt ]
		aLineShape: 	a RTArrowedLine
		aGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		edges: 	a RTGroup()
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTEdge class>>buildEdgesFromObjects:from:to:using:inView:scope:
	Receiver: RTEdge
	Arguments and temporary variables: 
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :node | node ]
		toBlock: 	[ :node | self halt ]
		aLineShape: 	a RTArrowedLine
		view: 	a RTView
		aGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		es: 	nil
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTEdge class>>buildEdgesFromObjects:from:to:using:inView:
	Receiver: RTEdge
	Arguments and temporary variables: 
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :node | node ]
		toBlock: 	[ :node | self halt ]
		aLineShape: 	a RTArrowedLine
		view: 	a RTView
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
		arrow: 	a RTArrowedLine
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(382468096))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	1657852
		lastStepMessage: 	nil
		lastCycleTime: 	1657874
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	1657852
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	1657852
		lastStepMessage: 	nil
		lastCycleTime: 	1657874
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	1657852
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	1657852
		lastStepMessage: 	nil
		lastCycleTime: 	1657874
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	1657852
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :node | self halt ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :object | 
fromElement := aGroup elementFromModel: (fromBlock rtValue: object).
toElement := aGroup elementFromModel: (toBlock rtValue: object).
(fromElement notNil and: [ toElement notNil ])
	ifTrue: [ 
		| edge |
		edge := RTEdge from: fromElement to: toElement.
		edge model: object.
		edge + aLineShape.
		edges add: edge ] ] in RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
OrderedCollection>>do:
RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
RTEdge class>>buildEdgesFromObjects:from:to:using:inView:scope:
RTEdge class>>buildEdgesFromObjects:from:to:using:inView:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
9 November 2015 4:54:15.07642 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :node2 | self halt ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
		arrow: 	a RTArrowedLine
		node2: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :node2 | self halt ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	231
		numArgs: 	1


[ :object | 
fromElement := aGroup elementFromModel: (fromBlock rtValue: object).
toElement := aGroup elementFromModel: (toBlock rtValue: object).
(fromElement notNil and: [ toElement notNil ])
	ifTrue: [ 
		| edge |
		edge := RTEdge from: fromElement to: toElement.
		edge model: object.
		edge + aLineShape.
		edges add: edge ] ] in RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
	Receiver: RTEdge
	Arguments and temporary variables: 
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :node1 | node1 ]
		toBlock: 	[ :node2 | self halt ]
		aLineShape: 	a RTArrowedLine
		aGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		edges: 	a RTGroup()
		toElement: 	nil
		fromElement: 	a RTElement
		object: 	a Node
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Node a Node a Node a Node)
	Arguments and temporary variables: 
		aBlock: 	[ :object | 
fromElement := aGroup elementFromModel: (fromBlock rtValue...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Node a Node a Node a Node nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	4


RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
	Receiver: RTEdge
	Arguments and temporary variables: 
		toElement: 	nil
		fromElement: 	a RTElement
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :node1 | node1 ]
		toBlock: 	[ :node2 | self halt ]
		aLineShape: 	a RTArrowedLine
		aGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		edges: 	a RTGroup()
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTEdge class>>buildEdgesFromObjects:from:to:using:inView:scope:
	Receiver: RTEdge
	Arguments and temporary variables: 
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :node1 | node1 ]
		toBlock: 	[ :node2 | self halt ]
		aLineShape: 	a RTArrowedLine
		view: 	a RTView
		aGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		es: 	nil
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTEdge class>>buildEdgesFromObjects:from:to:using:inView:
	Receiver: RTEdge
	Arguments and temporary variables: 
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :node1 | node1 ]
		toBlock: 	[ :node2 | self halt ]
		aLineShape: 	a RTArrowedLine
		view: 	a RTView
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
		arrow: 	a RTArrowedLine
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(999030784))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 1046740992))...etc...
		lastStepTime: 	1674788
		lastStepMessage: 	nil
		lastCycleTime: 	1674808
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	1674788
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 1046740992))...etc...
		lastStepTime: 	1674788
		lastStepMessage: 	nil
		lastCycleTime: 	1674808
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	1674788
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 1046740992))...etc...
		lastStepTime: 	1674788
		lastStepMessage: 	nil
		lastCycleTime: 	1674808
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	1674788
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :node2 | self halt ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :object | 
fromElement := aGroup elementFromModel: (fromBlock rtValue: object).
toElement := aGroup elementFromModel: (toBlock rtValue: object).
(fromElement notNil and: [ toElement notNil ])
	ifTrue: [ 
		| edge |
		edge := RTEdge from: fromElement to: toElement.
		edge model: object.
		edge + aLineShape.
		edges add: edge ] ] in RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
OrderedCollection>>do:
RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
RTEdge class>>buildEdgesFromObjects:from:to:using:inView:scope:
RTEdge class>>buildEdgesFromObjects:from:to:using:inView:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
9 November 2015 5:04:39.768422 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :val | self halt ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
		arrow: 	a RTArrowedLine
		val: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :val | self halt ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	225
		numArgs: 	1


[ :object | 
fromElement := aGroup elementFromModel: (fromBlock rtValue: object).
toElement := aGroup elementFromModel: (toBlock rtValue: object).
(fromElement notNil and: [ toElement notNil ])
	ifTrue: [ 
		| edge |
		edge := RTEdge from: fromElement to: toElement.
		edge model: object.
		edge + aLineShape.
		edges add: edge ] ] in RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
	Receiver: RTEdge
	Arguments and temporary variables: 
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :val | self halt ]
		toBlock: 	#pub
		aLineShape: 	a RTArrowedLine
		aGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		edges: 	a RTGroup()
		toElement: 	nil
		fromElement: 	nil
		object: 	a Node
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Node a Node a Node a Node)
	Arguments and temporary variables: 
		aBlock: 	[ :object | 
fromElement := aGroup elementFromModel: (fromBlock rtValue...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Node a Node a Node a Node nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	4


RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
	Receiver: RTEdge
	Arguments and temporary variables: 
		toElement: 	nil
		fromElement: 	nil
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :val | self halt ]
		toBlock: 	#pub
		aLineShape: 	a RTArrowedLine
		aGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		edges: 	a RTGroup()
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTEdge class>>buildEdgesFromObjects:from:to:using:inView:scope:
	Receiver: RTEdge
	Arguments and temporary variables: 
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :val | self halt ]
		toBlock: 	#pub
		aLineShape: 	a RTArrowedLine
		view: 	a RTView
		aGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		es: 	nil
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTEdge class>>buildEdgesFromObjects:from:to:using:inView:
	Receiver: RTEdge
	Arguments and temporary variables: 
		objects: 	an OrderedCollection(a Node a Node a Node a Node)
		fromBlock: 	[ :val | self halt ]
		toBlock: 	#pub
		aLineShape: 	a RTArrowedLine
		view: 	a RTView
	Receiver's instance variables: 
		superclass: 	RTShapedObject
		methodDict: 	a MethodDictionary(#accept:->RTEdge>>#accept: #addedIn:->RTEdge>>#a...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#(#from #to #shouldBeUsedInLayout)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTEdge
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
		arrow: 	a RTArrowedLine
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(260308992))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(761266176))(a Spec...etc...
		lastStepTime: 	2299460
		lastStepMessage: 	nil
		lastCycleTime: 	2299482
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2299460
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(761266176))(a Spec...etc...
		lastStepTime: 	2299460
		lastStepMessage: 	nil
		lastCycleTime: 	2299482
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2299460
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(761266176))(a Spec...etc...
		lastStepTime: 	2299460
		lastStepMessage: 	nil
		lastCycleTime: 	2299482
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2299460
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :val | self halt ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :object | 
fromElement := aGroup elementFromModel: (fromBlock rtValue: object).
toElement := aGroup elementFromModel: (toBlock rtValue: object).
(fromElement notNil and: [ toElement notNil ])
	ifTrue: [ 
		| edge |
		edge := RTEdge from: fromElement to: toElement.
		edge model: object.
		edge + aLineShape.
		edges add: edge ] ] in RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
OrderedCollection>>do:
RTEdge class>>buildEdgesFromObjects:from:to:using:scope:
RTEdge class>>buildEdgesFromObjects:from:to:using:inView:scope:
RTEdge class>>buildEdgesFromObjects:from:to:using:inView:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteSymbol>>to
9 November 2015 5:10:18.736428 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteSymbol(Object)>>doesNotUnderstand: #to
	Receiver: #yourself
	Arguments and temporary variables: 
		aMessage: 	to
		exception: 	MessageNotUnderstood: ByteSymbol>>to
		resumeValue: 	nil
	Receiver's instance variables: 
#yourself

Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
		arrow: 	a RTArrowedLine
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(52690944))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(761266176))(a Spec...etc...
		lastStepTime: 	2638428
		lastStepMessage: 	nil
		lastCycleTime: 	2638448
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2638428
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(761266176))(a Spec...etc...
		lastStepTime: 	2638428
		lastStepMessage: 	nil
		lastCycleTime: 	2638448
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2638428
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(761266176))(a Spec...etc...
		lastStepTime: 	2638428
		lastStepMessage: 	nil
		lastCycleTime: 	2638448
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2638428
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ByteSymbol(Object)>>doesNotUnderstand: #to
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTNoShape>>arrow
9 November 2015 5:16:15.10442 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTNoShape(Object)>>doesNotUnderstand: #arrow
	Receiver: a RTNoShape
	Arguments and temporary variables: 
		aMessage: 	arrow
		exception: 	MessageNotUnderstood: RTNoShape>>arrow
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray


RTShapeBuilder>>doesNotUnderstand: #arrow
	Receiver: a RTShapeBuilder
	Arguments and temporary variables: 
		aMessage: 	arrow
	Receiver's instance variables: 
		shape: 	a RTNoShape
		createdElements: 	an OrderedCollection()
		shapeInitializer: 	#yourself


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(19136512))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	2994884
		lastStepMessage: 	nil
		lastCycleTime: 	2994884
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2994884
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	2994884
		lastStepMessage: 	nil
		lastCycleTime: 	2994884
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2994884
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	2994884
		lastStepMessage: 	nil
		lastCycleTime: 	2994884
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2994884
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTNoShape(Object)>>doesNotUnderstand: #arrow
RTShapeBuilder>>doesNotUnderstand: #arrow
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTArrowedLine>>color:width:
9 November 2015 5:22:07.150422 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTArrowedLine(Object)>>doesNotUnderstand: #color:width:
	Receiver: a RTArrowedLine
	Arguments and temporary variables: 
		aMessage: 	color: Color black width: 2
		exception: 	MessageNotUnderstood: RTArrowedLine>>color:width:
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		width: 	1
		attachPoint: 	a RTCenteredAttachPoint
		line: 	a RTLine
		head: 	a RTSimpleArrowHead


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(488374272))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(536084480))(a DropList...etc...
		lastStepTime: 	3346918
		lastStepMessage: 	nil
		lastCycleTime: 	3346916
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3346918
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(536084480))(a DropList...etc...
		lastStepTime: 	3346918
		lastStepMessage: 	nil
		lastCycleTime: 	3346916
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3346918
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(536084480))(a DropList...etc...
		lastStepTime: 	3346918
		lastStepMessage: 	nil
		lastCycleTime: 	3346916
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3346918
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTArrowedLine(Object)>>doesNotUnderstand: #color:width:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTArrowedLine>>width:color:
9 November 2015 5:22:33.110426 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTArrowedLine(Object)>>doesNotUnderstand: #width:color:
	Receiver: a RTArrowedLine
	Arguments and temporary variables: 
		aMessage: 	width: 2 color: Color black
		exception: 	MessageNotUnderstood: RTArrowedLine>>width:color:
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		width: 	1
		attachPoint: 	a RTCenteredAttachPoint
		line: 	a RTLine
		head: 	a RTSimpleArrowHead


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(934019072))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	3372900
		lastStepMessage: 	nil
		lastCycleTime: 	3372894
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3372900
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	3372900
		lastStepMessage: 	nil
		lastCycleTime: 	3372894
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3372900
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	3372900
		lastStepMessage: 	nil
		lastCycleTime: 	3372894
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3372900
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTArrowedLine(Object)>>doesNotUnderstand: #width:color:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTArrowedLine>>width:color:
9 November 2015 5:22:51.568421 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTArrowedLine(Object)>>doesNotUnderstand: #width:color:
	Receiver: a RTArrowedLine
	Arguments and temporary variables: 
		aMessage: 	width: 2 color: Color black
		exception: 	MessageNotUnderstood: RTArrowedLine>>width:color:
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		width: 	1
		attachPoint: 	a RTCenteredAttachPoint
		line: 	a RTLine
		head: 	a RTSimpleArrowHead


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(390070272))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(371720192))(a SearchMorp...etc...
		lastStepTime: 	3391342
		lastStepMessage: 	nil
		lastCycleTime: 	3391340
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3391342
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(371720192))(a SearchMorp...etc...
		lastStepTime: 	3391342
		lastStepMessage: 	nil
		lastCycleTime: 	3391340
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3391342
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(371720192))(a SearchMorp...etc...
		lastStepTime: 	3391342
		lastStepMessage: 	nil
		lastCycleTime: 	3391340
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3391342
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTArrowedLine(Object)>>doesNotUnderstand: #width:color:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTArrowedLine>>shortestDistanceAttachPoint
9 November 2015 5:24:46.40642 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTArrowedLine(Object)>>doesNotUnderstand: #shortestDistanceAttachPoint
	Receiver: a RTArrowedLine
	Arguments and temporary variables: 
		aMessage: 	shortestDistanceAttachPoint
		exception: 	MessageNotUnderstood: RTArrowedLine>>shortestDistanceAttachPoint
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		width: 	1
		attachPoint: 	a RTCenteredAttachPoint
		line: 	a RTLine
		head: 	a RTSimpleArrowHead


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(637796352))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	3506174
		lastStepMessage: 	nil
		lastCycleTime: 	3506172
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3506174
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	3506174
		lastStepMessage: 	nil
		lastCycleTime: 	3506172
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3506174
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	3506174
		lastStepMessage: 	nil
		lastCycleTime: 	3506172
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3506174
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTArrowedLine(Object)>>doesNotUnderstand: #shortestDistanceAttachPoint
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTArrowedLine>>shortestDistanceAttachPoint
9 November 2015 5:30:56.37842 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTArrowedLine(Object)>>doesNotUnderstand: #shortestDistanceAttachPoint
	Receiver: a RTArrowedLine
	Arguments and temporary variables: 
		aMessage: 	shortestDistanceAttachPoint
		exception: 	MessageNotUnderstood: RTArrowedLine>>shortestDistanceAttachPoint
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		width: 	1
		attachPoint: 	a RTCenteredAttachPoint
		line: 	a RTLine
		head: 	a RTSimpleArrowHead


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(356515840))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(803471360))(a Spec...etc...
		lastStepTime: 	3876128
		lastStepMessage: 	nil
		lastCycleTime: 	3876124
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3876128
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(803471360))(a Spec...etc...
		lastStepTime: 	3876128
		lastStepMessage: 	nil
		lastCycleTime: 	3876124
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3876128
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(803471360))(a Spec...etc...
		lastStepTime: 	3876128
		lastStepMessage: 	nil
		lastCycleTime: 	3876124
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3876128
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTArrowedLine(Object)>>doesNotUnderstand: #shortestDistanceAttachPoint
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Color>>light
9 November 2015 5:32:05.830421 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Color(Object)>>doesNotUnderstand: #light
	Receiver: Color blue
	Arguments and temporary variables: 
		aMessage: 	light
		exception: 	MessageNotUnderstood: Color>>light
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1023
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


[ :node | 
node pub size > 0
	ifTrue: [ 
		node sub size > 0
			ifTrue: [ Color red ]
			ifFalse: [ Color blue light ] ]
	ifFalse: [ 
		node sub size > 0
			ifTrue: [ Color yellow ]
			ifFalse: [ Color green ] ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
		node: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :node | 
node pub size > 0
	ifTrue: [ 
		node sub size > 0
			ifTrue: [ Color red ]
			i...etc...
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	162
		numArgs: 	1


[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTEllipse(RTShape)>>color:
	Receiver: a RTEllipse
	Arguments and temporary variables: 
		aValueOrAOneArgBlock: 	[ :node | 
node pub size > 0
	ifTrue: [ 
		node sub size ...etc...
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		width: 	[ :anElement | aValueOrASymbolOrAOneArgBlock rtValue: anElement model ]
		borderColor: 	nil
		borderWidth: 	1


BlockClosure>>rtValue:
	Receiver: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
	Arguments and temporary variables: 
		valueOrArray: 	a RTElement
	Receiver's instance variables: 
		outerContext: 	RTEllipse(RTShape)>>color:
		startpc: 	31
		numArgs: 	1


RTEllipse(RTShape)>>colorFor:
	Receiver: a RTEllipse
	Arguments and temporary variables: 
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		width: 	[ :anElement | aValueOrASymbolOrAOneArgBlock rtValue: anElement model ]
		borderColor: 	nil
		borderWidth: 	1


RTEllipse>>updateFor:trachelShape:
	Receiver: a RTEllipse
	Arguments and temporary variables: 
		anElement: 	a RTElement
		trachelShape: 	a TREllipseShape
		ex: 	(50@50)
		rec: 	(-25@ -25) corner: (25@25)
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		width: 	[ :anElement | aValueOrASymbolOrAOneArgBlock rtValue: anElement model ]
		borderColor: 	nil
		borderWidth: 	1


RTEllipse(RTShape)>>trachelShapeFor:
	Receiver: a RTEllipse
	Arguments and temporary variables: 
		anElement: 	a RTElement
		trachelShape: 	a TREllipseShape
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		width: 	[ :anElement | aValueOrASymbolOrAOneArgBlock rtValue: anElement model ]
		borderColor: 	nil
		borderWidth: 	1


[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
		tupple: 	an Array(a RTEllipse (0@0))
		shapeIndex: 	1
		s: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>withIndexCollect:
	Receiver: an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)))
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)) nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(SequenceableCollection)>>collectWithIndex:
	Receiver: an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)))
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)) nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	2


RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


RTElement(RTShapedObject)>>addShape:
	Receiver: a RTElement
	Arguments and temporary variables: 
		aRTShape: 	a RTCompositeShape
	Receiver's instance variables: 
		announcer: 	nil
		attributes: 	nil
		isFixed: 	false
		model: 	a Node
		shape: 	a RTCompositeShape
		trachelShape: 	a TRNoShape
		view: 	nil
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


RTCompositeShape(RTShape)>>elementOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		aModel: 	a Node
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


[ :m | group add: (self elementOn: m) ] in RTCompositeShape(RTShape)>>elementsOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		models: 	an OrderedCollection(a Node a Node a Node a Node)
		group: 	a RTGroup()
		m: 	a Node
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Node a Node a Node a Node)
	Arguments and temporary variables: 
		aBlock: 	[ :m | group add: (self elementOn: m) ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Node a Node a Node a Node nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	4


RTCompositeShape(RTShape)>>elementsOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		models: 	an OrderedCollection(a Node a Node a Node a Node)
		group: 	a RTGroup()
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(230948864))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	3945614
		lastStepMessage: 	nil
		lastCycleTime: 	3945612
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3945614
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	3945614
		lastStepMessage: 	nil
		lastCycleTime: 	3945612
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3945614
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	3945614
		lastStepMessage: 	nil
		lastCycleTime: 	3945612
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3945614
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #light
[ :node | 
node pub size > 0
	ifTrue: [ 
		node sub size > 0
			ifTrue: [ Color red ]
			ifFalse: [ Color blue light ] ]
	ifFalse: [ 
		node sub size > 0
			ifTrue: [ Color yellow ]
			ifFalse: [ Color green ] ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTEllipse(RTShape)>>color:
BlockClosure>>rtValue:
RTEllipse(RTShape)>>colorFor:
RTEllipse>>updateFor:trachelShape:
RTEllipse(RTShape)>>trachelShapeFor:
[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
OrderedCollection>>withIndexCollect:
OrderedCollection(SequenceableCollection)>>collectWithIndex:
RTCompositeShape>>trachelShapeFor:
RTElement(RTShapedObject)>>addShape:
RTCompositeShape(RTShape)>>elementOn:
[ :m | group add: (self elementOn: m) ] in RTCompositeShape(RTShape)>>elementsOn:
OrderedCollection>>do:
RTCompositeShape(RTShape)>>elementsOn:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Color>>trans
9 November 2015 5:33:01.900423 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Color(Object)>>doesNotUnderstand: #trans
	Receiver: Color blue
	Arguments and temporary variables: 
		aMessage: 	trans
		exception: 	MessageNotUnderstood: Color>>trans
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1023
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


[ :node | 
node pub size > 0
	ifTrue: [ 
		node sub size > 0
			ifTrue: [ Color red ]
			ifFalse: [ Color blue trans ] ]
	ifFalse: [ 
		node sub size > 0
			ifTrue: [ Color yellow ]
			ifFalse: [ Color green ] ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
		node: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :node | 
node pub size > 0
	ifTrue: [ 
		node sub size > 0
			ifTrue: [ Color red ]
			i...etc...
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	162
		numArgs: 	1


[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTEllipse(RTShape)>>color:
	Receiver: a RTEllipse
	Arguments and temporary variables: 
		aValueOrAOneArgBlock: 	[ :node | 
node pub size > 0
	ifTrue: [ 
		node sub size ...etc...
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		width: 	[ :anElement | aValueOrASymbolOrAOneArgBlock rtValue: anElement model ]
		borderColor: 	nil
		borderWidth: 	1


BlockClosure>>rtValue:
	Receiver: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
	Arguments and temporary variables: 
		valueOrArray: 	a RTElement
	Receiver's instance variables: 
		outerContext: 	RTEllipse(RTShape)>>color:
		startpc: 	31
		numArgs: 	1


RTEllipse(RTShape)>>colorFor:
	Receiver: a RTEllipse
	Arguments and temporary variables: 
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		width: 	[ :anElement | aValueOrASymbolOrAOneArgBlock rtValue: anElement model ]
		borderColor: 	nil
		borderWidth: 	1


RTEllipse>>updateFor:trachelShape:
	Receiver: a RTEllipse
	Arguments and temporary variables: 
		anElement: 	a RTElement
		trachelShape: 	a TREllipseShape
		ex: 	(50@50)
		rec: 	(-25@ -25) corner: (25@25)
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		width: 	[ :anElement | aValueOrASymbolOrAOneArgBlock rtValue: anElement model ]
		borderColor: 	nil
		borderWidth: 	1


RTEllipse(RTShape)>>trachelShapeFor:
	Receiver: a RTEllipse
	Arguments and temporary variables: 
		anElement: 	a RTElement
		trachelShape: 	a TREllipseShape
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		width: 	[ :anElement | aValueOrASymbolOrAOneArgBlock rtValue: anElement model ]
		borderColor: 	nil
		borderWidth: 	1


[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
		tupple: 	an Array(a RTEllipse (0@0))
		shapeIndex: 	1
		s: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>withIndexCollect:
	Receiver: an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)))
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)) nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(SequenceableCollection)>>collectWithIndex:
	Receiver: an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)))
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)) nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	2


RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


RTElement(RTShapedObject)>>addShape:
	Receiver: a RTElement
	Arguments and temporary variables: 
		aRTShape: 	a RTCompositeShape
	Receiver's instance variables: 
		announcer: 	nil
		attributes: 	nil
		isFixed: 	false
		model: 	a Node
		shape: 	a RTCompositeShape
		trachelShape: 	a TRNoShape
		view: 	nil
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


RTCompositeShape(RTShape)>>elementOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		aModel: 	a Node
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


[ :m | group add: (self elementOn: m) ] in RTCompositeShape(RTShape)>>elementsOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		models: 	an OrderedCollection(a Node a Node a Node a Node)
		group: 	a RTGroup()
		m: 	a Node
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Node a Node a Node a Node)
	Arguments and temporary variables: 
		aBlock: 	[ :m | group add: (self elementOn: m) ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Node a Node a Node a Node nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	4


RTCompositeShape(RTShape)>>elementsOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		models: 	an OrderedCollection(a Node a Node a Node a Node)
		group: 	a RTGroup()
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(506462208))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(738721792))(a DropList...etc...
		lastStepTime: 	4001560
		lastStepMessage: 	nil
		lastCycleTime: 	4001612
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4001560
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(738721792))(a DropList...etc...
		lastStepTime: 	4001560
		lastStepMessage: 	nil
		lastCycleTime: 	4001612
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4001560
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(738721792))(a DropList...etc...
		lastStepTime: 	4001560
		lastStepMessage: 	nil
		lastCycleTime: 	4001612
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4001560
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #trans
[ :node | 
node pub size > 0
	ifTrue: [ 
		node sub size > 0
			ifTrue: [ Color red ]
			ifFalse: [ Color blue trans ] ]
	ifFalse: [ 
		node sub size > 0
			ifTrue: [ Color yellow ]
			ifFalse: [ Color green ] ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTEllipse(RTShape)>>color:
BlockClosure>>rtValue:
RTEllipse(RTShape)>>colorFor:
RTEllipse>>updateFor:trachelShape:
RTEllipse(RTShape)>>trachelShapeFor:
[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
OrderedCollection>>withIndexCollect:
OrderedCollection(SequenceableCollection)>>collectWithIndex:
RTCompositeShape>>trachelShapeFor:
RTElement(RTShapedObject)>>addShape:
RTCompositeShape(RTShape)>>elementOn:
[ :m | group add: (self elementOn: m) ] in RTCompositeShape(RTShape)>>elementsOn:
OrderedCollection>>do:
RTCompositeShape(RTShape)>>elementsOn:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Color>>transparent
9 November 2015 5:33:15.232423 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Color(Object)>>doesNotUnderstand: #transparent
	Receiver: Color blue
	Arguments and temporary variables: 
		aMessage: 	transparent
		exception: 	MessageNotUnderstood: Color>>transparent
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1023
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


[ :node | 
node pub size > 0
	ifTrue: [ 
		node sub size > 0
			ifTrue: [ Color red ]
			ifFalse: [ Color blue transparent ] ]
	ifFalse: [ 
		node sub size > 0
			ifTrue: [ Color yellow ]
			ifFalse: [ Color green ] ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
		node: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :node | 
node pub size > 0
	ifTrue: [ 
		node sub size > 0
			ifTrue: [ Color red ]
			i...etc...
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	162
		numArgs: 	1


[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTEllipse(RTShape)>>color:
	Receiver: a RTEllipse
	Arguments and temporary variables: 
		aValueOrAOneArgBlock: 	[ :node | 
node pub size > 0
	ifTrue: [ 
		node sub size ...etc...
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		width: 	[ :anElement | aValueOrASymbolOrAOneArgBlock rtValue: anElement model ]
		borderColor: 	nil
		borderWidth: 	1


BlockClosure>>rtValue:
	Receiver: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
	Arguments and temporary variables: 
		valueOrArray: 	a RTElement
	Receiver's instance variables: 
		outerContext: 	RTEllipse(RTShape)>>color:
		startpc: 	31
		numArgs: 	1


RTEllipse(RTShape)>>colorFor:
	Receiver: a RTEllipse
	Arguments and temporary variables: 
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		width: 	[ :anElement | aValueOrASymbolOrAOneArgBlock rtValue: anElement model ]
		borderColor: 	nil
		borderWidth: 	1


RTEllipse>>updateFor:trachelShape:
	Receiver: a RTEllipse
	Arguments and temporary variables: 
		anElement: 	a RTElement
		trachelShape: 	a TREllipseShape
		ex: 	(50@50)
		rec: 	(-25@ -25) corner: (25@25)
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		width: 	[ :anElement | aValueOrASymbolOrAOneArgBlock rtValue: anElement model ]
		borderColor: 	nil
		borderWidth: 	1


RTEllipse(RTShape)>>trachelShapeFor:
	Receiver: a RTEllipse
	Arguments and temporary variables: 
		anElement: 	a RTElement
		trachelShape: 	a TREllipseShape
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		width: 	[ :anElement | aValueOrASymbolOrAOneArgBlock rtValue: anElement model ]
		borderColor: 	nil
		borderWidth: 	1


[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
		tupple: 	an Array(a RTEllipse (0@0))
		shapeIndex: 	1
		s: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>withIndexCollect:
	Receiver: an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)))
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)) nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(SequenceableCollection)>>collectWithIndex:
	Receiver: an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)))
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@0)) nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	2


RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


RTElement(RTShapedObject)>>addShape:
	Receiver: a RTElement
	Arguments and temporary variables: 
		aRTShape: 	a RTCompositeShape
	Receiver's instance variables: 
		announcer: 	nil
		attributes: 	nil
		isFixed: 	false
		model: 	a Node
		shape: 	a RTCompositeShape
		trachelShape: 	a TRNoShape
		view: 	nil
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


RTCompositeShape(RTShape)>>elementOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		aModel: 	a Node
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


[ :m | group add: (self elementOn: m) ] in RTCompositeShape(RTShape)>>elementsOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		models: 	an OrderedCollection(a Node a Node a Node a Node)
		group: 	a RTGroup()
		m: 	a Node
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Node a Node a Node a Node)
	Arguments and temporary variables: 
		aBlock: 	[ :m | group add: (self elementOn: m) ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Node a Node a Node a Node nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	4


RTCompositeShape(RTShape)>>elementsOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		models: 	an OrderedCollection(a Node a Node a Node a Node)
		group: 	a RTGroup()
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		shapes: 	an OrderedCollection(an Array(a RTEllipse (0@0)) an Array(a RTLabel (0@...etc...
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(194510848))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(997982208))(a DropList...etc...
		lastStepTime: 	4014892
		lastStepMessage: 	nil
		lastCycleTime: 	4014944
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4014892
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(997982208))(a DropList...etc...
		lastStepTime: 	4014892
		lastStepMessage: 	nil
		lastCycleTime: 	4014944
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4014892
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(997982208))(a DropList...etc...
		lastStepTime: 	4014892
		lastStepMessage: 	nil
		lastCycleTime: 	4014944
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4014892
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #transparent
[ :node | 
node pub size > 0
	ifTrue: [ 
		node sub size > 0
			ifTrue: [ Color red ]
			ifFalse: [ Color blue transparent ] ]
	ifFalse: [ 
		node sub size > 0
			ifTrue: [ Color yellow ]
			ifFalse: [ Color green ] ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTEllipse(RTShape)>>color:
BlockClosure>>rtValue:
RTEllipse(RTShape)>>colorFor:
RTEllipse>>updateFor:trachelShape:
RTEllipse(RTShape)>>trachelShapeFor:
[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
OrderedCollection>>withIndexCollect:
OrderedCollection(SequenceableCollection)>>collectWithIndex:
RTCompositeShape>>trachelShapeFor:
RTElement(RTShapedObject)>>addShape:
RTCompositeShape(RTShape)>>elementOn:
[ :m | group add: (self elementOn: m) ] in RTCompositeShape(RTShape)>>elementsOn:
OrderedCollection>>do:
RTCompositeShape(RTShape)>>elementsOn:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of RTPopup class are not indexable
9 November 2015 5:38:38.226426 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTPopup class(Object)>>error:
	Receiver: RTPopup
	Arguments and temporary variables: 
		aString: 	'Instances of RTPopup class are not indexable'
	Receiver's instance variables: 
		superclass: 	RTAbstractPopup
		methodDict: 	a MethodDictionary(#accept:with:->RTPopup>>#accept:with: #backgroun...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#groupBlock #text #textColor)
		organization: 	a ClassOrganization
		subclasses: 	{RTFixedPopup}
		name: 	#RTPopup
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		lastPopup: 	nil


RTPopup class(Object)>>errorNotIndexable
	Receiver: RTPopup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	RTAbstractPopup
		methodDict: 	a MethodDictionary(#accept:with:->RTPopup>>#accept:with: #backgroun...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#groupBlock #text #textColor)
		organization: 	a ClassOrganization
		subclasses: 	{RTFixedPopup}
		name: 	#RTPopup
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		lastPopup: 	nil


RTPopup class(Object)>>size
	Receiver: RTPopup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	RTAbstractPopup
		methodDict: 	a MethodDictionary(#accept:with:->RTPopup>>#accept:with: #backgroun...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#groupBlock #text #textColor)
		organization: 	a ClassOrganization
		subclasses: 	{RTFixedPopup}
		name: 	#RTPopup
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		lastPopup: 	nil


OrderedCollection>>with:collect:
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		otherCollection: 	RTPopup
		twoArgBlock: 	[ :a :b | a @ b ]
		result: 	nil
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(SequenceableCollection)>>@
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		aCollection: 	RTPopup
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(430178304))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(705167360))(a SearchMorp...etc...
		lastStepTime: 	4338038
		lastStepMessage: 	nil
		lastCycleTime: 	4338038
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4338038
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(705167360))(a SearchMorp...etc...
		lastStepTime: 	4338038
		lastStepMessage: 	nil
		lastCycleTime: 	4338038
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4338038
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(705167360))(a SearchMorp...etc...
		lastStepTime: 	4338038
		lastStepMessage: 	nil
		lastCycleTime: 	4338038
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4338038
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTPopup class(Object)>>error:
RTPopup class(Object)>>errorNotIndexable
RTPopup class(Object)>>size
OrderedCollection>>with:collect:
OrderedCollection(SequenceableCollection)>>@
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of RTPopup are not indexable
9 November 2015 5:38:51.640427 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTPopup(Object)>>error:
	Receiver: a RTPopup
	Arguments and temporary variables: 
		aString: 	'Instances of RTPopup are not indexable'
	Receiver's instance variables: 
		groupBlock: 	[ :group :element | 
| backRectangle lbl |
backRectangle := (RTBox ...etc...
		text: 	nil
		textColor: 	Color black


RTPopup(Object)>>errorNotIndexable
	Receiver: a RTPopup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		groupBlock: 	[ :group :element | 
| backRectangle lbl |
backRectangle := (RTBox ...etc...
		text: 	nil
		textColor: 	Color black


RTPopup(Object)>>size
	Receiver: a RTPopup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		groupBlock: 	[ :group :element | 
| backRectangle lbl |
backRectangle := (RTBox ...etc...
		text: 	nil
		textColor: 	Color black


OrderedCollection>>with:collect:
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		otherCollection: 	a RTPopup
		twoArgBlock: 	[ :a :b | a @ b ]
		result: 	nil
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(SequenceableCollection)>>@
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		aCollection: 	a RTPopup
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(341049344))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 1029439488))(...etc...
		lastStepTime: 	4351416
		lastStepMessage: 	nil
		lastCycleTime: 	4351414
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4351416
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 1029439488))(...etc...
		lastStepTime: 	4351416
		lastStepMessage: 	nil
		lastCycleTime: 	4351414
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4351416
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 1029439488))(...etc...
		lastStepTime: 	4351416
		lastStepMessage: 	nil
		lastCycleTime: 	4351414
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4351416
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTPopup(Object)>>error:
RTPopup(Object)>>errorNotIndexable
RTPopup(Object)>>size
OrderedCollection>>with:collect:
OrderedCollection(SequenceableCollection)>>@
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of RTPopup are not indexable
9 November 2015 5:39:05.390425 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTPopup(Object)>>error:
	Receiver: a RTPopup
	Arguments and temporary variables: 
		aString: 	'Instances of RTPopup are not indexable'
	Receiver's instance variables: 
		groupBlock: 	[ :group :element | 
| backRectangle lbl |
backRectangle := (RTBox ...etc...
		text: 	nil
		textColor: 	Color black


RTPopup(Object)>>errorNotIndexable
	Receiver: a RTPopup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		groupBlock: 	[ :group :element | 
| backRectangle lbl |
backRectangle := (RTBox ...etc...
		text: 	nil
		textColor: 	Color black


RTPopup(Object)>>size
	Receiver: a RTPopup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		groupBlock: 	[ :group :element | 
| backRectangle lbl |
backRectangle := (RTBox ...etc...
		text: 	nil
		textColor: 	Color black


OrderedCollection>>with:collect:
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		otherCollection: 	a RTPopup
		twoArgBlock: 	[ :a :b | a @ b ]
		result: 	nil
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(SequenceableCollection)>>@
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		aCollection: 	a RTPopup
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(195035136))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316407808))(a SearchMorp...etc...
		lastStepTime: 	4365176
		lastStepMessage: 	nil
		lastCycleTime: 	4365172
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4365176
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316407808))(a SearchMorp...etc...
		lastStepTime: 	4365176
		lastStepMessage: 	nil
		lastCycleTime: 	4365172
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4365176
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316407808))(a SearchMorp...etc...
		lastStepTime: 	4365176
		lastStepMessage: 	nil
		lastCycleTime: 	4365172
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4365176
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTPopup(Object)>>error:
RTPopup(Object)>>errorNotIndexable
RTPopup(Object)>>size
OrderedCollection>>with:collect:
OrderedCollection(SequenceableCollection)>>@
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of RTDraggable class are not indexable
9 November 2015 5:39:54.496426 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTDraggable class(Object)>>error:
	Receiver: RTDraggable
	Arguments and temporary variables: 
		aString: 	'Instances of RTDraggable class are not indexable'
	Receiver's instance variables: 
		superclass: 	RTAbstractDraggable
		methodDict: 	a MethodDictionary(#accept:with:->RTDraggable>>#accept:with: #trans...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTDraggable
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTDraggable class(Object)>>errorNotIndexable
	Receiver: RTDraggable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	RTAbstractDraggable
		methodDict: 	a MethodDictionary(#accept:with:->RTDraggable>>#accept:with: #trans...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTDraggable
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTDraggable class(Object)>>size
	Receiver: RTDraggable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	RTAbstractDraggable
		methodDict: 	a MethodDictionary(#accept:with:->RTDraggable>>#accept:with: #trans...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTDraggable
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>with:collect:
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		otherCollection: 	RTDraggable
		twoArgBlock: 	[ :a :b | a @ b ]
		result: 	nil
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(SequenceableCollection)>>@
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		aCollection: 	RTDraggable
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(850919424))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 457179136))(...etc...
		lastStepTime: 	4414264
		lastStepMessage: 	nil
		lastCycleTime: 	4414262
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4414264
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 457179136))(...etc...
		lastStepTime: 	4414264
		lastStepMessage: 	nil
		lastCycleTime: 	4414262
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4414264
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 457179136))(...etc...
		lastStepTime: 	4414264
		lastStepMessage: 	nil
		lastCycleTime: 	4414262
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4414264
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTDraggable class(Object)>>error:
RTDraggable class(Object)>>errorNotIndexable
RTDraggable class(Object)>>size
OrderedCollection>>with:collect:
OrderedCollection(SequenceableCollection)>>@
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of RTDraggable class are not indexable
9 November 2015 5:40:46.988427 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTDraggable class(Object)>>error:
	Receiver: RTDraggable
	Arguments and temporary variables: 
		aString: 	'Instances of RTDraggable class are not indexable'
	Receiver's instance variables: 
		superclass: 	RTAbstractDraggable
		methodDict: 	a MethodDictionary(#accept:with:->RTDraggable>>#accept:with: #trans...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTDraggable
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTDraggable class(Object)>>errorNotIndexable
	Receiver: RTDraggable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	RTAbstractDraggable
		methodDict: 	a MethodDictionary(#accept:with:->RTDraggable>>#accept:with: #trans...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTDraggable
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTDraggable class(Object)>>size
	Receiver: RTDraggable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	RTAbstractDraggable
		methodDict: 	a MethodDictionary(#accept:with:->RTDraggable>>#accept:with: #trans...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTDraggable
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>with:collect:
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		otherCollection: 	RTDraggable
		twoArgBlock: 	[ :a :b | a @ b ]
		result: 	nil
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(SequenceableCollection)>>@
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		aCollection: 	RTDraggable
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(728760320))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	4466782
		lastStepMessage: 	nil
		lastCycleTime: 	4466782
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4466782
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	4466782
		lastStepMessage: 	nil
		lastCycleTime: 	4466782
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4466782
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	4466782
		lastStepMessage: 	nil
		lastCycleTime: 	4466782
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4466782
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTDraggable class(Object)>>error:
RTDraggable class(Object)>>errorNotIndexable
RTDraggable class(Object)>>size
OrderedCollection>>with:collect:
OrderedCollection(SequenceableCollection)>>@
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of RTDraggable class are not indexable
9 November 2015 5:41:07.888427 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTDraggable class(Object)>>error:
	Receiver: RTDraggable
	Arguments and temporary variables: 
		aString: 	'Instances of RTDraggable class are not indexable'
	Receiver's instance variables: 
		superclass: 	RTAbstractDraggable
		methodDict: 	a MethodDictionary(#accept:with:->RTDraggable>>#accept:with: #trans...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTDraggable
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTDraggable class(Object)>>errorNotIndexable
	Receiver: RTDraggable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	RTAbstractDraggable
		methodDict: 	a MethodDictionary(#accept:with:->RTDraggable>>#accept:with: #trans...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTDraggable
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


RTDraggable class(Object)>>size
	Receiver: RTDraggable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	RTAbstractDraggable
		methodDict: 	a MethodDictionary(#accept:with:->RTDraggable>>#accept:with: #trans...etc...
		format: 	132
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTDraggable
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>with:collect:
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		otherCollection: 	RTDraggable
		twoArgBlock: 	[ :a :b | a @ b ]
		result: 	nil
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(SequenceableCollection)>>@
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		aCollection: 	RTDraggable
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(195035136))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(803471360))(a Spec...etc...
		lastStepTime: 	4487682
		lastStepMessage: 	nil
		lastCycleTime: 	4487678
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4487682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(803471360))(a Spec...etc...
		lastStepTime: 	4487682
		lastStepMessage: 	nil
		lastCycleTime: 	4487678
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4487682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(803471360))(a Spec...etc...
		lastStepTime: 	4487682
		lastStepMessage: 	nil
		lastCycleTime: 	4487678
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4487682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTDraggable class(Object)>>error:
RTDraggable class(Object)>>errorNotIndexable
RTDraggable class(Object)>>size
OrderedCollection>>with:collect:
OrderedCollection(SequenceableCollection)>>@
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTElement>>nodeName
9 November 2015 5:46:29.562422 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTElement(Object)>>doesNotUnderstand: #nodeName
	Receiver: a RTElement
	Arguments and temporary variables: 
		aMessage: 	nodeName
		exception: 	MessageNotUnderstood: RTElement>>nodeName
		resumeValue: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		isFixed: 	false
		model: 	a Node
		shape: 	a RTCompositeShape
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		connectedEdges: 	a RTGroup(a RTEdge)
		shouldUpdateEdges: 	true


[ :element | element @ RTDraggable @ (RTPopup text: element nodeName) ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		element: 	a RTElement
	Receiver's instance variables: 
a Graph

RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :element | element @ RTDraggable @ (RTPopup text: element nodeName) ]...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement)
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(649592832))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(238551040))(a SearchMorp...etc...
		lastStepTime: 	4809300
		lastStepMessage: 	nil
		lastCycleTime: 	4809298
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4809300
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(238551040))(a SearchMorp...etc...
		lastStepTime: 	4809300
		lastStepMessage: 	nil
		lastCycleTime: 	4809298
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4809300
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(238551040))(a SearchMorp...etc...
		lastStepTime: 	4809300
		lastStepMessage: 	nil
		lastCycleTime: 	4809298
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4809300
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTElement(Object)>>doesNotUnderstand: #nodeName
[ :element | element @ RTDraggable @ (RTPopup text: element nodeName) ] in Graph>>createGraph:
RTGroup(OrderedCollection)>>do:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTElement>>nameNode
9 November 2015 5:48:07.578423 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTElement(Object)>>doesNotUnderstand: #nameNode
	Receiver: a RTElement
	Arguments and temporary variables: 
		aMessage: 	nameNode
		exception: 	MessageNotUnderstood: RTElement>>nameNode
		resumeValue: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		isFixed: 	false
		model: 	a Node
		shape: 	a RTCompositeShape
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		connectedEdges: 	a RTGroup(a RTEdge)
		shouldUpdateEdges: 	true


[ :element | element @ RTDraggable @ (RTPopup text: element nameNode) ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		element: 	a RTElement
	Receiver's instance variables: 
a Graph

RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :element | element @ RTDraggable @ (RTPopup text: element nameNode) ]...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement)
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(731643904))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(371720192))(a SearchMorp...etc...
		lastStepTime: 	4907346
		lastStepMessage: 	nil
		lastCycleTime: 	4907342
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4907346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(371720192))(a SearchMorp...etc...
		lastStepTime: 	4907346
		lastStepMessage: 	nil
		lastCycleTime: 	4907342
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4907346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(371720192))(a SearchMorp...etc...
		lastStepTime: 	4907346
		lastStepMessage: 	nil
		lastCycleTime: 	4907342
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4907346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTElement(Object)>>doesNotUnderstand: #nameNode
[ :element | element @ RTDraggable @ (RTPopup text: element nameNode) ] in Graph>>createGraph:
RTGroup(OrderedCollection)>>do:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTElement>>nameNode
9 November 2015 5:51:07.426421 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTElement(Object)>>doesNotUnderstand: #nameNode
	Receiver: a RTElement
	Arguments and temporary variables: 
		aMessage: 	nameNode
		exception: 	MessageNotUnderstood: RTElement>>nameNode
		resumeValue: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		isFixed: 	false
		model: 	a Node
		shape: 	a RTCompositeShape
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		connectedEdges: 	a RTGroup(a RTEdge)
		shouldUpdateEdges: 	true


[ :edge | edge @ (RTPopup text: edge from nameNode) ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		edge: 	a RTEdge
	Receiver's instance variables: 
a Graph

OrderedCollection>>do:
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		aBlock: 	[ :edge | edge @ (RTPopup text: edge from nameNode) ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(715390976))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(705167360))(a SearchMorp...etc...
		lastStepTime: 	5087190
		lastStepMessage: 	nil
		lastCycleTime: 	5087190
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	5087190
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(705167360))(a SearchMorp...etc...
		lastStepTime: 	5087190
		lastStepMessage: 	nil
		lastCycleTime: 	5087190
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	5087190
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(705167360))(a SearchMorp...etc...
		lastStepTime: 	5087190
		lastStepMessage: 	nil
		lastCycleTime: 	5087190
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	5087190
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTElement(Object)>>doesNotUnderstand: #nameNode
[ :edge | edge @ (RTPopup text: edge from nameNode) ] in Graph>>createGraph:
OrderedCollection>>do:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTMenu class>>initializeElement:
9 November 2015 5:59:51.246423 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTMenu class(Object)>>doesNotUnderstand: #initializeElement:
	Receiver: RTMenu
	Arguments and temporary variables: 
		aMessage: 	initializeElement: a RTEdge
		exception: 	MessageNotUnderstood: RTMenu class>>initializeElement:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#add:->RTMenu>>#add: #buttonLabelBackgroundShape...etc...
		format: 	152
		layout: 	a FixedLayout
		instanceVariables: 	#(#view #items #isOpen #color #labelBackground #label #saved...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTMenu
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Builder-Menu'
		traitComposition: 	{}
		localSelectors: 	nil


RTEdge(RTAnnounceableObject)>>addInteraction:
	Receiver: a RTEdge
	Arguments and temporary variables: 
		anInteractionClassOrInstance: 	RTMenu
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		isFixed: 	false
		model: 	a Node->a Node
		shape: 	a RTArrowedLine
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		from: 	a RTElement
		to: 	a RTElement
		shouldBeUsedInLayout: 	true


RTEdge(RTAnnounceableObject)>>@
	Receiver: a RTEdge
	Arguments and temporary variables: 
		anInteractionClassOrInstance: 	RTMenu
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		isFixed: 	false
		model: 	a Node->a Node
		shape: 	a RTArrowedLine
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		from: 	a RTElement
		to: 	a RTElement
		shouldBeUsedInLayout: 	true


[ :edge | edge @ (RTPopup text: edge from name) @ RTMenu ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		edge: 	a RTEdge
	Receiver's instance variables: 
a Graph

OrderedCollection>>do:
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		aBlock: 	[ :edge | edge @ (RTPopup text: edge from name) @ RTMenu ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(527958016))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseInstVars 438566912))(3...etc...
		lastStepTime: 	5610988
		lastStepMessage: 	nil
		lastCycleTime: 	5610986
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	5610988
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseInstVars 438566912))(3...etc...
		lastStepTime: 	5610988
		lastStepMessage: 	nil
		lastCycleTime: 	5610986
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	5610988
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseInstVars 438566912))(3...etc...
		lastStepTime: 	5610988
		lastStepMessage: 	nil
		lastCycleTime: 	5610986
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	5610988
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTMenu class(Object)>>doesNotUnderstand: #initializeElement:
RTEdge(RTAnnounceableObject)>>addInteraction:
RTEdge(RTAnnounceableObject)>>@
[ :edge | edge @ (RTPopup text: edge from name) @ RTMenu ] in Graph>>createGraph:
OrderedCollection>>do:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTMenuBuilderExamples class>>initializeElement:
9 November 2015 6:00:08.53242 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTMenuBuilderExamples class(Object)>>doesNotUnderstand: #initializeElement:
	Receiver: RTMenuBuilderExamples
	Arguments and temporary variables: 
		aMessage: 	initializeElement: a RTEdge
		exception: 	MessageNotUnderstood: RTMenuBuilderExamples class>>initializeElement...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTBuilder
		methodDict: 	a MethodDictionary(#example01->RTMenuBuilderExamples>>#example01 #e...etc...
		format: 	142
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTMenuBuilderExamples
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Builder-Menu'
		traitComposition: 	{}
		localSelectors: 	nil


RTEdge(RTAnnounceableObject)>>addInteraction:
	Receiver: a RTEdge
	Arguments and temporary variables: 
		anInteractionClassOrInstance: 	RTMenuBuilderExamples
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		isFixed: 	false
		model: 	a Node->a Node
		shape: 	a RTArrowedLine
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		from: 	a RTElement
		to: 	a RTElement
		shouldBeUsedInLayout: 	true


RTEdge(RTAnnounceableObject)>>@
	Receiver: a RTEdge
	Arguments and temporary variables: 
		anInteractionClassOrInstance: 	RTMenuBuilderExamples
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		isFixed: 	false
		model: 	a Node->a Node
		shape: 	a RTArrowedLine
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		from: 	a RTElement
		to: 	a RTElement
		shouldBeUsedInLayout: 	true


[ :edge | edge @ (RTPopup text: edge from name) @ RTMenuBuilderExamples ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		edge: 	a RTEdge
	Receiver's instance variables: 
a Graph

OrderedCollection>>do:
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		aBlock: 	[ :edge | edge @ (RTPopup text: edge from name) @ RTMenuBuilderExamples...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1310720) a RubCursor(314834944) ...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(58720256))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(803471360))(a Spec...etc...
		lastStepTime: 	5628298
		lastStepMessage: 	nil
		lastCycleTime: 	5628296
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	5628298
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(803471360))(a Spec...etc...
		lastStepTime: 	5628298
		lastStepMessage: 	nil
		lastCycleTime: 	5628296
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	5628298
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(803471360))(a Spec...etc...
		lastStepTime: 	5628298
		lastStepMessage: 	nil
		lastCycleTime: 	5628296
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	5628298
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTMenuBuilderExamples class(Object)>>doesNotUnderstand: #initializeElement:
RTEdge(RTAnnounceableObject)>>addInteraction:
RTEdge(RTAnnounceableObject)>>@
[ :edge | edge @ (RTPopup text: edge from name) @ RTMenuBuilderExamples ] in Graph>>createGraph:
OrderedCollection>>do:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTMenu class>>initializeElement:
10 November 2015 4:32:14.719424 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTMenu class(Object)>>doesNotUnderstand: #initializeElement:
	Receiver: RTMenu
	Arguments and temporary variables: 
		aMessage: 	initializeElement: a RTEdge
		exception: 	MessageNotUnderstood: RTMenu class>>initializeElement:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#add:->RTMenu>>#add: #buttonLabelBackgroundShape...etc...
		format: 	152
		layout: 	a FixedLayout
		instanceVariables: 	#(#view #items #isOpen #color #labelBackground #label #saved...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTMenu
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Builder-Menu'
		traitComposition: 	{}
		localSelectors: 	nil


RTEdge(RTAnnounceableObject)>>addInteraction:
	Receiver: a RTEdge
	Arguments and temporary variables: 
		anInteractionClassOrInstance: 	RTMenu
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		isFixed: 	false
		model: 	a Node->a Node
		shape: 	a RTArrowedLine
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		from: 	a RTElement
		to: 	a RTElement
		shouldBeUsedInLayout: 	true


RTEdge(RTAnnounceableObject)>>@
	Receiver: a RTEdge
	Arguments and temporary variables: 
		anInteractionClassOrInstance: 	RTMenu
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		isFixed: 	false
		model: 	a Node->a Node
		shape: 	a RTArrowedLine
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		from: 	a RTElement
		to: 	a RTElement
		shouldBeUsedInLayout: 	true


[ :edge | edge @ (RTPopup text: edge from name) @ RTMenu ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		edge: 	a RTEdge
	Receiver's instance variables: 
a Graph

OrderedCollection>>do:
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		aBlock: 	[ :edge | edge @ (RTPopup text: edge from name) @ RTMenu ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@50)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(267124736) a RubCursor(314834944...etc...
		fullBounds: 	(0@0) corner: (392@50)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1034420224))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(150208512))(a DropList...etc...
		lastStepTime: 	145949
		lastStepMessage: 	nil
		lastCycleTime: 	145949
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	145949
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(150208512))(a DropList...etc...
		lastStepTime: 	145949
		lastStepMessage: 	nil
		lastCycleTime: 	145949
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	145949
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(150208512))(a DropList...etc...
		lastStepTime: 	145949
		lastStepMessage: 	nil
		lastCycleTime: 	145949
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	145949
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTMenu class(Object)>>doesNotUnderstand: #initializeElement:
RTEdge(RTAnnounceableObject)>>addInteraction:
RTEdge(RTAnnounceableObject)>>@
[ :edge | edge @ (RTPopup text: edge from name) @ RTMenu ] in Graph>>createGraph:
OrderedCollection>>do:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTMenu class>>initializeElement:
10 November 2015 4:36:43.501409 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTMenu class(Object)>>doesNotUnderstand: #initializeElement:
	Receiver: RTMenu
	Arguments and temporary variables: 
		aMessage: 	initializeElement: a RTEdge
		exception: 	MessageNotUnderstood: RTMenu class>>initializeElement:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#add:->RTMenu>>#add: #buttonLabelBackgroundShape...etc...
		format: 	152
		layout: 	a FixedLayout
		instanceVariables: 	#(#view #items #isOpen #color #labelBackground #label #saved...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTMenu
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Builder-Menu'
		traitComposition: 	{}
		localSelectors: 	nil


RTEdge(RTAnnounceableObject)>>addInteraction:
	Receiver: a RTEdge
	Arguments and temporary variables: 
		anInteractionClassOrInstance: 	RTMenu
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		isFixed: 	false
		model: 	a Node->a Node
		shape: 	a RTArrowedLine
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		from: 	a RTElement
		to: 	a RTElement
		shouldBeUsedInLayout: 	true


RTEdge(RTAnnounceableObject)>>@
	Receiver: a RTEdge
	Arguments and temporary variables: 
		anInteractionClassOrInstance: 	RTMenu
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		isFixed: 	false
		model: 	a Node->a Node
		shape: 	a RTArrowedLine
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		from: 	a RTElement
		to: 	a RTElement
		shouldBeUsedInLayout: 	true


[ :edge | edge @ (RTPopup text: edge from name) @ RTMenu ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		edge: 	a RTEdge
	Receiver's instance variables: 
a Graph

OrderedCollection>>do:
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		aBlock: 	[ :edge | edge @ (RTPopup text: edge from name) @ RTMenu ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1
'
		itsSelection: 	a Text for 'TestingGraph new test1
'
		itsSelectionString: 	'TestingGraph new test1
'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@50)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(267124736) a RubCursor(314834944...etc...
		fullBounds: 	(0@0) corner: (392@50)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(919076864))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(428081152))(a SearchMorp...etc...
		lastStepTime: 	414685
		lastStepMessage: 	nil
		lastCycleTime: 	414681
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	414685
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(428081152))(a SearchMorp...etc...
		lastStepTime: 	414685
		lastStepMessage: 	nil
		lastCycleTime: 	414681
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	414685
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(428081152))(a SearchMorp...etc...
		lastStepTime: 	414685
		lastStepMessage: 	nil
		lastCycleTime: 	414681
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	414685
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTMenu class(Object)>>doesNotUnderstand: #initializeElement:
RTEdge(RTAnnounceableObject)>>addInteraction:
RTEdge(RTAnnounceableObject)>>@
[ :edge | edge @ (RTPopup text: edge from name) @ RTMenu ] in Graph>>createGraph:
OrderedCollection>>do:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 4:54:17.54741 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :edge | edge @ (RTPopup text: self halt) ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		edge: 	a RTEdge
	Receiver's instance variables: 
a Graph

OrderedCollection>>do:
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		aBlock: 	[ :edge | edge @ (RTPopup text: self halt) ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1
'
		itsSelection: 	a Text for 'TestingGraph new test1
'
		itsSelectionString: 	'TestingGraph new test1
'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@50)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(267124736) a RubCursor(314834944...etc...
		fullBounds: 	(0@0) corner: (392@50)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(963117056))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316407808))(a SearchMorp...etc...
		lastStepTime: 	1468735
		lastStepMessage: 	nil
		lastCycleTime: 	1468735
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	1468735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316407808))(a SearchMorp...etc...
		lastStepTime: 	1468735
		lastStepMessage: 	nil
		lastCycleTime: 	1468735
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	1468735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(316407808))(a SearchMorp...etc...
		lastStepTime: 	1468735
		lastStepMessage: 	nil
		lastCycleTime: 	1468735
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	1468735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :edge | edge @ (RTPopup text: self halt) ] in Graph>>createGraph:
OrderedCollection>>do:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteSymbol>>sub:
10 November 2015 5:06:10.711413 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

ByteSymbol(Object)>>doesNotUnderstand: #sub:
	Receiver: #nodeB
	Arguments and temporary variables: 
		aMessage: 	sub: a Node
		exception: 	MessageNotUnderstood: ByteSymbol>>sub:
		resumeValue: 	nil
	Receiver's instance variables: 
#nodeB

Node>>pub:
	Receiver: a Node
	Arguments and temporary variables: 
		anObject: 	#nodeB
	Receiver's instance variables: 
		nameNode: 	'A'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection(#nodeB)
		topic: 	a Dictionary('topic 1'->#nodeB )


Node>>topic:
	Receiver: a Node
	Arguments and temporary variables: 
		anObject: 	#('topic 1' #nodeB)
		key: 	'topic 1'
		value: 	#nodeB
	Receiver's instance variables: 
		nameNode: 	'A'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection(#nodeB)
		topic: 	a Dictionary('topic 1'->#nodeB )


TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	nil
		graph: 	nil
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1
'
		itsSelection: 	a Text for 'TestingGraph new test1
'
		itsSelectionString: 	'TestingGraph new test1
'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@50)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(267124736) a RubCursor(314834944...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(981729280))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	2181853
		lastStepMessage: 	nil
		lastCycleTime: 	2181875
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2181853
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	2181853
		lastStepMessage: 	nil
		lastCycleTime: 	2181875
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2181853
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	2181853
		lastStepMessage: 	nil
		lastCycleTime: 	2181875
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2181853
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ByteSymbol(Object)>>doesNotUnderstand: #sub:
Node>>pub:
Node>>topic:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Node>>topic:add:
10 November 2015 5:08:21.153415 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Node(Object)>>doesNotUnderstand: #topic:add:
	Receiver: a Node
	Arguments and temporary variables: 
		aMessage: 	topic: an OrderedCollection() add: 'topic 1'
		exception: 	MessageNotUnderstood: Node>>topic:add:
		resumeValue: 	nil
	Receiver's instance variables: 
		nameNode: 	'A'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection()
		topic: 	a Dictionary()


TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	nil
		graph: 	nil
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1
'
		itsSelection: 	a Text for 'TestingGraph new test1
'
		itsSelectionString: 	'TestingGraph new test1
'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@50)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(267124736) a RubCursor(314834944...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(417857536))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(428081152))(a SearchMorp...etc...
		lastStepTime: 	2312295
		lastStepMessage: 	nil
		lastCycleTime: 	2312313
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2312295
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(428081152))(a SearchMorp...etc...
		lastStepTime: 	2312295
		lastStepMessage: 	nil
		lastCycleTime: 	2312313
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2312295
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(428081152))(a SearchMorp...etc...
		lastStepTime: 	2312295
		lastStepMessage: 	nil
		lastCycleTime: 	2312313
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2312295
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Node(Object)>>doesNotUnderstand: #topic:add:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTView>>PharoTutorial
10 November 2015 5:12:38.119408 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTView(Object)>>doesNotUnderstand: #PharoTutorial
	Receiver: a RTView
	Arguments and temporary variables: 
		aMessage: 	PharoTutorial
		exception: 	MessageNotUnderstood: RTView>>PharoTutorial
		resumeValue: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	nil
		elements: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement)...etc...
		edges: 	an OrderedCollection(a RTEdge a RTEdge)
		trCanvas: 	a TRCanvas


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1
PharoTutorial go.'
		itsSelection: 	a Text for 'TestingGraph new test1
PharoTutorial go.'
		itsSelectionString: 	'TestingGraph new test1
PharoTutorial go.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1 PharoTutorial go
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@50)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(799539200) a RubCursor(314834944...etc...
		fullBounds: 	(0@0) corner: (392@50)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(801898496))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(738721792))(a DropList...etc...
		lastStepTime: 	2568203
		lastStepMessage: 	nil
		lastCycleTime: 	2568225
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2568203
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(738721792))(a DropList...etc...
		lastStepTime: 	2568203
		lastStepMessage: 	nil
		lastCycleTime: 	2568225
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2568203
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(738721792))(a DropList...etc...
		lastStepTime: 	2568203
		lastStepMessage: 	nil
		lastCycleTime: 	2568225
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	2568203
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTView(Object)>>doesNotUnderstand: #PharoTutorial
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTPopup class>>text:keyAtValue:
10 November 2015 5:21:41.585414 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTPopup class(Object)>>doesNotUnderstand: #text:keyAtValue:
	Receiver: RTPopup
	Arguments and temporary variables: 
		aMessage: 	text: a Dictionary('topic 1'->a Node ) keyAtValue: a Node
		exception: 	MessageNotUnderstood: RTPopup class>>text:keyAtValue:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTAbstractPopup
		methodDict: 	a MethodDictionary(#accept:with:->RTPopup>>#accept:with: #backgroun...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#groupBlock #text #textColor)
		organization: 	a ClassOrganization
		subclasses: 	{RTFixedPopup}
		name: 	#RTPopup
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		lastPopup: 	nil


[ :edge | edge @ (RTPopup text: edge model key topic keyAtValue: edge model value) ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		edge: 	a RTEdge
	Receiver's instance variables: 
a Graph

OrderedCollection>>do:
	Receiver: an OrderedCollection(a RTEdge a RTEdge)
	Arguments and temporary variables: 
		aBlock: 	[ :edge | edge @ (RTPopup text: edge model key topic keyAtValue: edge m...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTEdge a RTEdge nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1'
		itsSelection: 	a Text for 'TestingGraph new test1'
		itsSelectionString: 	'TestingGraph new test1'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(230948864) a RubCursor(314834944...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(330825728))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(492306432))(a SearchMorp...etc...
		lastStepTime: 	3112691
		lastStepMessage: 	nil
		lastCycleTime: 	3112763
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3112691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(492306432))(a SearchMorp...etc...
		lastStepTime: 	3112691
		lastStepMessage: 	nil
		lastCycleTime: 	3112763
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3112691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(492306432))(a SearchMorp...etc...
		lastStepTime: 	3112691
		lastStepMessage: 	nil
		lastCycleTime: 	3112763
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3112691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTPopup class(Object)>>doesNotUnderstand: #text:keyAtValue:
[ :edge | edge @ (RTPopup text: edge model key topic keyAtValue: edge model value) ] in Graph>>createGraph:
OrderedCollection>>do:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTForceBasedLayout class>>charge:
10 November 2015 5:33:47.105409 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTForceBasedLayout class(Object)>>doesNotUnderstand: #charge:
	Receiver: RTForceBasedLayout
	Arguments and temporary variables: 
		aMessage: 	charge: -450
		exception: 	MessageNotUnderstood: RTForceBasedLayout class>>charge:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	RTEdgeDrivenLayout
		methodDict: 	a MethodDictionary(#accumulate:->RTForceBasedLayout>>#accumulate: #...etc...
		format: 	182
		layout: 	a FixedLayout
		instanceVariables: 	#(#oldPositions #nodes #weights #strengths #lengths #gravity...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RTForceBasedLayout
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Layouts'
		traitComposition: 	{}
		localSelectors: 	nil


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test2
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test2'
		itsSelection: 	a Text for 'TestingGraph new test2'
		itsSelectionString: 	'TestingGraph new test2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(973078528) a RubCursor(314834944...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(806879232))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(997982208))(a DropList...etc...
		lastStepTime: 	3836245
		lastStepMessage: 	nil
		lastCycleTime: 	3836267
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3836245
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(997982208))(a DropList...etc...
		lastStepTime: 	3836245
		lastStepMessage: 	nil
		lastCycleTime: 	3836267
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3836245
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(997982208))(a DropList...etc...
		lastStepTime: 	3836245
		lastStepMessage: 	nil
		lastCycleTime: 	3836267
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3836245
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTForceBasedLayout class(Object)>>doesNotUnderstand: #charge:
Graph>>createGraph:
TestingGraph>>test2
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTGroup>>charge:
10 November 2015 5:34:34.453409 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTGroup(Object)>>doesNotUnderstand: #charge:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aMessage: 	charge: -450
		exception: 	MessageNotUnderstood: RTGroup>>charge:
		resumeValue: 	nil
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement)
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
	Receiver's instance variables: 
a Graph

TestingGraph>>test2
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test2'
		itsSelection: 	a Text for 'TestingGraph new test2'
		itsSelectionString: 	'TestingGraph new test2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(973078528) a RubCursor(314834944...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(632291328))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(625737728))(a DropList...etc...
		lastStepTime: 	3883645
		lastStepMessage: 	nil
		lastCycleTime: 	3883667
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3883645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(625737728))(a DropList...etc...
		lastStepTime: 	3883645
		lastStepMessage: 	nil
		lastCycleTime: 	3883667
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3883645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(625737728))(a DropList...etc...
		lastStepTime: 	3883645
		lastStepMessage: 	nil
		lastCycleTime: 	3883667
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	3883645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTGroup(Object)>>doesNotUnderstand: #charge:
Graph>>createGraph:
TestingGraph>>test2
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: RTArrowedLine>>shortestDistanceAttachPoint
10 November 2015 5:39:08.189416 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTArrowedLine(Object)>>doesNotUnderstand: #shortestDistanceAttachPoint
	Receiver: a RTArrowedLine
	Arguments and temporary variables: 
		aMessage: 	shortestDistanceAttachPoint
		exception: 	MessageNotUnderstood: RTArrowedLine>>shortestDistanceAttachPoint
		resumeValue: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		width: 	1
		attachPoint: 	a RTShorterDistanceWithOffsetAttachPoint
		line: 	a RTLine
		head: 	a RTSimpleArrowHead


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
	Receiver's instance variables: 
a Graph

TestingGraph>>test2
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test2'
		itsSelection: 	a Text for 'TestingGraph new test2'
		itsSelectionString: 	'TestingGraph new test2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(973078528) a RubCursor(314834944...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(851443712))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(852230144))(a DropList...etc...
		lastStepTime: 	4159395
		lastStepMessage: 	nil
		lastCycleTime: 	4159391
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4159395
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(852230144))(a DropList...etc...
		lastStepTime: 	4159395
		lastStepMessage: 	nil
		lastCycleTime: 	4159391
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4159395
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (927@1028)
		canvas: 	a FormCanvas on: DisplayScreen(927x1028x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(852230144))(a DropList...etc...
		lastStepTime: 	4159395
		lastStepMessage: 	nil
		lastCycleTime: 	4159391
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	4159395
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (927@1028)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (927@1028)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTArrowedLine(Object)>>doesNotUnderstand: #shortestDistanceAttachPoint
Graph>>createGraph:
TestingGraph>>test2
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>isByteString
10 November 2015 6:25:48.041413 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>>isByteString
		resumeValue: 	nil
	Receiver's instance variables: 
1

ByteString(String)>>compare:with:collated:
	Receiver: 'topic 1'
	Arguments and temporary variables: 
		string1: 	'topic 1'
		string2: 	1
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc...
	Receiver's instance variables: 
'topic 1'

ByteString(String)>><
	Receiver: 'topic 1'
	Arguments and temporary variables: 
		aString: 	1
	Receiver's instance variables: 
'topic 1'

OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		fromIndex: 	'topic 1'
		toIndex: 	'topic 1'
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:put:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	'topic 1'
		anObject: 	a Node
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Node>>topic:
	Receiver: a Node
	Arguments and temporary variables: 
		anObject: 	an Array('topic 1' a Node)
		key: 	'topic 1'
		value: 	a Node
	Receiver's instance variables: 
		nameNode: 	'A'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection()
		topic: 	an OrderedCollection()


TestingGraph>>test2
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	nil
		graph: 	nil
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test2'
		itsSelection: 	a Text for 'TestingGraph new test2'
		itsSelectionString: 	'TestingGraph new test2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(973078528) a RubCursor(314834944...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(220200960))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(891289600))(a SearchMorp...etc...
		lastStepTime: 	6959177
		lastStepMessage: 	nil
		lastCycleTime: 	6959197
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	6959177
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(891289600))(a SearchMorp...etc...
		lastStepTime: 	6959177
		lastStepMessage: 	nil
		lastCycleTime: 	6959197
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	6959177
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(891289600))(a SearchMorp...etc...
		lastStepTime: 	6959177
		lastStepMessage: 	nil
		lastCycleTime: 	6959197
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	6959177
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #isByteString
ByteString(String)>>compare:with:collated:
ByteString(String)>><
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:put:
Node>>topic:
TestingGraph>>test2
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>isByteString
10 November 2015 6:26:18.565413 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>>isByteString
		resumeValue: 	nil
	Receiver's instance variables: 
1

ByteString(String)>>compare:with:collated:
	Receiver: 'topic 1'
	Arguments and temporary variables: 
		string1: 	'topic 1'
		string2: 	1
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc...
	Receiver's instance variables: 
'topic 1'

ByteString(String)>><
	Receiver: 'topic 1'
	Arguments and temporary variables: 
		aString: 	1
	Receiver's instance variables: 
'topic 1'

OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		fromIndex: 	'topic 1'
		toIndex: 	'topic 1'
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:put:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	'topic 1'
		anObject: 	a Node
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Node>>topic:
	Receiver: a Node
	Arguments and temporary variables: 
		anObject: 	an Array('topic 1' a Node)
		key: 	'topic 1'
		value: 	a Node
	Receiver's instance variables: 
		nameNode: 	'A'
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection()
		topic: 	an OrderedCollection()


TestingGraph>>test2
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	nil
		graph: 	nil
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test2'
		itsSelection: 	a Text for 'TestingGraph new test2'
		itsSelectionString: 	'TestingGraph new test2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(973078528) a RubCursor(314834944...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(62652416))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(738721792))(a DropList...etc...
		lastStepTime: 	6989749
		lastStepMessage: 	nil
		lastCycleTime: 	6989745
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	6989749
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(738721792))(a DropList...etc...
		lastStepTime: 	6989749
		lastStepMessage: 	nil
		lastCycleTime: 	6989745
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	6989749
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(738721792))(a DropList...etc...
		lastStepTime: 	6989749
		lastStepMessage: 	nil
		lastCycleTime: 	6989745
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	6989749
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #isByteString
ByteString(String)>>compare:with:collated:
ByteString(String)>><
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:put:
Node>>topic:
TestingGraph>>test2
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Node>>topic:
10 November 2015 6:41:52.577409 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Node(Object)>>doesNotUnderstand: #topic:
	Receiver: a Node
	Arguments and temporary variables: 
		aMessage: 	topic: an Array('topic 1' a Node)
		exception: 	MessageNotUnderstood: Node>>topic:
		resumeValue: 	nil
	Receiver's instance variables: 
		nodeName: 	'A'
		topicPub: 	an OrderedCollection()
		topicSub: 	an OrderedCollection()


TestingGraph>>test2
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	nil
		graph: 	nil
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test2'
		itsSelection: 	a Text for 'TestingGraph new test2'
		itsSelectionString: 	'TestingGraph new test2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(973078528) a RubCursor(314834944...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(561512448))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(752615424))(a TRMorph(752615...etc...
		lastStepTime: 	7923741
		lastStepMessage: 	nil
		lastCycleTime: 	7923761
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	7923741
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(752615424))(a TRMorph(752615...etc...
		lastStepTime: 	7923741
		lastStepMessage: 	nil
		lastCycleTime: 	7923761
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	7923741
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(752615424))(a TRMorph(752615...etc...
		lastStepTime: 	7923741
		lastStepMessage: 	nil
		lastCycleTime: 	7923761
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	7923741
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Node(Object)>>doesNotUnderstand: #topic:
TestingGraph>>test2
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Node>>topic:
10 November 2015 6:42:34.34941 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Node(Object)>>doesNotUnderstand: #topic:
	Receiver: a Node
	Arguments and temporary variables: 
		aMessage: 	topic: an Array('topic 1' a Node)
		exception: 	MessageNotUnderstood: Node>>topic:
		resumeValue: 	nil
	Receiver's instance variables: 
		nodeName: 	'A'
		topicPub: 	an OrderedCollection()
		topicSub: 	an OrderedCollection()


TestingGraph>>test2
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	nil
		graph: 	nil
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test2'
		itsSelection: 	a Text for 'TestingGraph new test2'
		itsSelectionString: 	'TestingGraph new test2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(973078528) a RubCursor(314834944...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(877920256))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(752615424))(a TRMorph(752615...etc...
		lastStepTime: 	7965513
		lastStepMessage: 	nil
		lastCycleTime: 	7965533
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	7965513
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(752615424))(a TRMorph(752615...etc...
		lastStepTime: 	7965513
		lastStepMessage: 	nil
		lastCycleTime: 	7965533
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	7965513
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(752615424))(a TRMorph(752615...etc...
		lastStepTime: 	7965513
		lastStepMessage: 	nil
		lastCycleTime: 	7965533
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	7965513
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Node(Object)>>doesNotUnderstand: #topic:
TestingGraph>>test2
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 6:55:04.989408 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :subscriber | self halt ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | self halt ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	266
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | self halt ]
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | self halt ]
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test2
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test2'
		itsSelection: 	a Text for 'TestingGraph new test2'
		itsSelectionString: 	'TestingGraph new test2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(973078528) a RubCursor(314834944...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(782761984))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(509870080))(a TRMorph(509870...etc...
		lastStepTime: 	8716205
		lastStepMessage: 	nil
		lastCycleTime: 	8716205
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	8716205
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(509870080))(a TRMorph(509870...etc...
		lastStepTime: 	8716205
		lastStepMessage: 	nil
		lastCycleTime: 	8716205
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	8716205
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(509870080))(a TRMorph(509870...etc...
		lastStepTime: 	8716205
		lastStepMessage: 	nil
		lastCycleTime: 	8716205
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	8716205
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :subscriber | self halt ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test2
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 6:58:17.177409 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Graph class>>DoIt
	Receiver: Graph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#createGraph:->Graph>>#createGraph: #initialize-...etc...
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Graph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RQT-Pharo'
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self halt.'
		itsSelection: 	a Text for 'self halt.'
		itsSelectionString: 	'self halt.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self halt
		source: 	a ReadStream
		context: 	nil
		receiver: 	Graph
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	Graph
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(489160704)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(489160704)
		selectionShowing: 	true
		model: 	a PackageTreeNautilusUI
		editingState: 	a SmalltalkEditingState


[ textMorph editor evaluateSelection ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>doIt
	Receiver: a PluggableTextMorphWithLimits(574619648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(85.0@716.0) corner: (901.0@993.0)
		owner: 	a MultipleMethodsEditor(166199296)
		submorphs: 	an Array(a ScrollBar(617349120) an AlphaImageMorph(432275456) a Tran...etc...
		fullBounds: 	(85@716) corner: (901@993)
		color: 	Color white
		extension: 	a MorphExtension (22282240) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(617349120)
		scroller: 	a TransformMorph(35389440)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(350224384)
		textMorph: 	a TextMorphForEditView(489160704)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(471 to: 470)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(432275456)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(574619648)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph editor evaluateSelection ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(85.0@716.0) corner: (901.0@993.0)
		owner: 	a MultipleMethodsEditor(166199296)
		submorphs: 	an Array(a ScrollBar(617349120) an AlphaImageMorph(432275456) a Tran...etc...
		fullBounds: 	(85@716) corner: (901@993)
		color: 	Color white
		extension: 	a MorphExtension (22282240) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(617349120)
		scroller: 	a TransformMorph(35389440)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(350224384)
		textMorph: 	a TextMorphForEditView(489160704)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(471 to: 470)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(432275456)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(489160704)
	Arguments and temporary variables: 
		editBlock: 	[ result := editBlock value ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (795@591)
		owner: 	a TransformMorph(35389440)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (795@591)
		color: 	Color black
		extension: 	a MorphExtension (547094528) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'createGraph: nodeArray
	| v eb arrow layout stepping|
	v := R...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0)
		editView: 	a PluggableTextMorphWithLimits(574619648)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
	Receiver: a PluggableTextMorphWithLimits(574619648)
	Arguments and temporary variables: 
		result: 	nil
		editBlock: 	[ textMorph editor evaluateSelection ]
	Receiver's instance variables: 
		bounds: 	(85.0@716.0) corner: (901.0@993.0)
		owner: 	a MultipleMethodsEditor(166199296)
		submorphs: 	an Array(a ScrollBar(617349120) an AlphaImageMorph(432275456) a Tran...etc...
		fullBounds: 	(85@716) corner: (901@993)
		color: 	Color white
		extension: 	a MorphExtension (22282240) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(617349120)
		scroller: 	a TransformMorph(35389440)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(350224384)
		textMorph: 	a TextMorphForEditView(489160704)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(471 to: 470)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(432275456)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>doIt
	Receiver: a PluggableTextMorphWithLimits(574619648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(85.0@716.0) corner: (901.0@993.0)
		owner: 	a MultipleMethodsEditor(166199296)
		submorphs: 	an Array(a ScrollBar(617349120) an AlphaImageMorph(432275456) a Tran...etc...
		fullBounds: 	(85@716) corner: (901@993)
		color: 	Color white
		extension: 	a MorphExtension (22282240) [eventHandler = a MorphicEventHandler]  ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(617349120)
		scroller: 	a TransformMorph(35389440)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(350224384)
		textMorph: 	a TextMorphForEditView(489160704)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(471 to: 470)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	700
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(432275456)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorphWithLimits(574619648)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{GLMSmalltalkEditor}
		name: 	#SmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorphWithLimits(574619648)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorphWithLimits(574619648)
		secondArg: 	a PluggableTextMorphWithLimits(574619648)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :morph | morph doIt ]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorphWithLimits(574619648)
		secondArg: 	a PluggableTextMorphWithLimits(574619648)
		thirdArg: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	121
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorphWithLimits(574619648)
		category: 	a KMCategory
		morph: 	a PluggableTextMorphWithLimits(574619648)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Ctrl + D do [ :morph | morph doIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :morph | morph doIt ]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 #doIt on Ctrl + D do [ :morp...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	6
		each: 	#doIt on Ctrl + D do [ :morph | morph doIt ]

	Receiver's instance variables: 
		tally: 	14
		array: 	an Array(#inspectIt on Ctrl + I do [ :morph | morph inspectIt ]
 nil nil...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a PluggableTextMorphWithLimits(574619648)
		category: 	a KMCategory
		morph: 	a PluggableTextMorphWithLimits(574619648)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#SmalltalkEditor) aKMCategoryTarget(#NautilusS...etc...
		morph: 	a PluggableTextMorphWithLimits(574619648)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#SmalltalkEditor) aKMCategor...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyM...etc...
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#SmalltalkEditor) aKMC...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#SmalltalkEditor) aKMCategoryTarget(#NautilusS...etc...
		morph: 	a PluggableTextMorphWithLimits(574619648)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorphWithLimits(574619648)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a TextMorphForEditView(489160704)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(489160704)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (795@591)
		owner: 	a TransformMorph(35389440)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (795@591)
		color: 	Color black
		extension: 	a MorphExtension (547094528) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'createGraph: nodeArray
	| v eb arrow layout stepping|
	v := R...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0)
		editView: 	a PluggableTextMorphWithLimits(574619648)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(489160704)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (795@591)
		owner: 	a TransformMorph(35389440)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (795@591)
		color: 	Color black
		extension: 	a MorphExtension (547094528) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'createGraph: nodeArray
	| v eb arrow layout stepping|
	v := R...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0)
		editView: 	a PluggableTextMorphWithLimits(574619648)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(489160704)
	Receiver's instance variables: 
		timeStamp: 	8908317
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(457@293.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	4
		charCode: 	100
		scanCode: 	4


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(489160704)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (795@591)
		owner: 	a TransformMorph(35389440)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (795@591)
		color: 	Color black
		extension: 	a MorphExtension (547094528) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'createGraph: nodeArray
	| v eb arrow layout stepping|
	v := R...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0)
		editView: 	a PluggableTextMorphWithLimits(574619648)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(489160704)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (795@591)
		owner: 	a TransformMorph(35389440)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (795@591)
		color: 	Color black
		extension: 	a MorphExtension (547094528) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Code Pro
		text: 	a Text for 'createGraph: nodeArray
	| v eb arrow layout stepping|
	v := R...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0)
		editView: 	a PluggableTextMorphWithLimits(574619648)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		focusHolder: 	a TextMorphForEditView(489160704)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(538@773.0) corner: (554@789.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(538@773.0) corner: (554@789.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(489160704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(546@782) mouseOver nil nil]
		targetOffset: 	(436@292)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8897709 546 782 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(317980672) a Nau...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Ctrl-d>']
		focusHolder: 	a TextMorphForEditView(489160704)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(538@773.0) corner: (554@789.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(538@773.0) corner: (554@789.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(489160704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(546@782) mouseOver nil nil]
		targetOffset: 	(436@292)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8897709 546 782 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2



--- The full stack ---
Graph class>>DoIt
OpalCompiler>>evaluate
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[ textMorph editor evaluateSelection ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>doIt
[ result := editBlock value ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>handleEdit:
PluggableTextMorphWithLimits(PluggableTextMorph)>>doIt
[ :morph | morph doIt ] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget verifyMatchWith: anEventBuffer notifying: self thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 6:58:47.645409 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test2
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test2'
		itsSelection: 	a Text for 'TestingGraph new test2'
		itsSelectionString: 	'TestingGraph new test2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(973078528) a RubCursor(314834944...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1004797952))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(509870080))(a TRMorph(509870...etc...
		lastStepTime: 	8938845
		lastStepMessage: 	nil
		lastCycleTime: 	8938845
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	8938845
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(509870080))(a TRMorph(509870...etc...
		lastStepTime: 	8938845
		lastStepMessage: 	nil
		lastCycleTime: 	8938845
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	8938845
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(509870080))(a TRMorph(509870...etc...
		lastStepTime: 	8938845
		lastStepMessage: 	nil
		lastCycleTime: 	8938845
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	8938845
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Graph>>createGraph:
TestingGraph>>test2
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: OrderedCollection>>self
10 November 2015 6:59:20.579408 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

OrderedCollection(Object)>>doesNotUnderstand: #self
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		aMessage: 	self
		exception: 	MessageNotUnderstood: OrderedCollection>>self
		resumeValue: 	nil
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


[ :subscriber | subscriber pub self halt ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | subscriber pub self halt ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	274
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | subscriber pub self halt ]
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | subscriber pub self halt ]
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test2
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test2'
		itsSelection: 	a Text for 'TestingGraph new test2'
		itsSelectionString: 	'TestingGraph new test2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(973078528) a RubCursor(314834944...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(786169856))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(509870080))(a TRMorph(509870...etc...
		lastStepTime: 	8971777
		lastStepMessage: 	nil
		lastCycleTime: 	8971775
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	8971777
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(509870080))(a TRMorph(509870...etc...
		lastStepTime: 	8971777
		lastStepMessage: 	nil
		lastCycleTime: 	8971775
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	8971777
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(509870080))(a TRMorph(509870...etc...
		lastStepTime: 	8971777
		lastStepMessage: 	nil
		lastCycleTime: 	8971775
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	8971777
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
OrderedCollection(Object)>>doesNotUnderstand: #self
[ :subscriber | subscriber pub self halt ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test2
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 6:59:30.659408 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :subscriber | 
subscriber pub.
self halt ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub.
self halt ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	270
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub.
self halt ]
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub.
self halt ]
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test2
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test2'
		itsSelection: 	a Text for 'TestingGraph new test2'
		itsSelectionString: 	'TestingGraph new test2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(973078528) a RubCursor(314834944...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(194248704))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(509870080))(a TRMorph(509870...etc...
		lastStepTime: 	8981835
		lastStepMessage: 	nil
		lastCycleTime: 	8981835
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	8981835
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(509870080))(a TRMorph(509870...etc...
		lastStepTime: 	8981835
		lastStepMessage: 	nil
		lastCycleTime: 	8981835
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	8981835
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(509870080))(a TRMorph(509870...etc...
		lastStepTime: 	8981835
		lastStepMessage: 	nil
		lastCycleTime: 	8981835
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	8981835
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :subscriber | 
subscriber pub.
self halt ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test2
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 7:06:20.981409 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
self halt ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
self halt ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	274
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
se...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
se...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1'
		itsSelection: 	a Text for 'TestingGraph new test1'
		itsSelectionString: 	'TestingGraph new test1'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(960233472)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(960233472)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@31)
		owner: 	a TransformWithLayoutMorph(533200896)
		submorphs: 	an Array(a RubPrimarySelectionMorph(369360896) a RubCursor(314834944...etc...
		fullBounds: 	(0@0) corner: (392@31)
		color: 	Color transparent
		extension: 	a MorphExtension (364642304) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(500957184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(314834944)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(482607104))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(399245312)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(749207552))(a TRMorph(749207...etc...
		lastStepTime: 	9392179
		lastStepMessage: 	nil
		lastCycleTime: 	9392177
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	9392179
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(749207552))(a TRMorph(749207...etc...
		lastStepTime: 	9392179
		lastStepMessage: 	nil
		lastCycleTime: 	9392177
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	9392179
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(749207552))(a TRMorph(749207...etc...
		lastStepTime: 	9392179
		lastStepMessage: 	nil
		lastCycleTime: 	9392177
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(314834944)))
		lastAlarmTime: 	9392179
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(815792128) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
self halt ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Node>>add:
10 November 2015 7:12:13.828374 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Node(Object)>>doesNotUnderstand: #add:
	Receiver: a Node
	Arguments and temporary variables: 
		aMessage: 	add: a Topic
		exception: 	MessageNotUnderstood: Node>>add:
		resumeValue: 	nil
	Receiver's instance variables: 
		nameNode: 	nil
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection(a Topic)


Topic>>sub:
	Receiver: a Topic
	Arguments and temporary variables: 
		anObject: 	a Node
	Receiver's instance variables: 
		topicName: 	'Holi'
		pub: 	an OrderedCollection(a Node)
		sub: 	an OrderedCollection(a Node)
		type: 	nil


TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	nil
		graph: 	nil
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (793@31)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(682622976))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	206451
		lastStepMessage: 	nil
		lastCycleTime: 	206471
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	206451
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	206451
		lastStepMessage: 	nil
		lastCycleTime: 	206471
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	206451
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	206451
		lastStepMessage: 	nil
		lastCycleTime: 	206471
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	206451
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Node(Object)>>doesNotUnderstand: #add:
Topic>>sub:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Node>>add:
10 November 2015 7:12:16.884371 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Node(Object)>>doesNotUnderstand: #add:
	Receiver: a Node
	Arguments and temporary variables: 
		aMessage: 	add: a Topic
		exception: 	MessageNotUnderstood: Node>>add:
		resumeValue: 	nil
	Receiver's instance variables: 
		nameNode: 	nil
		sub: 	an OrderedCollection()
		pub: 	an OrderedCollection(a Topic)


Topic>>sub:
	Receiver: a Topic
	Arguments and temporary variables: 
		anObject: 	a Node
	Receiver's instance variables: 
		topicName: 	'Holi'
		pub: 	an OrderedCollection(a Node)
		sub: 	an OrderedCollection(a Node)
		type: 	nil


TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	nil
		graph: 	nil
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.'
		itsSelection: 	a Text for 'TestingGraph new test1.'
		itsSelectionString: 	'TestingGraph new test1.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (793@31)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (793@31)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(385875968))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	209603
		lastStepMessage: 	nil
		lastCycleTime: 	209603
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	209603
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	209603
		lastStepMessage: 	nil
		lastCycleTime: 	209603
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	209603
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	209603
		lastStepMessage: 	nil
		lastCycleTime: 	209603
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	209603
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Node(Object)>>doesNotUnderstand: #add:
Topic>>sub:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 7:12:46.232367 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
self halt ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
self halt ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	274
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
se...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
se...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.
'
		itsSelection: 	a Text for 'TestingGraph new test1.
'
		itsSelectionString: 	'TestingGraph new test1.
'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (793@50)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (793@50)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(111673344))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	238945
		lastStepMessage: 	nil
		lastCycleTime: 	238945
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	238945
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	238945
		lastStepMessage: 	nil
		lastCycleTime: 	238945
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	238945
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	238945
		lastStepMessage: 	nil
		lastCycleTime: 	238945
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	238945
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
self halt ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
AssertionFailure: Provide a set of elements instead of one single element
10 November 2015 7:12:48.52037 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

RTGroup(Object)>>assert:description:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ objects isCollection ]
		aStringOrBlock: 	'Provide a set of elements instead of one single element'
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTGroup>>elementsFromModels:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		t: 	nil
		objects: 	a Graph
		answer: 	nil
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
se...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
se...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.
'
		itsSelection: 	a Text for 'TestingGraph new test1.
'
		itsSelectionString: 	'TestingGraph new test1.
'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (793@50)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (793@50)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(111673344))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	241185
		lastStepMessage: 	nil
		lastCycleTime: 	241207
		alarms: 	a Heap()
		lastAlarmTime: 	241185
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(454295552) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	241185
		lastStepMessage: 	nil
		lastCycleTime: 	241207
		alarms: 	a Heap()
		lastAlarmTime: 	241185
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	241185
		lastStepMessage: 	nil
		lastCycleTime: 	241207
		alarms: 	a Heap()
		lastAlarmTime: 	241185
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(454295552) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
RTGroup(Object)>>assert:description:
RTGroup>>elementsFromModels:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Graph>>do:
10 November 2015 7:12:51.482369 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Graph(Object)>>doesNotUnderstand: #do:
	Receiver: a Graph
	Arguments and temporary variables: 
		aMessage: 	do: [ :o | 
t := self elementFromModel: o.
t notNil
	ifTrue: [ answer...etc...
		exception: 	MessageNotUnderstood: Graph>>do:
		resumeValue: 	nil
	Receiver's instance variables: 
a Graph

RTGroup>>elementsFromModels:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		t: 	nil
		objects: 	a Graph
		answer: 	a RTGroup()
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
se...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
se...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.
'
		itsSelection: 	a Text for 'TestingGraph new test1.
'
		itsSelectionString: 	'TestingGraph new test1.
'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (793@50)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (793@50)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(111673344))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	244151
		lastStepMessage: 	nil
		lastCycleTime: 	244173
		alarms: 	a Heap()
		lastAlarmTime: 	244151
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(616562688) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	244151
		lastStepMessage: 	nil
		lastCycleTime: 	244173
		alarms: 	a Heap()
		lastAlarmTime: 	244151
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	244151
		lastStepMessage: 	nil
		lastCycleTime: 	244173
		alarms: 	a Heap()
		lastAlarmTime: 	244151
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(616562688) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Graph(Object)>>doesNotUnderstand: #do:
RTGroup>>elementsFromModels:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Graph>>do:
10 November 2015 7:12:52.518375 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Graph(Object)>>doesNotUnderstand: #do:
	Receiver: a Graph
	Arguments and temporary variables: 
		aMessage: 	do: [ :o | 
t := self elementFromModel: o.
t notNil
	ifTrue: [ answer...etc...
		exception: 	MessageNotUnderstood: Graph>>do:
		resumeValue: 	nil
	Receiver's instance variables: 
a Graph

Message>>sentTo:
	Receiver: do: [ :o | 
t := self elementFromModel: o.
t notNil
	ifTrue: [ answer add: t ] ]
	Arguments and temporary variables: 
		receiver: 	a Graph
	Receiver's instance variables: 
		selector: 	#do:
		args: 	an Array([ :o | 
t := self elementFromModel: o.
t notNil
	ifTrue: [ answe...etc...
		lookupClass: 	Graph


Graph(Object)>>doesNotUnderstand: #do:
	Receiver: a Graph
	Arguments and temporary variables: 
		aMessage: 	do: [ :o | 
t := self elementFromModel: o.
t notNil
	ifTrue: [ answer...etc...
		exception: 	MessageNotUnderstood: Graph>>do:
		resumeValue: 	MessageNotUnderstood: Graph>>do:
	Receiver's instance variables: 
a Graph

RTGroup>>elementsFromModels:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		t: 	nil
		objects: 	a Graph
		answer: 	a RTGroup()
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
se...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
se...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.
'
		itsSelection: 	a Text for 'TestingGraph new test1.
'
		itsSelectionString: 	'TestingGraph new test1.
'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (793@50)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (793@50)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(111673344))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	245171
		lastStepMessage: 	nil
		lastCycleTime: 	245193
		alarms: 	a Heap()
		lastAlarmTime: 	245171
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(174325760) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	245171
		lastStepMessage: 	nil
		lastCycleTime: 	245193
		alarms: 	a Heap()
		lastAlarmTime: 	245171
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	245171
		lastStepMessage: 	nil
		lastCycleTime: 	245193
		alarms: 	a Heap()
		lastAlarmTime: 	245171
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(174325760) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Graph(Object)>>doesNotUnderstand: #do:
Message>>sentTo:
Graph(Object)>>doesNotUnderstand: #do:
RTGroup>>elementsFromModels:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Graph>>do:
10 November 2015 7:12:53.356371 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Graph(Object)>>doesNotUnderstand: #do:
	Receiver: a Graph
	Arguments and temporary variables: 
		aMessage: 	do: [ :o | 
t := self elementFromModel: o.
t notNil
	ifTrue: [ answer...etc...
		exception: 	MessageNotUnderstood: Graph>>do:
		resumeValue: 	nil
	Receiver's instance variables: 
a Graph

Message>>sentTo:
	Receiver: do: [ :o | 
t := self elementFromModel: o.
t notNil
	ifTrue: [ answer add: t ] ]
	Arguments and temporary variables: 
		receiver: 	a Graph
	Receiver's instance variables: 
		selector: 	#do:
		args: 	an Array([ :o | 
t := self elementFromModel: o.
t notNil
	ifTrue: [ answe...etc...
		lookupClass: 	Graph


Graph(Object)>>doesNotUnderstand: #do:
	Receiver: a Graph
	Arguments and temporary variables: 
		aMessage: 	do: [ :o | 
t := self elementFromModel: o.
t notNil
	ifTrue: [ answer...etc...
		exception: 	MessageNotUnderstood: Graph>>do:
		resumeValue: 	MessageNotUnderstood: Graph>>do:
	Receiver's instance variables: 
a Graph

Message>>sentTo:
	Receiver: do: [ :o | 
t := self elementFromModel: o.
t notNil
	ifTrue: [ answer add: t ] ]
	Arguments and temporary variables: 
		receiver: 	a Graph
	Receiver's instance variables: 
		selector: 	#do:
		args: 	an Array([ :o | 
t := self elementFromModel: o.
t notNil
	ifTrue: [ answe...etc...
		lookupClass: 	Graph


Graph(Object)>>doesNotUnderstand: #do:
	Receiver: a Graph
	Arguments and temporary variables: 
		aMessage: 	do: [ :o | 
t := self elementFromModel: o.
t notNil
	ifTrue: [ answer...etc...
		exception: 	MessageNotUnderstood: Graph>>do:
		resumeValue: 	MessageNotUnderstood: Graph>>do:
	Receiver's instance variables: 
a Graph

RTGroup>>elementsFromModels:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		t: 	nil
		objects: 	a Graph
		answer: 	a RTGroup()
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
se...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
se...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.
'
		itsSelection: 	a Text for 'TestingGraph new test1.
'
		itsSelectionString: 	'TestingGraph new test1.
'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (793@50)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (793@50)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(111673344))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	246055
		lastStepMessage: 	nil
		lastCycleTime: 	246045
		alarms: 	a Heap()
		lastAlarmTime: 	246055
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	246055
		lastStepMessage: 	nil
		lastCycleTime: 	246045
		alarms: 	a Heap()
		lastAlarmTime: 	246055
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	246055
		lastStepMessage: 	nil
		lastCycleTime: 	246045
		alarms: 	a Heap()
		lastAlarmTime: 	246055
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Graph(Object)>>doesNotUnderstand: #do:
Message>>sentTo:
Graph(Object)>>doesNotUnderstand: #do:
Message>>sentTo:
Graph(Object)>>doesNotUnderstand: #do:
RTGroup>>elementsFromModels:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 7:12:54.998367 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
self halt ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
self halt ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	274
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
se...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
se...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.
'
		itsSelection: 	a Text for 'TestingGraph new test1.
'
		itsSelectionString: 	'TestingGraph new test1.
'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (793@50)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (793@50)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1066663936))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	247707
		lastStepMessage: 	nil
		lastCycleTime: 	247705
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	247707
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	247707
		lastStepMessage: 	nil
		lastCycleTime: 	247705
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	247707
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	247707
		lastStepMessage: 	nil
		lastCycleTime: 	247705
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	247707
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :subscriber | 
subscriber pub do: [ :topic | topic sub ].
self halt ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 7:15:18.582368 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
		topic: 	a Topic
	Receiver's instance variables: 
a Graph

OrderedCollection>>do:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		aBlock: 	[ :topic | 
topic sub.
self halt ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	274
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.

'
		itsSelection: 	a Text for 'TestingGraph new test1.

'
		itsSelectionString: 	'TestingGraph new test1.

'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (793@69)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (793@69)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(251658240))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	391289
		lastStepMessage: 	nil
		lastCycleTime: 	391289
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	391289
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	391309
		lastStepMessage: 	nil
		lastCycleTime: 	391309
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	391309
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	391309
		lastStepMessage: 	nil
		lastCycleTime: 	391309
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	391309
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
OrderedCollection>>do:
[ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 7:16:43.970367 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
		topic: 	a Topic
	Receiver's instance variables: 
a Graph

OrderedCollection>>do:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		aBlock: 	[ :topic | 
topic sub.
self halt ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	274
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.

'
		itsSelection: 	a Text for 'TestingGraph new test1.

'
		itsSelectionString: 	'TestingGraph new test1.

'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (793@69)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (793@69)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(183238656))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	476681
		lastStepMessage: 	nil
		lastCycleTime: 	476681
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	476681
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	476681
		lastStepMessage: 	nil
		lastCycleTime: 	476681
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	476681
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(25427968))(a DropListM...etc...
		lastStepTime: 	476681
		lastStepMessage: 	nil
		lastCycleTime: 	476681
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	476681
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
OrderedCollection>>do:
[ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 7:17:02.128372 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
		topic: 	a Topic
	Receiver's instance variables: 
a Graph

OrderedCollection>>do:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		aBlock: 	[ :topic | 
topic sub.
self halt ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	274
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.

'
		itsSelection: 	a Text for 'TestingGraph new test1.

'
		itsSelectionString: 	'TestingGraph new test1.

'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (793@69)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(385613824))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	494755
		lastStepMessage: 	nil
		lastCycleTime: 	494777
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	494755
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	494755
		lastStepMessage: 	nil
		lastCycleTime: 	494777
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	494755
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	494755
		lastStepMessage: 	nil
		lastCycleTime: 	494777
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	494755
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
OrderedCollection>>do:
[ :subscriber | 
subscriber pub
	do: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: OrderedCollection>>from:
10 November 2015 7:17:45.962369 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

OrderedCollection(Object)>>doesNotUnderstand: #from:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		aMessage: 	from: [ :topic | 
topic sub.
self halt ]
		exception: 	MessageNotUnderstood: OrderedCollection>>from:
		resumeValue: 	nil
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :subscriber | 
subscriber pub
	from: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub
	from: [ :topic | 
		topic sub.
		self halt ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	278
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	from: [ :topic | 
		topic sub...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	from: [ :topic | 
		topic sub...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.

'
		itsSelection: 	a Text for 'TestingGraph new test1.

'
		itsSelectionString: 	'TestingGraph new test1.

'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (793@69)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (793@69)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(385613824))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	538715
		lastStepMessage: 	nil
		lastCycleTime: 	538715
		alarms: 	a Heap()
		lastAlarmTime: 	538715
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	538715
		lastStepMessage: 	nil
		lastCycleTime: 	538715
		alarms: 	a Heap()
		lastAlarmTime: 	538715
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	538715
		lastStepMessage: 	nil
		lastCycleTime: 	538715
		alarms: 	a Heap()
		lastAlarmTime: 	538715
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
OrderedCollection(Object)>>doesNotUnderstand: #from:
[ :subscriber | 
subscriber pub
	from: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 7:21:06.44837 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
		topic: 	a Topic
	Receiver's instance variables: 
a Graph

OrderedCollection>>collect:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		aBlock: 	[ :topic | 
topic sub.
self halt ]
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	278
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic ...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic ...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.

'
		itsSelection: 	a Text for 'TestingGraph new test1.

'
		itsSelectionString: 	'TestingGraph new test1.

'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (793@69)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (793@69)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(846725120))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(127664128))(a SearchMorp...etc...
		lastStepTime: 	739157
		lastStepMessage: 	nil
		lastCycleTime: 	739157
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	739157
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(127664128))(a SearchMorp...etc...
		lastStepTime: 	739157
		lastStepMessage: 	nil
		lastCycleTime: 	739157
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	739157
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(127664128))(a SearchMorp...etc...
		lastStepTime: 	739157
		lastStepMessage: 	nil
		lastCycleTime: 	739157
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	739157
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
OrderedCollection>>collect:
[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 7:21:07.532372 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
		topic: 	a Topic
	Receiver's instance variables: 
a Graph

OrderedCollection>>collect:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		aBlock: 	[ :topic | 
topic sub.
self halt ]
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	278
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic ...etc...
		edges: 	a RTGroup()
		toElements: 	a RTGroup()
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	a RTGroup()
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic ...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.

'
		itsSelection: 	a Text for 'TestingGraph new test1.

'
		itsSelectionString: 	'TestingGraph new test1.

'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (793@69)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (793@69)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(846725120))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	740181
		lastStepMessage: 	nil
		lastCycleTime: 	740201
		alarms: 	a Heap()
		lastAlarmTime: 	740181
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(394526720) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	740181
		lastStepMessage: 	nil
		lastCycleTime: 	740201
		alarms: 	a Heap()
		lastAlarmTime: 	740181
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	740181
		lastStepMessage: 	nil
		lastCycleTime: 	740201
		alarms: 	a Heap()
		lastAlarmTime: 	740181
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(394526720) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
OrderedCollection>>collect:
[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 7:21:36.576368 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
		topic: 	a Topic
	Receiver's instance variables: 
a Graph

OrderedCollection>>collect:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		aBlock: 	[ :topic | 
topic sub.
self halt ]
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	278
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic ...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic ...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.

'
		itsSelection: 	a Text for 'TestingGraph new test1.

'
		itsSelectionString: 	'TestingGraph new test1.

'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@69)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (392@69)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(52953088))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	769289
		lastStepMessage: 	nil
		lastCycleTime: 	769289
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	769289
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	769289
		lastStepMessage: 	nil
		lastCycleTime: 	769289
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	769289
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	769289
		lastStepMessage: 	nil
		lastCycleTime: 	769289
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	769289
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
OrderedCollection>>collect:
[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 7:23:46.214368 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
		topic: 	a Topic
	Receiver's instance variables: 
a Graph

OrderedCollection>>collect:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		aBlock: 	[ :topic | 
topic sub.
self halt ]
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	278
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic ...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic ...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.

'
		itsSelection: 	a Text for 'TestingGraph new test1.

'
		itsSelectionString: 	'TestingGraph new test1.

'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@69)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (392@69)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(283901952))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	898927
		lastStepMessage: 	nil
		lastCycleTime: 	898927
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	898927
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	898927
		lastStepMessage: 	nil
		lastCycleTime: 	898927
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	898927
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	898927
		lastStepMessage: 	nil
		lastCycleTime: 	898927
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	898927
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
OrderedCollection>>collect:
[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 7:24:33.824368 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.

'
		itsSelection: 	a Text for 'TestingGraph new test1.

'
		itsSelectionString: 	'TestingGraph new test1.

'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@69)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (392@69)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(283901952))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	946495
		lastStepMessage: 	nil
		lastCycleTime: 	946515
		alarms: 	a Heap()
		lastAlarmTime: 	946495
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(348389376) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	946495
		lastStepMessage: 	nil
		lastCycleTime: 	946515
		alarms: 	a Heap()
		lastAlarmTime: 	946495
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	946495
		lastStepMessage: 	nil
		lastCycleTime: 	946515
		alarms: 	a Heap()
		lastAlarmTime: 	946495
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(348389376) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: OrderedCollection>>self
10 November 2015 7:25:58.590369 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

OrderedCollection(Object)>>doesNotUnderstand: #self
	Receiver: an OrderedCollection(a Node)
	Arguments and temporary variables: 
		aMessage: 	self
		exception: 	MessageNotUnderstood: OrderedCollection>>self
		resumeValue: 	nil
	Receiver's instance variables: 
		array: 	an Array(a Node nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :topic | topic sub self halt ] in [ :subscriber | subscriber pub collect: [ :topic | topic sub self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
		topic: 	a Topic
	Receiver's instance variables: 
a Graph

OrderedCollection>>collect:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		aBlock: 	[ :topic | topic sub self halt ]
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :subscriber | subscriber pub collect: [ :topic | topic sub self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | subscriber pub collect: [ :topic | topic sub self halt ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	282
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | subscriber pub collect: [ :topic | topic sub s...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | subscriber pub collect: [ :topic | topic sub s...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.

'
		itsSelection: 	a Text for 'TestingGraph new test1.

'
		itsSelectionString: 	'TestingGraph new test1.

'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@69)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (392@69)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(283901952))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1031311
		lastStepMessage: 	nil
		lastCycleTime: 	1031301
		alarms: 	a Heap()
		lastAlarmTime: 	1031311
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1031311
		lastStepMessage: 	nil
		lastCycleTime: 	1031301
		alarms: 	a Heap()
		lastAlarmTime: 	1031311
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1031311
		lastStepMessage: 	nil
		lastCycleTime: 	1031301
		alarms: 	a Heap()
		lastAlarmTime: 	1031311
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
OrderedCollection(Object)>>doesNotUnderstand: #self
[ :topic | topic sub self halt ] in [ :subscriber | subscriber pub collect: [ :topic | topic sub self halt ] ] in Graph>>createGraph:
OrderedCollection>>collect:
[ :subscriber | subscriber pub collect: [ :topic | topic sub self halt ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: OrderedCollection>>self
10 November 2015 7:26:06.680367 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

OrderedCollection(Object)>>doesNotUnderstand: #self
	Receiver: an OrderedCollection(a Node)
	Arguments and temporary variables: 
		aMessage: 	self
		exception: 	MessageNotUnderstood: OrderedCollection>>self
		resumeValue: 	nil
	Receiver's instance variables: 
		array: 	an Array(a Node nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :topic | topic sub self halt ] in [ :subscriber | subscriber pub collect: [ :topic | topic sub self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
		topic: 	a Topic
	Receiver's instance variables: 
a Graph

OrderedCollection>>collect:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		aBlock: 	[ :topic | topic sub self halt ]
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :subscriber | subscriber pub collect: [ :topic | topic sub self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | subscriber pub collect: [ :topic | topic sub self halt ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	282
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | subscriber pub collect: [ :topic | topic sub s...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | subscriber pub collect: [ :topic | topic sub s...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.

'
		itsSelection: 	a Text for 'TestingGraph new test1.

'
		itsSelectionString: 	'TestingGraph new test1.

'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@69)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (392@69)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1064828928))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1039393
		lastStepMessage: 	nil
		lastCycleTime: 	1039391
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	1039393
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1039393
		lastStepMessage: 	nil
		lastCycleTime: 	1039391
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	1039393
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1039393
		lastStepMessage: 	nil
		lastCycleTime: 	1039391
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	1039393
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
OrderedCollection(Object)>>doesNotUnderstand: #self
[ :topic | topic sub self halt ] in [ :subscriber | subscriber pub collect: [ :topic | topic sub self halt ] ] in Graph>>createGraph:
OrderedCollection>>collect:
[ :subscriber | subscriber pub collect: [ :topic | topic sub self halt ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 7:26:21.814367 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
		topic: 	a Topic
	Receiver's instance variables: 
a Graph

OrderedCollection>>collect:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		aBlock: 	[ :topic | 
topic sub.
self halt ]
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	278
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic ...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic ...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.

'
		itsSelection: 	a Text for 'TestingGraph new test1.

'
		itsSelectionString: 	'TestingGraph new test1.

'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@69)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (392@69)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(597950464))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1054525
		lastStepMessage: 	nil
		lastCycleTime: 	1054523
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	1054525
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1054525
		lastStepMessage: 	nil
		lastCycleTime: 	1054523
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	1054525
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1054525
		lastStepMessage: 	nil
		lastCycleTime: 	1054523
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	1054525
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
OrderedCollection>>collect:
[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 7:26:48.406367 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
		topic: 	a Topic
	Receiver's instance variables: 
a Graph

OrderedCollection>>collect:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		aBlock: 	[ :topic | 
topic sub.
self halt ]
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	278
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic ...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic ...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.

'
		itsSelection: 	a Text for 'TestingGraph new test1.

'
		itsSelectionString: 	'TestingGraph new test1.

'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@69)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (392@69)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(597950464))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	1081081
		lastStepMessage: 	nil
		lastCycleTime: 	1081101
		alarms: 	a Heap()
		lastAlarmTime: 	1081081
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(776208384) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	1081081
		lastStepMessage: 	nil
		lastCycleTime: 	1081101
		alarms: 	a Heap()
		lastAlarmTime: 	1081081
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(680787968))(a SearchMorp...etc...
		lastStepTime: 	1081081
		lastStepMessage: 	nil
		lastCycleTime: 	1081101
		alarms: 	a Heap()
		lastAlarmTime: 	1081081
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(776208384) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
OrderedCollection>>collect:
[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
10 November 2015 7:27:50.418367 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
		topic: 	a Topic
	Receiver's instance variables: 
a Graph

OrderedCollection>>collect:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		aBlock: 	[ :topic | 
topic sub.
self halt ]
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
		subscriber: 	a Node
	Receiver's instance variables: 
a Graph

BlockClosure>>rtValue:
	Receiver: [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a Node
	Receiver's instance variables: 
		outerContext: 	Graph>>createGraph:
		startpc: 	278
		numArgs: 	1


[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic ...etc...
		edges: 	a RTGroup()
		toElements: 	nil
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil


RTEdgeBuilder>>connectToAll:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElements: 	nil
		aBlockOrASymbol: 	[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic ...etc...
		edges: 	a RTGroup()
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTArrowedLine
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
		elementsToLookup: 	nil
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true


Graph>>createGraph:
	Receiver: a Graph
	Arguments and temporary variables: 
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		v: 	a RTView
		eb: 	a RTEdgeBuilder
		arrow: 	a RTArrowedLine
		layout: 	nil
		stepping: 	nil
	Receiver's instance variables: 
a Graph

TestingGraph>>test1
	Receiver: a TestingGraph
	Arguments and temporary variables: 
		nodeA: 	a Node
		nodeB: 	a Node
		nodeC: 	a Node
		nodeD: 	a Node
		nodeArray: 	an OrderedCollection(a Node a Node a Node a Node)
		graph: 	a Graph
		topic1: 	a Topic
		topic2: 	a Topic
	Receiver's instance variables: 
a TestingGraph

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'TestingGraph new test1.

'
		itsSelection: 	a Text for 'TestingGraph new test1.

'
		itsSelectionString: 	'TestingGraph new test1.

'
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestingGraph new test1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1049886720)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1049886720)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (392@69)
		owner: 	a TransformWithLayoutMorph(491782144)
		submorphs: 	an Array(a RubPrimarySelectionMorph(78381056) a RubCursor(428605440)...etc...
		fullBounds: 	(0@0) corner: (392@69)
		color: 	Color transparent
		extension: 	a MorphExtension (442236928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(453509120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(428605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(85196800))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(369885184)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1143127
		lastStepMessage: 	nil
		lastCycleTime: 	1143127
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	1143127
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1143127
		lastStepMessage: 	nil
		lastCycleTime: 	1143127
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	1143127
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1143127
		lastStepMessage: 	nil
		lastCycleTime: 	1143127
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(428605440)))
		lastAlarmTime: 	1143127
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :topic | 
topic sub.
self halt ] in [ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
OrderedCollection>>collect:
[ :subscriber | 
subscriber pub
	collect: [ :topic | 
		topic sub.
		self halt ] ] in Graph>>createGraph:
BlockClosure>>rtValue:
[ :e | 
toElements := self elementsToLookup elementsFromModels: (aBlockOrASymbol rtValue: e model).
toElements ifNotNil: [ toElements do: [ :toE | edges add: (self edgeFrom: e to: toE) ] ] ] in RTEdgeBuilder>>connectToAll:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectToAll:
Graph>>createGraph:
TestingGraph>>test1
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 4
10 November 2015 7:33:18.992367 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40623]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#selectBlock #newCollection #element)
	Arguments and temporary variables: 
		index: 	4
	Receiver's instance variables: 
#(#selectBlock #newCollection #element)

Array(Object)>>at:
	Receiver: #(#selectBlock #newCollection #element)
	Arguments and temporary variables: 
		index: 	4
	Receiver's instance variables: 
#(#selectBlock #newCollection #element)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	4
		aContext: 	OrderedCollection>>select:
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	select: selectBlock
	"Optimized version of Collection>>#select: "

...etc...


Context>>namedTempAt:
	Receiver: OrderedCollection>>select:
	Arguments and temporary variables: 
		index: 	4
	Receiver's instance variables: 
		sender: 	Node>>DoIt
		pc: 	36
		stackp: 	5
		method: 	OrderedCollection>>#select:
		closureOrNil: 	nil
		receiver: 	an OrderedCollection(a Topic)


OrderedCollection>>ExecuteUnOptimizedIn:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		t1: 	OrderedCollection>>select:
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


OrderedCollection(Object)>>mustBeBooleanInMagic:
	Receiver: an OrderedCollection(a Node)
	Arguments and temporary variables: 
		context: 	OrderedCollection>>select:
		sendNode: 	RBMessageNode((selectBlock value: (element := array at: index))
	ifTr...etc...
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	OrderedCollection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		array: 	an Array(a Node nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


OrderedCollection(Object)>>mustBeBoolean
	Receiver: an OrderedCollection(a Node)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	an Array(a Node nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


OrderedCollection>>select:
	Receiver: an OrderedCollection(a Topic)
	Arguments and temporary variables: 
		selectBlock: 	[ :topic | topic sub ]
		newCollection: 	an OrderedCollection()
		element: 	a Topic
	Receiver's instance variables: 
		array: 	an Array(a Topic nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


Node>>DoIt
	Receiver: a Node
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nodeName: 	'B'
		sub: 	an OrderedCollection(a Topic)
		pub: 	an OrderedCollection(a Topic)


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'a:=self pub select: [:topic | topic sub.].
a.'
		itsSelection: 	a Text for 'a:=self pub select: [:topic | topic sub.].
a.'
		itsSelectionString: 	'a:=self pub select: [:topic | topic sub.].
a.'
	Receiver's instance variables: 
		ast: 	DoIt
	a := self pub select: [ :topic | topic sub ].
	^ a
		source: 	a ReadStream
		context: 	nil
		receiver: 	a Node
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	a Node
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(603193344)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(603193344)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(594804736)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(603193344)
	Arguments and temporary variables: 
		editBlock: 	[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
tex...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (382@69)
		owner: 	a TransformWithLayoutMorph(704643072)
		submorphs: 	an Array(a RubPrimarySelectionMorph(38273024) a RubCursor(33030144) ...etc...
		fullBounds: 	(0@0) corner: (382@69)
		color: 	Color transparent
		extension: 	a MorphExtension (28573696) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(684457984)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(33030144)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(519569408))
		getMenuPolicy: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoPlaygroundRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(594804736)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor ...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1471701
		lastStepMessage: 	nil
		lastCycleTime: 	1471701
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(33030144)))
		lastAlarmTime: 	1471701
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1471701
		lastStepMessage: 	nil
		lastCycleTime: 	1471701
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(33030144)))
		lastAlarmTime: 	1471701
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	a FormCanvas on: DisplayScreen(1855x1056x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(83361792))(a TRMorph(8336179...etc...
		lastStepTime: 	1471701
		lastStepMessage: 	nil
		lastCycleTime: 	1471701
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(33030144)))
		lastAlarmTime: 	1471701
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a GLMSystemWindow(623902720) a Na...etc...
		fullBounds: 	(0@0) corner: (1855@1056)
		color: 	(Color r: 0.785 g: 0.781 b: 0.781 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
OrderedCollection>>ExecuteUnOptimizedIn:
OrderedCollection(Object)>>mustBeBooleanInMagic:
OrderedCollection(Object)>>mustBeBoolean
OrderedCollection>>select:
Node>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ 
textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ 
textMorph textArea
	handleEdit: [ 
		textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoPlaygroundRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

