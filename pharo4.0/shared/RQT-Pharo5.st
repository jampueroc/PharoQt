Object subclass: #Graph	instanceVariableNames: 'data view showNodeNames pubOrSub'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!Graph methodsFor: 'visualization' stamp: 'Grupoasdf 11/12/2015 17:01'!getSub: node	|res|	res:= OrderedCollection new.	(node pub) collect: [:topic | (topic sub) collect:[:sub | res add:sub ] ].	^res! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdasdgf 12/8/2015 14:29'!createGraph: nodeArray withView: aView	view := aView.	view @ RTDraggableView @RTZoomableView.	self data: nodeArray.	self addNodesFrom: nodeArray.	self connectNodesFrom: nodeArray.	self addLabel.	self addInteractions.	self addLayout.	^ view! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdasdgf 12/8/2015 14:40'!withNameTopic: anEdge	^ showNodeNames		ifTrue: [  anEdge @ (RTPopup text: (self getTopic: anEdge) objName) ]		ifFalse: [(self getTopic: anEdge).  anEdge ]! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdasdgf 12/7/2015 18:16'!nodesSubscribedTo: node	|res|	res:= OrderedCollection new.	(node pub) collect: [:topic | topic show = true		ifTrue:[(topic sub) collect:[:sub | res add:sub ] ] ].	^res! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdf 11/12/2015 17:37'!addLayout: view	|layout stepping|	layout := RTForceBasedLayout new		charge: -450;		length: 100.	layout on: view elements.	layout initialLayout: RTSugiyamaLayout new.	stepping := RTSpringLayoutStepping new		view: view;		layout: layout;		afterBlock: [ view canvas camera focusOnCenter ].	view addAnimation: stepping.	^view.	! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdasdgf 12/8/2015 11:45'!withNameNode: elem	^ showNodeNames		ifTrue: [elem @ (RTLabelled new textElement: elem model objName)]		ifFalse: [elem]! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdasdgf 12/8/2015 14:48'!getTopic: anEdge	| initialNode finalNode subscribers |	initialNode :=anEdge model key.	finalNode :=anEdge model value.	subscribers := OrderedCollection new.		initialNode pub		collect: [ :topic | 			topic sub				collect: [ :sub | 					sub == finalNode						ifTrue: [ subscribers add: topic ] ] ].	subscribers		collect: [ :topic | 					anEdge topic: topic.			(topic isOnGraph or: topic show not)				ifFalse: [ 					topic isOnGraph: true.					^ topic ] ].	^ subscribers first! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdf 11/12/2015 17:45'!edgesAndNodes: view	| arrow edgeB |	arrow := RTArrowedLine new withOffsetIfMultiple width: 2; color: Color black.	edgeB := RTEdgeBuilder new.	edgeB view: view.	edgeB shapeBuilder: arrow.	^edgeB! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdasdgf 12/7/2015 18:03'!createGraph: nodeArray	| v |	self data: nodeArray. 	v := RTView new.	v @ RTDraggableView.	^ self createGraph: data  withView: v! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdasdgf 12/8/2015 14:52'!addLabel.	view elements do:[:elem |self withNameNode: elem].	view edges do:[:elem | self withNameTopic: elem ].! !!Graph methodsFor: 'visualization' stamp: 'GrupoASDF 11/26/2015 17:37'!update: aParameter	^ super update: aParameter	! !!Graph methodsFor: 'initialization' stamp: 'Grupoasdf 12/8/2015 20:16'!initialize	super initialize.	data:= OrderedCollection new.	showNodeNames := true.	pubOrSub :=true.! !!Graph methodsFor: 'accessing' stamp: 'Grupoasdf 12/8/2015 19:01'!pubOrSub	^ pubOrSub! !!Graph methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 17:42'!data	^ data! !!Graph methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 17:42'!data: anObject	data := anObject! !!Graph methodsFor: 'accessing' stamp: 'Grupoasdasdgf 11/30/2015 17:44'!view	^ view! !!Graph methodsFor: 'accessing' stamp: 'Grupoasdasdgf 11/30/2015 17:44'!view: anObject	view := anObject! !!Graph methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/7/2015 18:22'!names	^ showNodeNames! !!Graph methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/7/2015 18:22'!names: anObject	showNodeNames := anObject! !!Graph methodsFor: 'accessing' stamp: 'Grupoasdf 12/8/2015 19:01'!pubOrSub: anObject	pubOrSub := anObject! !!Graph methodsFor: 'Building graph' stamp: 'Grupoasdasdgf 12/8/2015 14:10'!edgesAndNodes	| arrow edgeB |	"arrow := RTArrowedLine new withOffsetIfMultiple width: 2; color: Color black."	arrow := RQTArrowedLine new withOffsetIfMultiple width: 2; color: Color black; attachPoint: RTCenteredAttachPoint instance.	edgeB := RTEdgeBuilder new.	edgeB view: view.	edgeB moveBehind.	edgeB shapeBuilder: arrow.	^edgeB! !!Graph methodsFor: 'Building graph' stamp: 'Grupoasdf 12/8/2015 19:07'!getMaxPubSub: nodeArray	|nodeMax|	nodeMax:= 0.	pubOrSub='sub'	ifTrue:[nodeArray do: [:aNode | aNode sub size > nodeMax			ifTrue:[nodeMax:=aNode sub size]]]	ifFalse:[nodeArray do: [:aNode | aNode pub size > nodeMax			ifTrue:[nodeMax:=aNode pub size]]].	^nodeMax.		! !!Graph methodsFor: 'Building graph' stamp: 'Grupoasdf 12/8/2015 20:01'!getMinMaxPubSub: nodeArray	|nodeMin nodeMax|	nodeMax:= self getMaxPubSub: nodeArray.	nodeMin:= nodeMax.	pubOrSub='sub'	ifTrue:[nodeArray do: [:aNode | aNode sub size < nodeMin			ifTrue:[nodeMin:=aNode sub size]]]	ifFalse:[nodeArray do: [:aNode | aNode pub size < nodeMin			ifTrue:[nodeMin:=aNode pub size]]].	^{nodeMin.nodeMax}.		! !!Graph methodsFor: 'Building graph' stamp: 'Grupoasdasdgf 12/7/2015 18:16'!connectNodesFrom: nodeArray	self edgesAndNodes		objects: nodeArray;		connectFrom: [ :publisher | publisher ] toAll: [ :sub | self nodesSubscribedTo: sub ]! !!Graph methodsFor: 'Building graph' stamp: 'Grupoasdf 12/8/2015 19:54'!addNodesFrom: nodeArray	view			addAll:				((RTEllipse new					size: 50 ;					color: [ :node |node nodeColor:(self getMinMaxPubSub: nodeArray) with:self pubOrSub ])elementsOn: (nodeArray select: [ :node | node show ])).! !!Graph methodsFor: 'Building graph' stamp: 'Grupoasdasdgf 12/8/2015 13:55'!addLayout	|layout |	layout := RTForceBasedLayout new		charge: -2000;		length: 100.	layout on: view elements.	layout initialLayout: RTRadialTreeLayout new.	"	stepping := RTSpringLayoutStepping new		view: view;		layout: layout;		afterBlock: [ view canvas camera focusOnCenter ].	view addAnimation: stepping."! !!Graph methodsFor: 'Building graph' stamp: 'Grupoasdasdgf 12/8/2015 13:57'!addInteractions	"Nodes"	view elements		do: [ :element | 			element @ RTDraggable.			element when: TRMouseClick do: [ :e | (DataWindow new data: element model) openWithSpec ] ].			"Topics"	view edges		do: [ :edge | 			self withNameTopic: edge.			edge				when: TRMouseClick				do: [ :e |					(DataWindow new data: edge topic) openWithSpec.] ].! !RTEdge subclass: #RQTEdge	instanceVariableNames: 'topic'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!RQTEdge methodsFor: 'as yet unclassified' stamp: 'Grupoasdasdgf 12/8/2015 13:23'!initialize	super initialize! !!RQTEdge methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/8/2015 13:24'!topic	^ topic! !!RQTEdge methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/8/2015 13:24'!topic: anObject	topic := anObject! !Object subclass: #Adapter	instanceVariableNames: 'topics nodes'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!Adapter methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/3/2015 18:02'!createTopic: aTopicName	|exist|	exist :=(self topics select:[:aTopic | (aTopic objName) = aTopicName]).	exist	ifEmpty: [^(Topic new objName: aTopicName).].	^ exist first.	! !!Adapter methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/3/2015 18:03'!topics	^ topics! !!Adapter methodsFor: 'accessing' stamp: 'Jorge 12/6/2015 19:24'!createNode: aNodeName	|exist newNode|	exist :=(self nodes select:[:aNode | (aNode objName) = aNodeName]).	exist size == 0	ifTrue: [newNode :=(Node new objName: aNodeName). self addNewNode:newNode. ^newNode].	^ exist first.	! !!Adapter methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/3/2015 18:03'!nodes	^ nodes! !!Adapter methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/3/2015 18:03'!nodes: anObject	nodes := anObject! !!Adapter methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/3/2015 18:03'!topics: anObject	topics := anObject! !!Adapter methodsFor: 'accessing' stamp: 'Jorge 12/6/2015 18:52'!addNewNode: aNode	self nodes add:aNode.! !!Adapter methodsFor: 'getting Info' stamp: 'Grupoasdasdgf 12/8/2015 12:28'!getData	self getInfoNode.		self getInfoTopic.		^nodes.! !!Adapter methodsFor: 'getting Info' stamp: 'Grupoasdasdgf 12/8/2015 12:38'!getNodesSubToTopics: systemState	|newTopic newNode |	systemState third second do: [: expr |		newTopic:= self createTopic: (expr first).		(expr second) do:[:aNode |			newNode:= self createNode:aNode. 			newTopic sub: newNode.].		topics add: newTopic ].! !!Adapter methodsFor: 'getting Info' stamp: 'Grupoasdasdgf 12/8/2015 12:37'!getInfoNode	| proxy systemState|	proxy := XMLRPCProxy withUrl: 'http://localhost:11311'.	systemState := proxy invokeMethod: 'getSystemState' withArgs: {'/script'}.	self getNodesPubToTopics: systemState.	self getNodesSubToTopics: systemState.! !!Adapter methodsFor: 'getting Info' stamp: 'Grupoasdasdgf 12/8/2015 12:24'!getInfoTopic	| proxy systemState |	proxy := XMLRPCProxy withUrl: 'http://localhost:11311'.	systemState := proxy invokeMethod: 'getTopicTypes' withArgs: {'/script'}.	systemState third do:[:topicList | (topics do: [:aTopic | aTopic objName = topicList first			ifTrue: [aTopic type: topicList second]])]. ! !!Adapter methodsFor: 'getting Info' stamp: 'Grupoasdasdgf 12/8/2015 12:38'!getNodesPubToTopics: systemState	| newTopic newNode |	systemState third first do: [:expr | 		newTopic:=  self createTopic: (expr first). 		(expr second) do:[:aNode | 			newNode:= self createNode:aNode. 			newNode pub:newTopic. ].		topics add: newTopic ].	! !!Adapter methodsFor: 'initialization' stamp: 'Grupoasdasdgf 12/3/2015 17:45'!initialize	topics:= OrderedCollection new.	nodes := OrderedCollection new.	! !ComposableModel subclass: #RQTGMainWindow	instanceVariableNames: 'showName hideNodes hideTopics graph data hide graphObj refresh colorBy'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!RQTGMainWindow methodsFor: 'initialization' stamp: 'Grupoasdasdgf 12/8/2015 11:39'!selectTopics	|topics|	topics := OrderedCollection new.	data collect:[:node | node pub collect: [:topic | (topics includes: topic) ifFalse:[topics add:topic]  ] ].	^topics. ! !!RQTGMainWindow methodsFor: 'initialization' stamp: 'GrupoASDF 11/26/2015 17:28'!initialize	hide := HideWindow new.	hide mainWindow: self.	super initialize! !!RQTGMainWindow methodsFor: 'initialization' stamp: 'Grupoasdasdgf 12/8/2015 14:53'!initializeWidgets		self initializeButtons.		data := OrderedCollection new.		graph := self instantiate: RoassalModel.	self title: 'RQT-GraPharo'.	graph		script: [ :view :canvas | 			self graphObj: Graph new.			self graphObj createGraph: data withView: view.]! !!RQTGMainWindow methodsFor: 'initialization' stamp: 'Grupoasdasdgf 12/8/2015 14:52'!graphUpdate	graph		script: [ :view :canvas | 			view cleanAll.			self graphObj createGraph: data withView: view.]! !!RQTGMainWindow methodsFor: 'initialization' stamp: 'Grupoasdasdgf 12/1/2015 17:30'!listChangeTopics: nameObj with: value	data do:[:item | item sub do: [ :topic |  topic objName = nameObj		ifTrue: [ topic show:value. ].		topic isOnGraph: false.   ].	]! !!RQTGMainWindow methodsFor: 'initialization' stamp: 'Grupoasdf 12/8/2015 20:09'!initializeButtons	refresh:= self newButton .	refresh label:'Refresh'.		colorBy:= self newButton.	colorBy label: 'Color by Subscribers'.		hideNodes := self newButton.		hideTopics := self newButton.		showName := self newCheckBox.		showName label: 'showName'.		showName state: true.			hideNodes label: 'Nodes'.		hideTopics label: 'Topics'.		hideNodes			action: [ 				hide nodeOrTopic: 'node'.				hide list: self data.				hide hasWindow  					ifFalse:[hide openWithSpec]].		hideTopics			action: [ 				hide nodeOrTopic: 'topic'.				hide list: self selectTopics.				hide hasWindow  					ifFalse:[hide openWithSpec]].! !!RQTGMainWindow methodsFor: 'initialization' stamp: 'Grupoasdf 12/8/2015 20:16'!initializePresenter	showName		whenChangedDo: [ 			graphObj names: graphObj names not.			self graphUpdate.].	refresh action:[		self data:Adapter new getData.		self graphUpdate.		].	colorBy action:[		self graphObj pubOrSub		ifTrue:[ self graphObj pubOrSub: true.			colorBy label: 'Color by Subscribers'.			self halt.			self graphUpdate.]		ifFalse:[self graphObj pubOrSub: false.			colorBy label: 'Color by Publishers'.			self graphUpdate.].]! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/1/2015 18:36'!listChange: nameObj with: value	data do:[:item | (item objName) = nameObj		ifTrue: [ item show:value ].		   ].! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!hideNodes	^ hideNodes! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 11/30/2015 17:02'!graphObj	^ graphObj! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 11/30/2015 17:02'!graphObj: anObject	graphObj := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:59'!data: anObject	data := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!refreshButton	^ refreshButton! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 12/8/2015 18:42'!refresh: anObject	refresh := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!hideNodes: anObject	hideNodes := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!showData: anObject	showData := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!showName: anObject	showName := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!refreshButton: anObject	refreshButton := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!graph	^ graph! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:59'!data	^ data! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!showData	^ showData! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!showName	^ showName! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!graph: anObject	graph := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!hideTopics	^ hideTopics! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 12/8/2015 18:42'!refresh	^ refresh! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!hideTopics: anObject	hideTopics := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 12/8/2015 20:05'!colorBy	^ colorBy! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 12/8/2015 20:05'!colorBy: anObject	colorBy := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RQTGMainWindow class	instanceVariableNames: ''!!RQTGMainWindow class methodsFor: 'specs' stamp: 'Grupoasdf 12/8/2015 20:06'!defaultSpec 	<spec: #default>	^ SpecLayout composed		newColumn: [:tcol|			tcol newRow: [:trow|						trow add:#refresh; add: #showName; add:#colorBy; 							add: #hideNodes; add: #hideTopics] height: self toolbarHeight  ;					newRow: [:trow|						trow add: #graph]]! !Object subclass: #TestingGraph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!TestingGraph methodsFor: 'Testing graph' stamp: 'Grupoasdasdgf 11/30/2015 18:02'!testMainWindow2	|nodeA nodeB nodeC nodeD topic1 topic2 topic3 topic4 nodeArray graph|	nodeA := Node new.	nodeB := Node new.	nodeC := Node new.	nodeD := Node new.	topic1 := Topic new.	topic2 := Topic new.	topic3 := Topic new.	topic4 := Topic new.		nodeA objName: 'A'.	nodeB objName: 'B'.	nodeC objName: 'C'.	nodeD objName: 'D'.		topic1 objName: 'Holi'.	topic2 objName: 'Bye'.	topic3 objName: 'Hello'.	topic4 objName: 'Hi'.		nodeA pub: topic1.	nodeB pub: topic2.	nodeA pub: topic3.	nodeA pub: topic4.		topic1 sub: nodeC.	topic3 sub: nodeC.	topic4 sub: nodeC.	topic2 sub: nodeA.		nodeArray := OrderedCollection new.	nodeArray add: nodeA.	nodeArray add: nodeB.	nodeArray add: nodeC.	nodeArray add: nodeD.	graph := RQTGMainWindow new .	graph data:nodeArray.	^graph openWithSpec.! !!TestingGraph methodsFor: 'Testing graph' stamp: 'Jorge 12/6/2015 19:27'!testMainWindow3	|nodeArray graph|	nodeArray := Adapter new getData .	graph := RQTGMainWindow new .	graph data:nodeArray.	^graph openWithSpec.! !!TestingGraph methodsFor: 'Testing graph' stamp: 'Jorge 12/6/2015 19:33'!test4	|nodeA nodeB nodeC nodeD topic1 nodeArray graph|	nodeA := Node new.	nodeB := Node new.	nodeC := Node new.	nodeD := Node new.	topic1 := Topic new.		nodeA objName: 'A'.	nodeB objName: 'B'.	nodeC objName: 'C'.	nodeD objName: 'D'.		topic1 objName: 'Holi'.		nodeA pub: topic1.	nodeB pub: topic1.	nodeD pub: topic1.		topic1 sub: nodeC.		nodeArray := OrderedCollection new.	nodeArray add: nodeA.	nodeArray add: nodeB.	nodeArray add: nodeC.	nodeArray add: nodeD.	graph := Graph new.	^graph createGraph: nodeArray.! !!TestingGraph methodsFor: 'Testing graph' stamp: 'Grupoasdf 11/23/2015 18:18'!test1	|nodeA nodeB nodeC nodeD nodeArray graph topic1 topic2 |	nodeA := Node new.	nodeB := Node new.	nodeC := Node new.	nodeD := Node new.	topic1 := Topic new.	topic2 := Topic new.		nodeA objName: 'A'.	nodeB objName: 'B'.	nodeC objName: 'C'.	nodeD objName: 'D'.		topic1 objName: 'Holi'.	topic2 objName: 'Bye'.	nodeA pub: topic1.	nodeB pub: topic2.		topic1 sub: nodeB.	topic2 sub: nodeC.		nodeArray := OrderedCollection new.	nodeArray add: nodeA.	nodeArray add: nodeB.	nodeArray add: nodeC.	nodeArray add: nodeD.	graph := Graph new.	^graph createGraph: nodeArray.! !!TestingGraph methodsFor: 'Testing graph' stamp: 'Grupoasdf 11/23/2015 18:18'!test2	|nodeA nodeB nodeC nodeD topic1 topic2 topic3 topic4 nodeArray graph|	nodeA := Node new.	nodeB := Node new.	nodeC := Node new.	nodeD := Node new.	topic1 := Topic new.	topic2 := Topic new.	topic3 := Topic new.	topic4 := Topic new.		nodeA objName: 'A'.	nodeB objName: 'B'.	nodeC objName: 'C'.	nodeD objName: 'D'.		topic1 objName: 'Holi'.	topic2 objName: 'Bye'.	topic3 objName: 'Hello'.	topic4 objName: 'Hi'.		nodeA pub: topic1.	nodeB pub: topic2.	nodeA pub: topic3.	nodeA pub: topic4.		topic1 sub: nodeC.	topic3 sub: nodeC.	topic4 sub: nodeC.	topic2 sub: nodeA.		nodeArray := OrderedCollection new.	nodeArray add: nodeA.	nodeArray add: nodeB.	nodeArray add: nodeC.	nodeArray add: nodeD.	graph := Graph new.	^graph createGraph: nodeArray.! !!TestingGraph methodsFor: 'Testing graph' stamp: 'Grupoasdf 11/23/2015 18:18'!testMainWindow1	| nodeA nodeB nodeC nodeD topic1 topic2 nodeArray graph |	nodeA := Node new.	nodeB := Node new.	nodeC := Node new.	nodeD := Node new.	topic1 := Topic new.	topic2 := Topic new.		nodeA objName: 'A'.	nodeB objName: 'B'.	nodeC objName: 'C'.	nodeD objName: 'D'.		topic1 objName: 'Holi'.	topic2 objName: 'Bye'.	nodeA pub: topic1.	nodeB pub: topic2.		topic1 sub: nodeB.	topic2 sub: nodeC.		nodeArray := OrderedCollection new.	nodeArray add: nodeA.	nodeArray add: nodeB.	nodeArray add: nodeC.	nodeArray add: nodeD.	graph := RQTGMainWindow new .	graph data:nodeArray.	^graph openWithSpec.! !!TestingGraph methodsFor: 'Testing graph' stamp: 'Jorge 12/6/2015 19:14'!test3	"flecha a si misma >.<"	|nodeA  nodeArray graph topic1  |	nodeA := Node new.	topic1 := Topic new.		nodeA objName: 'A'.		topic1 objName: 'Holi'.	nodeA pub: topic1.	nodeA sub: topic1.			nodeArray := OrderedCollection new.	nodeArray add: nodeA.	graph := Graph new.	^graph createGraph: nodeArray.! !ComposableModel subclass: #HideWindow	instanceVariableNames: 'list labelSearch search hideMenu clearSearchButton hideButton showButton mainWindow nodeOrTopic'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!HideWindow methodsFor: 'private' stamp: 'Grupoasdf 11/24/2015 18:13'!setListMenu	hideMenu items:self list.! !!HideWindow methodsFor: 'private' stamp: 'Grupoasdf 11/23/2015 18:36'!setFilter: aFilterText	aFilterText isEmpty		ifTrue: [ self hideMenu resetFilteringBlock ]		ifFalse: [ self hideMenu				filteringBlock: [ :items | items select: [ :item | 						(self wrapItem: item) anySatisfy: [ :s | s includesSubstring: aFilterText caseSensitive: false ] ] ] ]! !!HideWindow methodsFor: 'private' stamp: 'Grupoasdasdgf 12/1/2015 17:10'!listChange: nameObj with: value	list do:[:item | (item objName) = nameObj		ifTrue: [ item show:value.]		  ].	self setListMenu.	(self nodeOrTopic = 'node')	ifTrue: [	mainWindow listChange: nameObj with: value.]	ifFalse: [mainWindow listChangeTopics: nameObj with: value.].	! !!HideWindow methodsFor: 'private' stamp: 'Grupoasdf 11/24/2015 18:11'!wrapItem: aNodeOrTopic	^ { aNodeOrTopic objName . aNodeOrTopic show asString }! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:27'!hideMenu: anObject	hideMenu := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!labelSearch: anObject	labelSearch := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:56'!clearSearchButton: anObject	clearSearchButton := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 17:25'!mainWindow: anObject	mainWindow := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/24/2015 18:01'!list: anObject	list := anObject.	self setListMenu.! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!search: anObject	search := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:56'!clearSearchButton	^ clearSearchButton! !!HideWindow methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 16:34'!hideButton	^ hideButton! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!labelSearch	^ labelSearch! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 11/30/2015 17:53'!nodeOrTopic: anObject	nodeOrTopic := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 16:30'!showButton: anObject	showButton := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 16:30'!showButton	^ showButton! !!HideWindow methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 16:30'!hideButton: anObject	hideButton := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:27'!hideMenu	^ hideMenu! !!HideWindow methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 17:25'!mainWindow	^ mainWindow! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!search	^ search! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!list	^ list! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 11/30/2015 17:53'!nodeOrTopic	^ nodeOrTopic! !!HideWindow methodsFor: 'initialization' stamp: 'Grupoasdasdgf 11/30/2015 18:05'!initializePresenter	|a|	search		whenTextChanged: [ :text | 			clearSearchButton enabled: text isEmpty not.			self setFilter: text ].	clearSearchButton action: [ search text: '' ].		showButton action: [a:=hideMenu selectedItems collect: [:item | item first ].								a do:[:ele  | self listChange:ele with:true ]. 	mainWindow graphUpdate.].	hideButton action: [a:=hideMenu selectedItems collect: [:item | item first ].								a do:[:ele  | self listChange:ele with:false ].	mainWindow graphUpdate.].! !!HideWindow methodsFor: 'initialization' stamp: 'GrupoASDF 11/26/2015 16:36'!initializeWidgets	labelSearch  := self newLabel.		search := self newTextInput.	search removeEntryCompletion.	search ghostText: 'Search'.	search autoAccept: true.		list:=OrderedCollection new.		hideMenu := self newMultiColumnList.	hideMenu items: (self list).	hideMenu displayBlock: [ :item | self wrapItem: item ].	hideMenu sortingBlock: [ :a :b | a objName < b objName ].	hideMenu menu: [ :m :s| self menu:m shifted:s].	hideMenu multiSelection:true.	clearSearchButton := self newButton.	clearSearchButton  icon: Smalltalk ui icons smallCancelIcon.	clearSearchButton enabled:false.		labelSearch label: 'Node/Topic:'.	hideButton := self newButton.	hideButton label: 'Hide'.	showButton := self newButton.		showButton label: 'Show'.				self title:'RQT-GraPharo/NodesAndTopics'.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HideWindow class	instanceVariableNames: ''!!HideWindow class methodsFor: 'spec' stamp: 'GrupoASDF 11/26/2015 16:36'!defaultSpec 	<spec: #default>	^ SpecLayout composed		newColumn: [:tcol|			tcol newRow: [:trow|						trow add:#labelSearch ; add: #search ; add: #clearSearchButton] height: self toolbarHeight;					newRow: [:trow|						trow add: #hideMenu];					newRow: [:trow|						trow add: #hideButton; add: #showButton]height: self toolbarHeight].! !Object subclass: #ROSAPI	instanceVariableNames: 'process thread lastMsg thread2'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!ROSAPI methodsFor: 'as yet unclassified' stamp: 'Jorge 12/6/2015 19:42'!echoProcessOfTopic:aTopic named:aName        ^PipeableOSProcess  command: ('rostopic echo ',aTopic,' __name:=',aName).! !!ROSAPI methodsFor: 'as yet unclassified' stamp: 'Jorge 12/6/2015 20:20'!echoTopic:aTopic        | helperString cr1 cr2 cr3 isFirst|        cr1 := ''.        cr2 := ''.        cr3 := ''.        isFirst := true.        helperString := ''.        thread := [process := (self echoProcessOfTopic:aTopic named:'echoManager') ] fork.        [process isNil] whileTrue: [Processor yield].        thread2 := [[ true ] whileTrue: [                        process atEnd ifFalse:                        [                                cr3 := cr2.                                cr2 := cr1.                                cr1 := process next.                                (cr1 == $- and: [cr2 == $- and:[cr3 == $-]])                                ifTrue:[                                        (isFirst)                                                ifTrue:[                                                        isFirst := false.                                                        helperString := ''.]                                                ifFalse:                                                [                                        lastMsg := helperString copyFrom:3 to: (helperString size -2).                                        helperString := ''.                                        ] ].                                helperString := helperString , cr1 asString.                        ]                        ]] fork.! !ComposableModel subclass: #DataWindow	instanceVariableNames: 'data dataType dataDetail'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!DataWindow methodsFor: 'initialization' stamp: 'Grupoasdasdgf 12/1/2015 18:14'!initializeWidgets	dataType := self newText.	dataType enabled: false.		dataDetail := self newText.	dataDetail enabled: false.		self title: 'Info Node/Topics'.! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/1/2015 18:13'!dataType: anObject	dataType := anObject! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/1/2015 18:13'!data	^ data! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/1/2015 18:13'!dataDetail: anObject	dataDetail := anObject! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/8/2015 14:07'!data: anObject	data := anObject.	dataType text: 'Name: ' ,data objName.	dataDetail text: self getDataText.! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/1/2015 18:13'!dataDetail	^ dataDetail! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/8/2015 15:25'!getDataText	data class == Node		ifTrue: [^'Publishers: ',Character cr asString, (self getPubText:data) ,'Subscribers:' ,Character cr asString,  (self getSubText:data)]		ifFalse: [^'Msg type: ',data type]. ! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/8/2015 15:23'!getPubText: aNode	|publ|	publ:=''.	aNode pub do:[:aTopic | publ:= publ,'	', (aTopic objName),Character cr asString.].	^publ.! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/8/2015 15:23'!getSubText: aNode	|subs|	subs:=''.	aNode sub do:[:aTopic | subs:= subs,'	', (aTopic objName),Character cr asString.].	^subs.! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/1/2015 18:13'!dataType	^ dataType! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DataWindow class	instanceVariableNames: ''!!DataWindow class methodsFor: 'spec' stamp: 'Grupoasdasdgf 12/1/2015 18:12'!defaultSpec 	<spec: #default>	^ SpecLayout composed		newColumn: [:tcol|			tcol newRow: [:trow|						trow add: #dataType.];					newRow: [:trow|						trow add: #dataDetail].]! !Object subclass: #Topic	instanceVariableNames: 'topicName pub sub type isOnGraph show'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!Topic methodsFor: 'initialization' stamp: 'Grupoasdf 11/23/2015 18:09'!initialize	super initialize.	sub:= OrderedCollection new.	pub:=OrderedCollection new.	type:=nil.	isOnGraph:= false.	show:= true.	topicName:=''.! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:16'!type	^ type! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:09'!show: anObject	show := anObject! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:09'!show	^ show! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:18'!objName: anObject	topicName := anObject! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/8/2015 12:33'!pub	"Nodes that publish on myself"	^ pub! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/12/2015 17:28'!isOnGraph	^ isOnGraph! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 19:12'!sub: anObject	sub add: anObject.	anObject sub: self.! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/8/2015 12:34'!sub	"Nodes that they're subscribing to me"	^ sub! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:17'!objName	^ topicName! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:16'!type: anObject	type := anObject! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/12/2015 17:28'!isOnGraph: anObject	isOnGraph := anObject! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 19:11'!pub: anObject	pub add: anObject.! !Object subclass: #PhaRos	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!PhaRos methodsFor: 'initialization' stamp: 'Grupoasdasdgf 12/8/2015 12:28'!initialize	|nodeArray graph|	nodeArray := Adapter new getData.	graph := RQTGMainWindow new .	graph data:nodeArray.	^graph openWithSpec.! !Object subclass: #Node	instanceVariableNames: 'sub pub show nodeName'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!Node methodsFor: 'initialization' stamp: 'Grupoasdf 11/23/2015 18:10'!initialize	super initialize.	pub := OrderedCollection new.	sub := OrderedCollection new.	show:= true.! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:49'!sub: anObject	sub add: anObject! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:09'!show: anObject	show := anObject! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:17'!objName	^ nodeName! !!Node methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/7/2015 18:19'!pub	"Topics where i am publishing to"	^ pub.! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 19:07'!pub: anObject	pub add: anObject.	anObject pub: self.! !!Node methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/7/2015 18:20'!sub	"Topics where i am subscribed to"	^ sub! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:17'!objName: anObject	nodeName := anObject! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:09'!show	^ show! !!Node methodsFor: 'configuration' stamp: 'Grupoasdf 11/10/2015 18:45'!nodeColor	self pub size > 0		ifTrue: [ 			self sub size > 0				ifTrue: [ ^Color red ]				ifFalse: [ ^Color cyan ] ]		ifFalse: [ 			self sub size > 0				ifTrue: [ ^Color yellow ]				ifFalse: [ ^Color green ] ]		! !!Node methodsFor: 'configuration' stamp: 'Grupoasdf 12/8/2015 19:32'!nodeColor: minAndMax	|min max|	min:= minAndMax first.	max:= minAndMax second.	^Color r:0.5 g:0.5 b:0.5 alpha:0.4.! !!Node methodsFor: 'configuration' stamp: 'Grupoasdf 12/8/2015 20:18'!nodeColor: minAndMax with: pubOrSub	|min max num |	min:= minAndMax first.	max:= minAndMax second.	pubOrSub		ifTrue:[num:= ((self pub size)- min)*1.0/(max-min+0.001).]		ifFalse:[num:=((self sub size)- min)*1.0/(max-min+0.001)].		self halt.	^Color r:1 g:num b:0 alpha:0.7.! !RTArrowedLine subclass: #RQTArrowedLine	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!RQTArrowedLine methodsFor: 'as yet unclassified' stamp: 'Grupoasdasdgf 12/8/2015 13:21'!edgeFrom: el1 to: el2	^ (RQTEdge from: el1 to: el2) addShape: self! !!RQTArrowedLine methodsFor: 'as yet unclassified' stamp: 'Grupoasdasdgf 12/8/2015 13:20'!initialize	super initialize! !