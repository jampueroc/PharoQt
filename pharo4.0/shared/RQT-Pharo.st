Object subclass: #Topic	instanceVariableNames: 'topicName pub sub type isOnGraph show'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!Topic methodsFor: 'initialization' stamp: 'Grupoasdf 11/23/2015 18:09'!initialize	super initialize.	sub:= OrderedCollection new.	pub:=OrderedCollection new.	type:=nil.	isOnGraph:= false.	show:= true.	topicName:=''.! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:16'!type	^ type! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:09'!show: anObject	show := anObject! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:48'!pub	^ pub! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:18'!objName: anObject	topicName := anObject! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:09'!show	^ show! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/12/2015 17:28'!isOnGraph	^ isOnGraph! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 19:12'!sub: anObject	sub add: anObject.	anObject sub: self.! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:48'!sub	^ sub! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:17'!objName	^ topicName! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:16'!type: anObject	type := anObject! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 19:11'!pub: anObject	pub add: anObject.! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/12/2015 17:28'!isOnGraph: anObject	isOnGraph := anObject! !Object subclass: #Node	instanceVariableNames: 'sub pub show nodeName'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!Node methodsFor: 'initialization' stamp: 'Grupoasdf 11/23/2015 18:10'!initialize	super initialize.	pub := OrderedCollection new.	sub := OrderedCollection new.	show:= true.! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:49'!sub: anObject	sub add: anObject! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:09'!show: anObject	show := anObject! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:17'!objName	^ nodeName! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:49'!pub	^ pub.! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 19:07'!pub: anObject	pub add: anObject.	anObject pub: self.! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:49'!sub	^ sub! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:17'!objName: anObject	nodeName := anObject! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:09'!show	^ show! !!Node methodsFor: 'configuration' stamp: 'Grupoasdf 11/10/2015 18:45'!nodeColor	self pub size > 0		ifTrue: [ 			self sub size > 0				ifTrue: [ ^Color red ]				ifFalse: [ ^Color cyan ] ]		ifFalse: [ 			self sub size > 0				ifTrue: [ ^Color yellow ]				ifFalse: [ ^Color green ] ]		! !Object subclass: #Adapter	instanceVariableNames: 'topics nodes'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!Adapter methodsFor: 'as yet unclassified' stamp: 'Grupoasdasdgf 12/5/2015 15:27'!getData	| proxy systemState newTopic newNode |	proxy := XMLRPCProxy withUrl: 'http://localhost:11311'.	systemState := proxy invokeMethod: 'getSystemState' withArgs: {'/script'}.	systemState third first do: [:expr | 		newTopic:=  self createTopic: (expr first). 		(expr second) do:[:aNode | 			newNode:= self createNode:aNode. 			newNode pub:newTopic. ].].		systemState third second do: [: expr |		newTopic:= self createTopic: (expr first).		(expr second) do:[:aNode |			newNode:= self createNode:aNode. 			newTopic sub: newNode.].].		^nodes.! !!Adapter methodsFor: 'as yet unclassified' stamp: 'Grupoasdasdgf 12/3/2015 17:45'!initialize	topics:= OrderedCollection new.	nodes := OrderedCollection new.	! !!Adapter methodsFor: 'as yet unclassified' stamp: 'Grupoasdasdgf 12/5/2015 15:27'!createNode: aNodeName	|exist newNode|	exist :=(self nodes select:[:aNode | (aNode objName) = aNodeName]).	exist	ifEmpty: [newNode:= (Node new objName: aNodeName). nodes add: newNode. ^newNode].	^ exist first.	! !!Adapter methodsFor: 'as yet unclassified' stamp: 'Grupoasdasdgf 12/5/2015 15:27'!createTopic: aTopicName	|exist newTopic |	exist :=(self topics select:[:aTopic | (aTopic objName) = aTopicName]).	exist	ifEmpty: [newTopic:= (Topic new objName: aTopicName). topics add: newTopic. ^newTopic ].	^ exist first.	! !!Adapter methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/3/2015 18:03'!topics	^ topics! !!Adapter methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/3/2015 18:03'!nodes	^ nodes! !!Adapter methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/3/2015 18:03'!topics: anObject	topics := anObject! !!Adapter methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/3/2015 18:03'!nodes: anObject	nodes := anObject! !ComposableModel subclass: #DataWindow	instanceVariableNames: 'data dataType dataDetail'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!DataWindow methodsFor: 'initialization' stamp: 'Grupoasdasdgf 12/1/2015 18:14'!initializeWidgets	dataType := self newText.	dataType enabled: false.		dataDetail := self newText.	dataDetail enabled: false.		self title: 'Info Node/Topics'.! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/1/2015 18:13'!data	^ data! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/3/2015 17:07'!data: anObject	data := anObject.	dataType text: data name.	dataDetail text: data objName.! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/1/2015 18:13'!dataType: anObject	dataType := anObject! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/1/2015 18:13'!dataType	^ dataType! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/1/2015 18:13'!dataDetail	^ dataDetail! !!DataWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/1/2015 18:13'!dataDetail: anObject	dataDetail := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DataWindow class	instanceVariableNames: ''!!DataWindow class methodsFor: 'spec' stamp: 'Grupoasdasdgf 12/1/2015 18:12'!defaultSpec 	<spec: #default>	^ SpecLayout composed		newColumn: [:tcol|			tcol newRow: [:trow|						trow add: #dataType.];					newRow: [:trow|						trow add: #dataDetail].]! !ComposableModel subclass: #RQTGMainWindow	instanceVariableNames: 'showName hideNodes hideTopics graph data hide graphObj'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!RQTGMainWindow methodsFor: 'initialization' stamp: 'GrupoASDF 11/26/2015 17:28'!initialize	hide := HideWindow new.	hide mainWindow: self.	super initialize! !!RQTGMainWindow methodsFor: 'initialization' stamp: 'Grupoasdasdgf 11/30/2015 18:04'!graphUpdate		graph script: [ :view :canvas | self graphObj data: data. self graphObj createGraph: data  withView: view.]! !!RQTGMainWindow methodsFor: 'initialization' stamp: 'Grupoasdasdgf 11/30/2015 18:00'!selectTopics	|topics|	topics := OrderedCollection new.	data collect:[:node | node pub collect: [:topic | topics add:topic  ] ].	^topics. ! !!RQTGMainWindow methodsFor: 'initialization' stamp: 'Grupoasdasdgf 11/30/2015 18:01'!initializeWidgets	hideNodes := self newButton.	hideTopics := self newButton.		showName := self newCheckBox.	showName  label: 'showName'.		showName state:  true.		data  := OrderedCollection new.	graph := self instantiate: RoassalModel.		hideNodes label:'Nodes'.	hideTopics label:'Topics'.		hideNodes action: [hide nodeOrTopic: 'node'. hide list: data ; openWithSpec].	hideTopics action: [hide nodeOrTopic: 'topic'. hide list: (self selectTopics)  ; openWithSpec].			self title:'RQT-GraPharo'.	graph script: [ :view :canvas | self graphObj: Graph new.  self graphObj createGraph: data  withView: view   ]! !!RQTGMainWindow methodsFor: 'initialization' stamp: 'Grupoasdasdgf 11/30/2015 17:45'!initializePresenter	showName whenChangedDo: [graphObj names: (graphObj names not). graph script: [ :view :canvas | self graphObj data: data. self graphObj createGraph: data  withView: view.]]! !!RQTGMainWindow methodsFor: 'initialization' stamp: 'Grupoasdasdgf 12/1/2015 17:30'!listChangeTopics: nameObj with: value	data do:[:item | item sub do: [ :topic |  topic objName = nameObj		ifTrue: [ topic show:value. ].		topic isOnGraph: false.   ].	]! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 11/30/2015 17:02'!graphObj: anObject	graphObj := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!refreshButton: anObject	refreshButton := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!showData	^ showData! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!hideNodes	^ hideNodes! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!hideTopics	^ hideTopics! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!graph: anObject	graph := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 12/1/2015 18:36'!listChange: nameObj with: value	data do:[:item | (item objName) = nameObj		ifTrue: [ item show:value ].		   ].! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!hideNodes: anObject	hideNodes := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!refreshButton	^ refreshButton! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:59'!data	^ data! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!showName: anObject	showName := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!showName	^ showName! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 11/30/2015 17:02'!graphObj	^ graphObj! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!hideTopics: anObject	hideTopics := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!showData: anObject	showData := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:59'!data: anObject	data := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!graph	^ graph! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RQTGMainWindow class	instanceVariableNames: ''!!RQTGMainWindow class methodsFor: 'specs' stamp: 'Grupoasdasdgf 11/30/2015 17:07'!defaultSpec 	<spec: #default>	^ SpecLayout composed		newColumn: [:tcol|			tcol newRow: [:trow|						trow add: #showName; 							add: #hideNodes; add: #hideTopics] height: self toolbarHeight  ;					newRow: [:trow|						trow add: #graph]]! !ComposableModel subclass: #HideWindow	instanceVariableNames: 'list labelSearch search hideMenu clearSearchButton hideButton showButton mainWindow nodeOrTopic'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!HideWindow methodsFor: 'private' stamp: 'Grupoasdf 11/24/2015 18:11'!wrapItem: aNodeOrTopic	^ { aNodeOrTopic objName . aNodeOrTopic show asString }! !!HideWindow methodsFor: 'private' stamp: 'Grupoasdf 11/23/2015 18:36'!setFilter: aFilterText	aFilterText isEmpty		ifTrue: [ self hideMenu resetFilteringBlock ]		ifFalse: [ self hideMenu				filteringBlock: [ :items | items select: [ :item | 						(self wrapItem: item) anySatisfy: [ :s | s includesSubstring: aFilterText caseSensitive: false ] ] ] ]! !!HideWindow methodsFor: 'private' stamp: 'Grupoasdasdgf 12/1/2015 17:10'!listChange: nameObj with: value	list do:[:item | (item objName) = nameObj		ifTrue: [ item show:value.]		  ].	self setListMenu.	(self nodeOrTopic = 'node')	ifTrue: [	mainWindow listChange: nameObj with: value.]	ifFalse: [mainWindow listChangeTopics: nameObj with: value.].	! !!HideWindow methodsFor: 'private' stamp: 'Grupoasdf 11/24/2015 18:13'!setListMenu	hideMenu items:self list.! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:27'!hideMenu: anObject	hideMenu := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!labelSearch: anObject	labelSearch := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:56'!clearSearchButton: anObject	clearSearchButton := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 17:25'!mainWindow: anObject	mainWindow := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/24/2015 18:01'!list: anObject	list := anObject.	self setListMenu.! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!search: anObject	search := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:56'!clearSearchButton	^ clearSearchButton! !!HideWindow methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 16:34'!hideButton	^ hideButton! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!labelSearch	^ labelSearch! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 11/30/2015 17:53'!nodeOrTopic: anObject	nodeOrTopic := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 16:30'!showButton	^ showButton! !!HideWindow methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 16:30'!showButton: anObject	showButton := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 16:30'!hideButton: anObject	hideButton := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:27'!hideMenu	^ hideMenu! !!HideWindow methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 17:25'!mainWindow	^ mainWindow! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!search	^ search! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!list	^ list! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdasdgf 11/30/2015 17:53'!nodeOrTopic	^ nodeOrTopic! !!HideWindow methodsFor: 'initialization' stamp: 'Grupoasdasdgf 11/30/2015 18:05'!initializePresenter	|a|	search		whenTextChanged: [ :text | 			clearSearchButton enabled: text isEmpty not.			self setFilter: text ].	clearSearchButton action: [ search text: '' ].		showButton action: [a:=hideMenu selectedItems collect: [:item | item first ].								a do:[:ele  | self listChange:ele with:true ]. 	mainWindow graphUpdate.].	hideButton action: [a:=hideMenu selectedItems collect: [:item | item first ].								a do:[:ele  | self listChange:ele with:false ].	mainWindow graphUpdate.].! !!HideWindow methodsFor: 'initialization' stamp: 'GrupoASDF 11/26/2015 16:36'!initializeWidgets	labelSearch  := self newLabel.		search := self newTextInput.	search removeEntryCompletion.	search ghostText: 'Search'.	search autoAccept: true.		list:=OrderedCollection new.		hideMenu := self newMultiColumnList.	hideMenu items: (self list).	hideMenu displayBlock: [ :item | self wrapItem: item ].	hideMenu sortingBlock: [ :a :b | a objName < b objName ].	hideMenu menu: [ :m :s| self menu:m shifted:s].	hideMenu multiSelection:true.	clearSearchButton := self newButton.	clearSearchButton  icon: Smalltalk ui icons smallCancelIcon.	clearSearchButton enabled:false.		labelSearch label: 'Node/Topic:'.	hideButton := self newButton.	hideButton label: 'Hide'.	showButton := self newButton.		showButton label: 'Show'.				self title:'RQT-GraPharo/NodesAndTopics'.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HideWindow class	instanceVariableNames: ''!!HideWindow class methodsFor: 'spec' stamp: 'GrupoASDF 11/26/2015 16:36'!defaultSpec 	<spec: #default>	^ SpecLayout composed		newColumn: [:tcol|			tcol newRow: [:trow|						trow add:#labelSearch ; add: #search ; add: #clearSearchButton] height: self toolbarHeight;					newRow: [:trow|						trow add: #hideMenu];					newRow: [:trow|						trow add: #hideButton; add: #showButton]height: self toolbarHeight].! !Object subclass: #TestingGraph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!TestingGraph methodsFor: 'Testing graph' stamp: 'Grupoasdasdgf 11/30/2015 18:02'!testMainWindow2	|nodeA nodeB nodeC nodeD topic1 topic2 topic3 topic4 nodeArray graph|	nodeA := Node new.	nodeB := Node new.	nodeC := Node new.	nodeD := Node new.	topic1 := Topic new.	topic2 := Topic new.	topic3 := Topic new.	topic4 := Topic new.		nodeA objName: 'A'.	nodeB objName: 'B'.	nodeC objName: 'C'.	nodeD objName: 'D'.		topic1 objName: 'Holi'.	topic2 objName: 'Bye'.	topic3 objName: 'Hello'.	topic4 objName: 'Hi'.		nodeA pub: topic1.	nodeB pub: topic2.	nodeA pub: topic3.	nodeA pub: topic4.		topic1 sub: nodeC.	topic3 sub: nodeC.	topic4 sub: nodeC.	topic2 sub: nodeA.		nodeArray := OrderedCollection new.	nodeArray add: nodeA.	nodeArray add: nodeB.	nodeArray add: nodeC.	nodeArray add: nodeD.	graph := RQTGMainWindow new .	graph data:nodeArray.	^graph openWithSpec.! !!TestingGraph methodsFor: 'Testing graph' stamp: 'Grupoasdf 11/23/2015 18:18'!test1	|nodeA nodeB nodeC nodeD nodeArray graph topic1 topic2 |	nodeA := Node new.	nodeB := Node new.	nodeC := Node new.	nodeD := Node new.	topic1 := Topic new.	topic2 := Topic new.		nodeA objName: 'A'.	nodeB objName: 'B'.	nodeC objName: 'C'.	nodeD objName: 'D'.		topic1 objName: 'Holi'.	topic2 objName: 'Bye'.	nodeA pub: topic1.	nodeB pub: topic2.		topic1 sub: nodeB.	topic2 sub: nodeC.		nodeArray := OrderedCollection new.	nodeArray add: nodeA.	nodeArray add: nodeB.	nodeArray add: nodeC.	nodeArray add: nodeD.	graph := Graph new.	^graph createGraph: nodeArray.! !!TestingGraph methodsFor: 'Testing graph' stamp: 'Grupoasdf 11/23/2015 18:18'!testMainWindow1	| nodeA nodeB nodeC nodeD topic1 topic2 nodeArray graph |	nodeA := Node new.	nodeB := Node new.	nodeC := Node new.	nodeD := Node new.	topic1 := Topic new.	topic2 := Topic new.		nodeA objName: 'A'.	nodeB objName: 'B'.	nodeC objName: 'C'.	nodeD objName: 'D'.		topic1 objName: 'Holi'.	topic2 objName: 'Bye'.	nodeA pub: topic1.	nodeB pub: topic2.		topic1 sub: nodeB.	topic2 sub: nodeC.		nodeArray := OrderedCollection new.	nodeArray add: nodeA.	nodeArray add: nodeB.	nodeArray add: nodeC.	nodeArray add: nodeD.	graph := RQTGMainWindow new .	graph data:nodeArray.	^graph openWithSpec.! !!TestingGraph methodsFor: 'Testing graph' stamp: 'Grupoasdf 11/23/2015 18:18'!test2	|nodeA nodeB nodeC nodeD topic1 topic2 topic3 topic4 nodeArray graph|	nodeA := Node new.	nodeB := Node new.	nodeC := Node new.	nodeD := Node new.	topic1 := Topic new.	topic2 := Topic new.	topic3 := Topic new.	topic4 := Topic new.		nodeA objName: 'A'.	nodeB objName: 'B'.	nodeC objName: 'C'.	nodeD objName: 'D'.		topic1 objName: 'Holi'.	topic2 objName: 'Bye'.	topic3 objName: 'Hello'.	topic4 objName: 'Hi'.		nodeA pub: topic1.	nodeB pub: topic2.	nodeA pub: topic3.	nodeA pub: topic4.		topic1 sub: nodeC.	topic3 sub: nodeC.	topic4 sub: nodeC.	topic2 sub: nodeA.		nodeArray := OrderedCollection new.	nodeArray add: nodeA.	nodeArray add: nodeB.	nodeArray add: nodeC.	nodeArray add: nodeD.	graph := Graph new.	^graph createGraph: nodeArray.! !Object subclass: #Graph	instanceVariableNames: 'data view names'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!Graph methodsFor: 'visualization' stamp: 'Grupoasdasdgf 11/30/2015 17:46'!withNameNode	names = true	ifTrue: [^(RTLabel text:[:val | val objName] )].	^(RTLabel text: '').! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdf 11/12/2015 17:45'!edgesAndNodes: view	| arrow edgeB |	arrow := RTArrowedLine new withOffsetIfMultiple width: 2; color: Color black.	edgeB := RTEdgeBuilder new.	edgeB view: view.	edgeB shapeBuilder: arrow.	^edgeB! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdasdgf 11/30/2015 17:49'!withNameTopic: anEdge	names = true	ifTrue: [^anEdge@ (RTPopup text: ((self getTopic: anEdge model) objName ) )].	^anEdge.! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdf 11/12/2015 17:37'!addLayout: view	|layout stepping|	layout := RTForceBasedLayout new		charge: -450;		length: 100.	layout on: view elements.	layout initialLayout: RTSugiyamaLayout new.	stepping := RTSpringLayoutStepping new		view: view;		layout: layout;		afterBlock: [ view canvas camera focusOnCenter ].	view addAnimation: stepping.	^view.	! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdasdgf 12/1/2015 17:33'!getSub: node	|res|	res:= OrderedCollection new.	(node pub) collect: [:topic | topic show = true		ifTrue:[(topic sub) collect:[:sub | res add:sub ] ] ].	^res! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdasdgf 12/1/2015 17:40'!getTopic: model	|initialNode finalNode subs|	initialNode := model key.	finalNode := model value.	subs := OrderedCollection new.	initialNode pub collect: [:topic| topic sub collect: [ :sub | (sub == finalNode) 			ifTrue: [subs add: topic].] ].	subs collect:[:topic | ((topic isOnGraph) or:(topic show not)) 		ifFalse: [topic isOnGraph: true. ^topic ].].	^subs first.! !!Graph methodsFor: 'visualization' stamp: 'GrupoASDF 11/26/2015 17:43'!createGraph: nodeArray	self data: nodeArray. 	^ self createGraph: data  withView: RTView new. ! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdasdgf 12/3/2015 17:11'!createGraph: nodeArray withView: aView	view:=aView.	view		addAll:			(((RTEllipse new				size: 200 / nodeArray size;				color: [ :node | node nodeColor]) + self withNameNode) elementsOn: (nodeArray select: [:node | node show])).	(self edgesAndNodes: view)		objects: nodeArray;		connectFrom: [:publisher | publisher ] toAll: [:sub | (self getSub:sub) ].	view elements do: [:element |			element @ RTDraggable.			element when: TRMouseClick do: [ :e |  (DataWindow new data: element model) openWithSpec.]].	view edges do: [:edge | self withNameTopic: edge.		edge when: TRMouseClick do:[:e | (DataWindow new data: edge model key) openWithSpec. edge inspect]].		^ self addLayout: view.! !!Graph methodsFor: 'initialization' stamp: 'Grupoasdasdgf 11/30/2015 17:19'!initialize	data:= OrderedCollection new.	names:= true.	super initialize.! !!Graph methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 17:42'!data	^ data! !!Graph methodsFor: 'accessing' stamp: 'Grupoasdasdgf 11/30/2015 17:44'!names: anObject	names := anObject! !!Graph methodsFor: 'accessing' stamp: 'GrupoASDF 11/26/2015 17:42'!data: anObject	data := anObject! !!Graph methodsFor: 'accessing' stamp: 'Grupoasdasdgf 11/30/2015 17:44'!view: anObject	view := anObject! !!Graph methodsFor: 'accessing' stamp: 'Grupoasdasdgf 11/30/2015 17:44'!names	^ names! !!Graph methodsFor: 'accessing' stamp: 'Grupoasdasdgf 11/30/2015 17:44'!view	^ view! !