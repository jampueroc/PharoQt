ComposableModel subclass: #RQTGMainWindow	instanceVariableNames: 'refreshButton showData showName hideNodes hideTopics graph data hide'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!hideTopics	^ hideTopics! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!hideTopics: anObject	hideTopics := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:59'!data: anObject	data := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!refreshButton	^ refreshButton! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!showName: anObject	showName := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!hideNodes: anObject	hideNodes := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!showData: anObject	showData := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!showName	^ showName! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!graph: anObject	graph := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:59'!data	^ data! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!showData	^ showData! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!refreshButton: anObject	refreshButton := anObject! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!hideNodes	^ hideNodes! !!RQTGMainWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/17/2015 17:27'!graph	^ graph! !!RQTGMainWindow methodsFor: 'initialization' stamp: 'Grupoasdf 11/23/2015 18:47'!initializeWidgets	refreshButton := self newButton.	hideNodes := self newButton.	hideTopics := self newButton.		showData := self newCheckBox.	showName := self newCheckBox.	showData  label: 'showData'.	showName  label: 'showName'.		data  := OrderedCollection new.	graph := self instantiate: RoassalModel.		hideNodes label:'Nodes'.	hideTopics label:'Topics'.		hideNodes action: [hide list: data "Cambiar por nodos"; openWithSpec].	hideTopics action: [hide list: data "Cambiar por nodos"; openWithSpec].		refreshButton label:'refresh'.		self title:'RQT-GraPharo'.	graph script: [ :view :canvas | Graph new createGraph: data  withView: view   ]! !!RQTGMainWindow methodsFor: 'initialization' stamp: 'Grupoasdf 11/23/2015 18:43'!initialize	hide := HideWindow new.	super initialize! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RQTGMainWindow class	instanceVariableNames: ''!!RQTGMainWindow class methodsFor: 'specs' stamp: 'Grupoasdf 11/17/2015 18:12'!defaultSpec 	<spec: #default>	^ SpecLayout composed		newColumn: [:tcol|			tcol newRow: [:trow|						trow add: #refreshButton; add: #showData; add: #showName; 							add: #hideNodes; add: #hideTopics] height: self toolbarHeight  ;					newRow: [:trow|						trow add: #graph]]! !ComposableModel subclass: #WrapObjComposable	instanceVariableNames: 'aNodeOrTopic composableObj label obj'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!WrapObjComposable methodsFor: 'initializing' stamp: 'Grupoasdf 11/23/2015 18:31'!initializeWidgets	label := self newLabel.! !!WrapObjComposable methodsFor: 'initializing' stamp: 'Grupoasdf 11/23/2015 18:20'!initialize		super initialize! !!WrapObjComposable methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:26'!label: anObject	label := anObject! !!WrapObjComposable methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:29'!obj	^ obj! !!WrapObjComposable methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:21'!composableObj	^composableObj .! !!WrapObjComposable methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:26'!label	^ label! !!WrapObjComposable methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:22'!aNodeOrTopic	^ aNodeOrTopic! !!WrapObjComposable methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:29'!obj: anObject	obj := anObject! !!WrapObjComposable methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:22'!aNodeOrTopic: anObject	aNodeOrTopic := anObject! !!WrapObjComposable methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:28'!composableObj: inst	composableObj := inst.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WrapObjComposable class	instanceVariableNames: ''!!WrapObjComposable class methodsFor: 'spec' stamp: 'Grupoasdf 11/23/2015 18:29'!defaultSpec 	<spec: #default>	^ SpecLayout composed		newColumn: [:tcol|			tcol newRow: [:trow|						trow add:#label ;add: #obj] height: self toolbarHeight]! !Object subclass: #Node	instanceVariableNames: 'sub pub show nodeName'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!Node methodsFor: 'configuration' stamp: 'Grupoasdf 11/10/2015 18:45'!nodeColor	self pub size > 0		ifTrue: [ 			self sub size > 0				ifTrue: [ ^Color red ]				ifFalse: [ ^Color cyan ] ]		ifFalse: [ 			self sub size > 0				ifTrue: [ ^Color yellow ]				ifFalse: [ ^Color green ] ]		! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:49'!sub: anObject	sub add: anObject! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:09'!show: anObject	show := anObject! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:17'!objName: anObject	nodeName := anObject! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:17'!objName	^ nodeName! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:49'!pub	^ pub.! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:49'!sub	^ sub! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 19:07'!pub: anObject	pub add: anObject.	anObject pub: self.! !!Node methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:09'!show	^ show! !!Node methodsFor: 'initialization' stamp: 'Grupoasdf 11/23/2015 18:10'!initialize	super initialize.	pub := OrderedCollection new.	sub := OrderedCollection new.	show:= true.! !Object subclass: #Topic	instanceVariableNames: 'topicName pub sub type isOnGraph show'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!Topic methodsFor: 'initialization' stamp: 'Grupoasdf 11/23/2015 18:09'!initialize	super initialize.	sub:= OrderedCollection new.	pub:=OrderedCollection new.	type:=nil.	isOnGraph:= false.	show:= true.	topicName:=''.! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:16'!type	^ type! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:09'!show: anObject	show := anObject! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:09'!show	^ show! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:18'!objName: anObject	topicName := anObject! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 19:11'!pub: anObject	pub add: anObject.! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 18:17'!objName	^ topicName! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:48'!pub	^ pub! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 19:12'!sub: anObject	sub add: anObject.	anObject sub: self.! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/12/2015 17:28'!isOnGraph	^ isOnGraph! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:16'!type: anObject	type := anObject! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/10/2015 18:48'!sub	^ sub! !!Topic methodsFor: 'accessing' stamp: 'Grupoasdf 11/12/2015 17:28'!isOnGraph: anObject	isOnGraph := anObject! !ComposableModel subclass: #HideWindow	instanceVariableNames: 'list labelSearch search hideMenu clearSearchButton hideShowButton'	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!HideWindow methodsFor: 'initialization' stamp: 'Grupoasdf 11/23/2015 17:34'!initializePresenter	search		whenTextChanged: [ :text | 			clearSearchButton enabled: text isEmpty not.			self setFilter: text ].	clearSearchButton action: [ search text: '' ].! !!HideWindow methodsFor: 'initialization' stamp: 'Grupoasdf 11/24/2015 18:17'!initializeWidgets	labelSearch  := self newLabel.		search := self newTextInput.	search removeEntryCompletion.	search ghostText: 'Search'.	search autoAccept: true.		list:=OrderedCollection new.		hideMenu := self newMultiColumnList.	hideMenu items: (self list).	hideMenu displayBlock: [ :item | self wrapItem: item ].	hideMenu sortingBlock: [ :a :b | a objName < b objName ].	hideMenu menu: [ :m :s| self menu:m shifted:s].	hideMenu multiSelection:true.	clearSearchButton := self newButton.	clearSearchButton  icon: Smalltalk ui icons smallCancelIcon.	clearSearchButton enabled:false.		labelSearch label: 'Node/Topic:'.					self title:'RQT-GraPharo/NodesAndTopics'.! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:27'!hideMenu	^ hideMenu! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/24/2015 18:01'!list: anObject	list := anObject.	self setListMenu.! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!labelSearch	^ labelSearch! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!search: anObject	search := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/24/2015 17:35'!listButton: anObject	hideShowButton add: anObject! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/24/2015 17:35'!listButton	^ hideShowButton! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:27'!hideMenu: anObject	hideMenu := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!labelSearch: anObject	labelSearch := anObject! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:56'!clearSearchButton	^ clearSearchButton! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!search	^ search! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:24'!list	^ list! !!HideWindow methodsFor: 'accessing' stamp: 'Grupoasdf 11/23/2015 17:56'!clearSearchButton: anObject	clearSearchButton := anObject! !!HideWindow methodsFor: 'private' stamp: 'Grupoasdf 11/24/2015 18:13'!setListMenu	hideMenu items:self list.! !!HideWindow methodsFor: 'private' stamp: 'Grupoasdf 11/23/2015 18:36'!setFilter: aFilterText	aFilterText isEmpty		ifTrue: [ self hideMenu resetFilteringBlock ]		ifFalse: [ self hideMenu				filteringBlock: [ :items | items select: [ :item | 						(self wrapItem: item) anySatisfy: [ :s | s includesSubstring: aFilterText caseSensitive: false ] ] ] ]! !!HideWindow methodsFor: 'private' stamp: 'Grupoasdf 11/24/2015 18:11'!wrapItem: aNodeOrTopic	^ { aNodeOrTopic objName . aNodeOrTopic show asString }! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HideWindow class	instanceVariableNames: ''!!HideWindow class methodsFor: 'spec' stamp: 'Grupoasdf 11/23/2015 17:57'!defaultSpec 	<spec: #default>	^ SpecLayout composed		newColumn: [:tcol|			tcol newRow: [:trow|						trow add:#labelSearch ; add: #search ; add: #clearSearchButton] height: self toolbarHeight;					newRow: [:trow|						trow add: #hideMenu] ]! !Object subclass: #Graph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!Graph methodsFor: 'initialization' stamp: 'Grupoasdf 11/5/2015 17:01'!initialize	super initialize.! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdf 11/12/2015 17:45'!edgesAndNodes: view	| arrow edgeB |	arrow := RTArrowedLine new withOffsetIfMultiple width: 2; color: Color black.	edgeB := RTEdgeBuilder new.	edgeB view: view.	edgeB shapeBuilder: arrow.	^edgeB! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdf 11/23/2015 18:17'!createGraph: nodeArray withView: view	view		addAll:			((RTEllipse new				size: 200 / nodeArray size;				color: [ :node | node nodeColor]) + (RTLabel text: [ :val | val objName ]) elementsOn: nodeArray).	(self edgesAndNodes: view)		objects: nodeArray;		connectFrom: [:publisher | publisher ] toAll: [:sub | self getSub:sub].	view elements do: [:element | element @ RTDraggable ].		view edges do: [:edge | edge @ (RTPopup text: ((self getTopic: edge model) objName ) )].		^ self addLayout: view.! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdf 11/12/2015 17:37'!addLayout: view	|layout stepping|	layout := RTForceBasedLayout new		charge: -450;		length: 100.	layout on: view elements.	layout initialLayout: RTSugiyamaLayout new.	stepping := RTSpringLayoutStepping new		view: view;		layout: layout;		afterBlock: [ view canvas camera focusOnCenter ].	view addAnimation: stepping.	^view.	! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdf 11/12/2015 17:01'!getSub: node	|res|	res:= OrderedCollection new.	(node pub) collect: [:topic | (topic sub) collect:[:sub | res add:sub ] ].	^res! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdf 11/17/2015 17:58'!createGraph: nodeArray	^ self createGraph: nodeArray  withView: RTView new. ! !!Graph methodsFor: 'visualization' stamp: 'Grupoasdf 11/12/2015 17:35'!getTopic: model	|initialNode finalNode subs|	initialNode := model key.	finalNode := model value.	subs := OrderedCollection new.	initialNode pub collect: [:topic| topic sub collect: [ :sub | (sub == finalNode) 			ifTrue: [subs add: topic].] ].	subs collect:[:topic | (topic isOnGraph)		ifFalse: [topic isOnGraph: true. ^topic ].].	^subs first.! !Object subclass: #TestingGraph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'RQT-Pharo'!!TestingGraph methodsFor: 'Testing graph' stamp: 'Grupoasdf 11/23/2015 18:18'!testMainWindow1	| nodeA nodeB nodeC nodeD topic1 topic2 nodeArray graph |	nodeA := Node new.	nodeB := Node new.	nodeC := Node new.	nodeD := Node new.	topic1 := Topic new.	topic2 := Topic new.		nodeA objName: 'A'.	nodeB objName: 'B'.	nodeC objName: 'C'.	nodeD objName: 'D'.		topic1 objName: 'Holi'.	topic2 objName: 'Bye'.	nodeA pub: topic1.	nodeB pub: topic2.		topic1 sub: nodeB.	topic2 sub: nodeC.		nodeArray := OrderedCollection new.	nodeArray add: nodeA.	nodeArray add: nodeB.	nodeArray add: nodeC.	nodeArray add: nodeD.	graph := RQTGMainWindow new .	graph data:nodeArray.	^graph openWithSpec.! !!TestingGraph methodsFor: 'Testing graph' stamp: 'Grupoasdf 11/23/2015 18:18'!test1	|nodeA nodeB nodeC nodeD nodeArray graph topic1 topic2 |	nodeA := Node new.	nodeB := Node new.	nodeC := Node new.	nodeD := Node new.	topic1 := Topic new.	topic2 := Topic new.		nodeA objName: 'A'.	nodeB objName: 'B'.	nodeC objName: 'C'.	nodeD objName: 'D'.		topic1 objName: 'Holi'.	topic2 objName: 'Bye'.	nodeA pub: topic1.	nodeB pub: topic2.		topic1 sub: nodeB.	topic2 sub: nodeC.		nodeArray := OrderedCollection new.	nodeArray add: nodeA.	nodeArray add: nodeB.	nodeArray add: nodeC.	nodeArray add: nodeD.	graph := Graph new.	^graph createGraph: nodeArray.! !!TestingGraph methodsFor: 'Testing graph' stamp: 'Grupoasdf 11/23/2015 18:18'!test2	|nodeA nodeB nodeC nodeD topic1 topic2 topic3 topic4 nodeArray graph|	nodeA := Node new.	nodeB := Node new.	nodeC := Node new.	nodeD := Node new.	topic1 := Topic new.	topic2 := Topic new.	topic3 := Topic new.	topic4 := Topic new.		nodeA objName: 'A'.	nodeB objName: 'B'.	nodeC objName: 'C'.	nodeD objName: 'D'.		topic1 objName: 'Holi'.	topic2 objName: 'Bye'.	topic3 objName: 'Hello'.	topic4 objName: 'Hi'.		nodeA pub: topic1.	nodeB pub: topic2.	nodeA pub: topic3.	nodeA pub: topic4.		topic1 sub: nodeC.	topic3 sub: nodeC.	topic4 sub: nodeC.	topic2 sub: nodeA.		nodeArray := OrderedCollection new.	nodeArray add: nodeA.	nodeArray add: nodeB.	nodeArray add: nodeC.	nodeArray add: nodeD.	graph := Graph new.	^graph createGraph: nodeArray.! !